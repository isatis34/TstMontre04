<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for UNIX (Red Hat Enterprise Linux for x86-64) 2016.1.3 (Build 306_0_17029U)" ts="2018-04-20 11:55:58">
<Project name="Bureautique_Region_FRXX" LastModified="2018-03-20 19:43:28.03213" Target="^User.PALetter.1" TargetType="2">
  <Items>
    <ProjectItem name="ClinicomConstantes.INC" type="MAC"></ProjectItem>
    <ProjectItem name="Region.FRXX.ClinicomLink.WebServices.Wrd.ClassDocumentsServices" type="CLS"></ProjectItem>
    <ProjectItem name="Region.FRXX.ClinicomLink.cli.Grp.ClassListofUserLocations" type="CLS"></ProjectItem>
    <ProjectItem name="Region.FRXX.ClinicomLink.cli.Grp.ClassUserLocation" type="CLS"></ProjectItem>
    <ProjectItem name="Region.FRXX.ClinicomLink.cli.Pat.ClassEpisode" type="CLS"></ProjectItem>
    <ProjectItem name="Region.FRXX.ClinicomLink.cli.Pat.ClassListofEpisodes" type="CLS"></ProjectItem>
    <ProjectItem name="Region.FRXX.ClinicomLink.cli.Pat.ClassListofPatients" type="CLS"></ProjectItem>
    <ProjectItem name="Region.FRXX.ClinicomLink.cli.Pat.ClassListofPatientsAppt" type="CLS"></ProjectItem>
    <ProjectItem name="Region.FRXX.ClinicomLink.cli.Pat.ClassPatient" type="CLS"></ProjectItem>
    <ProjectItem name="Region.FRXX.ClinicomLink.cli.Pat.ClassPatientAppt" type="CLS"></ProjectItem>
    <ProjectItem name="Region.FRXX.ClinicomLink.cli.PatS.ClassPatientSearchByRBResource" type="CLS"></ProjectItem>
    <ProjectItem name="Region.FRXX.ClinicomLink.cli.PatS.ClassPatientSearchIdentity" type="CLS"></ProjectItem>
    <ProjectItem name="Region.FRXX.ClinicomLink.cli.SDC.ClassListofMedecinsEtab" type="CLS"></ProjectItem>
    <ProjectItem name="Region.FRXX.ClinicomLink.cli.SDC.ClassListofMedecinsExt" type="CLS"></ProjectItem>
    <ProjectItem name="Region.FRXX.ClinicomLink.cli.SDC.ClassMedecinEtab" type="CLS"></ProjectItem>
    <ProjectItem name="Region.FRXX.ClinicomLink.cli.SDC.ClassMedecinExt" type="CLS"></ProjectItem>
    <ProjectItem name="Region.FRXX.ClinicomLink.cli.Wrd.ClassContext" type="CLS"></ProjectItem>
    <ProjectItem name="Region.FRXX.ClinicomLink.cli.Wrd.ClassCorrespondant" type="CLS"></ProjectItem>
    <ProjectItem name="Region.FRXX.ClinicomLink.cli.Wrd.ClassDocument" type="CLS"></ProjectItem>
    <ProjectItem name="Region.FRXX.ClinicomLink.cli.Wrd.ClassDocumentStream" type="CLS"></ProjectItem>
    <ProjectItem name="Region.FRXX.ClinicomLink.cli.Wrd.ClassLTMRU" type="CLS"></ProjectItem>
    <ProjectItem name="Region.FRXX.ClinicomLink.cli.Wrd.ClassListofCorrespondants" type="CLS"></ProjectItem>
    <ProjectItem name="Region.FRXX.ClinicomLink.cli.Wrd.ClassListofDocuments" type="CLS"></ProjectItem>
    <ProjectItem name="Region.FRXX.ClinicomLink.cli.Wrd.ClassListofDocumentsStream" type="CLS"></ProjectItem>
    <ProjectItem name="Region.FRXX.ClinicomLink.cli.Wrd.ClassListofMergeFields" type="CLS"></ProjectItem>
    <ProjectItem name="Region.FRXX.ClinicomLink.cli.Wrd.ClassListofWards" type="CLS"></ProjectItem>
    <ProjectItem name="Region.FRXX.ClinicomLink.cli.Wrd.ClassMergeField" type="CLS"></ProjectItem>
    <ProjectItem name="Region.FRXX.ClinicomLink.cli.Wrd.ClassMergeTemplate" type="CLS"></ProjectItem>
    <ProjectItem name="Region.FRXX.ClinicomLink.cli.Wrd.ClassWard" type="CLS"></ProjectItem>
  </Items>
</Project>


<Routine name="ClinicomConstantes" type="INC" timestamp="64009,29825.97476"><![CDATA[
	; Name: ClinicomConstantes.inc 
	; Desc: different Macros used in the Frech Edition
	; Created: LBO, 20120509 Init
	; Updated: LBO, 20120509 

#Include %systemInclude
#Include %occErrors
#Include %occStatus

#define TRUE 1
#define FALSE 0

#define CURRENTMETHOD			(##expression(""""_$get(%methodname)_""""))
#define CURRENTCLASSANDMETHOD	($CLASSNAME()_" "_$$$CURRENTMETHOD)
#define CLOSERSET(%RSet)		IF $DATA(%RSet){IF %RSet '= "" {IF %RSet.%IsA("%Library.ResultSet") {DO %RSet.Close()} ELSEIF %RSet.%IsA("%SQL.StatementResult") {DO %RSet.%Close()} SET %RSet= ""}}
#define CLOSEFILE(%File)		IF $DATA(%File){IF %File '= "" {DO %File.Close() SET %File= ""}}

	// 20110420
#define DATENEUTRAL				($ZDate($HOROLOG, 8))
	// 201104201030
#define DATETIMENEUTRAL			($ZDATE($PIECE($HOROLOG,",",1),8)_$E($TR($ZTIME($PIECE($HOROLOG,",",2)),":",""),1,4))
	// 20110420103032
#define FULLDATETIMENEUTRAL		($ZDATE($PIECE($HOROLOG,",",1),8)_$E($TR($ZTIME($PIECE($HOROLOG,",",2)),":",""),1,6))

	// De DD/MM/[YY]YY => 20120806 
#define CONVERTDATE2NEUTRAL(%Buffer)	($ZDATE($ZDATEH(%Buffer,4),8))
#define CONVERTTIME2NEUTRAL(%Buffer)	($EXTRACT(%Buffer,1,2)_$EXTRACT(%Buffer,4,5))
#define CONVERTHOROLOG2NEUTRALDATETIME(%Buffer)	($ZDATE(%Buffer, 8) _ $TRANSLATE($ZTIME($PIECE(%Buffer,",",2)),":",""))
#define CONVERTHOROLOG2NEUTRAL(%Buffer)	$ZDate(%Buffer, 8)

	// de 62645 ou 62645.0 => 20120707
#define CONVERTDATEHOROLOG2NEUTRALDATE(%Buffer)	$ZDATE(%Buffer,8)
	// de 20121022 => 62752,0
#define CONVERTNEUTRALDATETIME2HOROLOGDT(%DTTM)	$ZDATEH($EXTRACT(%DTTM,0,8),8)_",0"

#define TOUPPER(%Buffer)			($ZCONVERT(%Buffer,"U"))
#define TOUPPERNOACCENT(%Buffer)	($$$TOUPPER($TR(%Buffer,"àâäçéèêëîïìòôöûùüý","aaaceeeeiiiooouuuy")))
#define TOLOWER(%Buffer)			($ZCONVERT(%Buffer,"L"))
#define LTRIM(%Buffer)				($ZSTRIP(%Buffer,"<W",""))
#define RTRIM(%Buffer)				($ZSTRIP(%Buffer,">W",""))
#define TRIM(%Buffer)				($ZSTRIP(%Buffer,"<>W",""))

#define COMPANYNAME				"INTERSYSTEMS"

	/*
	IF '$$$ISCLINICOMINSTALLED
	{
		SET Retour = ##class(%SYSTEM.Status).Error($$$GeneralError, $$$CLINICOMNOTINSTALLEDMSG)
		GOTO EmergToDeadFin
	}
	*/ 

#define	ISCLINICOMINSTALLED		(##class(Custom.FRXX.Clinicom.cli.utils.ClassParameter).GetValue("FR_CLINICOM_INSTALLED", $$$FALSE) && (($G(%session) = "") || ($ZCVT(%session.Get("LOGON.USERCODE"), "U") '= "ISC$HL7")))
#define CLINICOMNOTINSTALLEDMSG	"Clinicom n'est pas connecté avec TrakCare."

#define OnBeforeSave			"OnBeforeSave"
#define OnAfterSave				"OnAfterSave"
#define OnSQLTrigger			"OnSQLTrigger"

#define FLAGACTIONCREATE 1
#define FLAGACTIONMODIFY 2

#define LogEventContext(%Context, %Title, %Text, %Value, %Type) 				##class(Custom.FRXX.Clinicom.ClassUtils).LogEventContext(%Context, %Title, %Text, %Value, %Type)
#define LogEventTrace(%Context, %Title, %Text, %ObjPersistent, %Value) 			##class(Custom.FRXX.Clinicom.ClassUtils).LogEventTrace(%Context, %Title, %Text, %ObjPersistent, %Value)
#define LogEventInfo(%Context, %Title, %Text, %ObjPersistent, %Value) 			##class(Custom.FRXX.Clinicom.ClassUtils).LogEventInfo(%Context, %Title, %Text, %ObjPersistent, %Value)
#define LogEventAlert(%Context, %Title, %Text, %ObjPersistent, %Value) 			##class(Custom.FRXX.Clinicom.ClassUtils).LogEventAlert(%Context, %Title, %Text, %ObjPersistent, %Value)
#define LogEventWarning(%Context, %Title, %Text, %ObjPersistent, %Value) 		##class(Custom.FRXX.Clinicom.ClassUtils).LogEventWarning(%Context, %Title, %Text, %ObjPersistent, %Value)
#define LogEventError(%Context, %Title, %Text, %ObjPersistent, %Value) 			##class(Custom.FRXX.Clinicom.ClassUtils).LogEventError(%Context, %Title, %Text, %ObjPersistent, %Value)
#define LogEventFatalError(%Context, %Title, %Text, %ObjPersistent, %Value)		##class(Custom.FRXX.Clinicom.ClassUtils).LogEventFatalError(%Context, %Title, %Text, %ObjPersistent, %Value)

#define NbSecsInOneDay (24*60*60)

#define CVTSTR4WS(%Buffer)		$SELECT($ASCII(%Buffer)<=0:"",1:$SELECT($ZCONVERT(%Buffer,"U")="NULL":"",$ZCONVERT(%Buffer,"U")="##NULL##":"",1:%Buffer))
#define CVTSTR4WSAUTO(%Buffer)	SET %Buffer=$SELECT($ASCII(%Buffer)<=0:"",1:$SELECT($ZCONVERT(%Buffer,"U")="NULL":"",$ZCONVERT(%Buffer,"U")="##NULL##":"",1:%Buffer))

#define ISMSGVALID	(($DATA(msg) > 0) && (msg '= $$$NULLOREF))
#define ISSESSIONVALID	(($DATA(%session) > 0) && (%session '= $$$NULLOREF))
#define ISREQUESTVALID	(($DATA(%request) > 0) && (%request '= $$$NULLOREF))
#define ISRESPONSEVALID	(($DATA(%response) > 0) && (%response '= $$$NULLOREF))
#define GETSQLCODEMSG(%Buffer)	$$$FormatText("Erreur SQL: %1 (%2)", $System.SQL.SQLCODE(%Buffer), %Buffer)
]]></Routine>


<Class name="Region.FRXX.ClinicomLink.WebServices.Wrd.ClassDocumentsServices">
<IncludeCode>ClinicomConstantes</IncludeCode>
<Super>%RegisteredObject,Region.FRXX.ClinicomLink.cli.utils.ClassBaseWebService</Super>
<TimeChanged>64748,79975.066091</TimeChanged>
<TimeCreated>63008,44383.776923</TimeCreated>

<Parameter name="SERVICENAME">
<Default>ClassDocumentsServices</Default>
</Parameter>

<Method name="SaveDocument">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&ClsINOUTContext:Region.FRXX.ClinicomLink.cli.Wrd.ClassContext,&ClsINOUTDocument:Region.FRXX.ClinicomLink.cli.Wrd.ClassDocument]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	SET $ZTRAP = "SaveDocumentError"
	SET:(ClsINOUTContext = $$$NULLOREF) ClsINOUTContext = ##class(Region.FRXX.ClinicomLink.cli.Wrd.ClassContext).%New()
	DO ClsINOUTContext.Reset()
	KILL ^TQLBO0015
	SET strHorolog = $HOROLOG
	SET blnIsNew = (ClsINOUTDocument.DocumentId = "") || (ClsINOUTDocument.DocumentId = $CHAR(0))
	SET ^TQLBO0015("IsNew") = blnIsNew
	SET ^TQLBO0015("ClsINOUTDocument.DocumentId") = ClsINOUTDocument.DocumentId
	SET ^TQLBO0015("ClsINOUTDocument.PALetterId") = ClsINOUTDocument.PALetterId
	SET ^TQLBO0015("ClsINOUTDocument.PatientId") = ClsINOUTDocument.PatientId
	SET ^TQLBO0015("ClsINOUTDocument.EpisodeId") = ClsINOUTDocument.EpisodeId
	IF blnIsNew
	{
		SET ClsINOUTDocument.LastModifUserRowId = ClsINOUTDocument.CreationUserRowId
		SET sc = ClsINOUTDocument.%Save()
		SET ClsDocument = ClsINOUTDocument
	}
	ELSE
	{
		SET ClsDocument = ##class(Region.FRXX.ClinicomLink.cli.Wrd.ClassDocument).%OpenId(ClsINOUTDocument.DocumentId,, .sc)
		SET ClsDocument.Title = ClsINOUTDocument.Title
		SET ClsDocument.DocumentName = ClsINOUTDocument.DocumentName
	}
	IF $$$ISERR(sc)
	{
		SET ^TQLBO0015("sc") = sc
		SET ClsINOUTContext.Error = $System.Status.GetErrorText(sc)
	}
	SET ClsINOUTDocument.DocumentId = ClsDocument.%Id()
	IF blnIsNew
	{
		SET objPALetter = ##class(User.PALetter).%New()
		SET objPALetter.LETCreateDate = +strHorolog
		SET objPALetter.LETCreateTime = $PIECE(strHorolog,",",2)
		SET ClsINOUTDocument.CreationDTTM = strHorolog
	}
	ELSE
	{
		SET objPALetter = ##class(User.PALetter).%OpenId(ClsINOUTDocument.PALetterId)
	}
	IF ClsINOUTDocument.DocumentType '= "DOCX_LT"
	{
		DO objPALetter.LETPersonDRSetObjectId(ClsINOUTDocument.PatientId)
		DO objPALetter.LETPAADMDRSetObjectId(ClsINOUTDocument.EpisodeId)
		DO objPALetter.LETCTLetterTemplateDRSetObjectId(14)
	}
	DO objPALetter.LETUserUpdateDRSetObjectId(+ClsINOUTContext.UserId)
	SET objPALetter.LETUpdateDate = +strHorolog
	SET objPALetter.LETUpdateTime = $PIECE(strHorolog,",",2)
	DO objPALetter.LETLastUpdateHospitalDRSetObjectId(ClsINOUTContext.HospitalId)
	SET ClsINOUTDocument.LastModifDTTM = strHorolog
	//d objPALetter.LET(ClsINOUTDocument.EpisodeId)
	
	#DIM doc as websys.Document
	#DIM MyDoc as Region.FRXX.ClinicomLink.cli.Wrd.ClassDocumentStream
	#DIM MyDoc1 as Region.FRXX.ClinicomLink.cli.Wrd.ClassDocumentStream
	FOR I=1:1:ClsINOUTDocument.ListofDocuments.Count()
	{
		SET MyDoc = ClsINOUTDocument.ListofDocuments.GetAt(I)
		SET MyDoc.LocalFilename = ""
		IF MyDoc.DocumentType = "DOCX"
		{
			IF 'blnIsNew
			{
				FOR J=1:1:ClsDocument.ListofDocuments.Count()
				{
					SET MyDoc1 = ClsDocument.ListofDocuments.GetAt(J)
					IF MyDoc1.DocumentType = "DOCX"
					{
						SET sc = MyDoc1.Content.CopyFrom(MyDoc.Content)
					}
					QUIT
				}
			}
		}
		IF MyDoc.DocumentType = "TXT"
		{
			IF 'blnIsNew
			{
				IF objPALetter.LETPlainRichText '= $$$NULLOREF
				{
					DO ##class(websys.Document).Delete(objPALetter.LETPlainRichText.%Id())
				}
			}
			SET doc = ##class(websys.Document).New("TXT", 0, .PointerID)
			S ^TQLBO0015("TXT passe", "PointerID") = PointerID
			S ^TQLBO0015("TXT MyDoc.Content.Size") = MyDoc.Content.Size
			SET sc = doc.docData.CopyFrom(MyDoc.Content)
			IF $$$ISERR(sc)
			{
				S ^TQLBO0015("sc") = sc
				S ClsINOUTContext.Error = $System.Status.GetErrorText(sc)
			}
			s sc = doc.docData.%Save(0)
			IF $$$ISERR(sc)
			{
				S ^TQLBO0015("sc") = sc
				S ClsINOUTContext.Error = $System.Status.GetErrorText(sc)
			}
			s sc = doc.%Save(0)
			IF $$$ISERR(sc)
			{
				S ^TQLBO0015("sc") = sc
				S ClsINOUTContext.Error = $System.Status.GetErrorText(sc)
			}

			d objPALetter.LETPlainRichTextSetObjectId(PointerID)
			//SET objPALetter.LETHTMLRichText = doc
		}
		IF MyDoc.DocumentType = "HTML"
		{
			S ^TQLBO0015("passe HTML") = 1
			IF 'blnIsNew
			{
				IF objPALetter.LETHTMLRichText '= $$$NULLOREF
				{
					S ^TQLBO0015("passe HTML", "doc.%Id") = objPALetter.LETHTMLRichText.%Id()
					DO ##class(websys.Document).Delete(objPALetter.LETHTMLRichText.%Id())
				}
			}
			SET doc = ##class(websys.Document).New("HTML", 0, .PointerID)
			S ^TQLBO0015("HTML passe", "PointerID") = PointerID
			S ^TQLBO0015("HTML MyDoc.Content.Size") = MyDoc.Content.Size
			SET sc = doc.docData.CopyFrom(MyDoc.Content)
			IF $$$ISERR(sc)
			{
				S ^TQLBO0015("sc") = sc
				S ClsINOUTContext.Error = $System.Status.GetErrorText(sc)
			}
			s sc = doc.docData.%Save(0)
			IF $$$ISERR(sc)
			{
				S ^TQLBO0015("sc") = sc
				S ClsINOUTContext.Error = $System.Status.GetErrorText(sc)
			}
			s sc = doc.%Save(0)
			IF $$$ISERR(sc)
			{
				S ^TQLBO0015("sc") = sc
				S ClsINOUTContext.Error = $System.Status.GetErrorText(sc)
			}
			d objPALetter.LETHTMLRichTextSetObjectId(PointerID)
		}
	}
	SET sc = objPALetter.%Save()
	SET ClsDocument.PALetterId = objPALetter.%Id()
	IF $$$ISERR(sc)
	{
		S ^TQLBO0015("sc") = sc
		S ClsINOUTContext.Error = $System.Status.GetErrorText(sc)
	}
	DO ClsDocument.%Save()
	QUIT $$$ISOK(sc)
SaveDocumentError
	SET ^TQLBO0015("$ZERROR") = $ZERROR
	SET ClsINOUTContext.Error = $ZERROR
	DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError($ZERROR)
	QUIT $$$FALSE
]]></Implementation>
</Method>

<Method name="GetDocument">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&ClsINOUTContext:Region.FRXX.ClinicomLink.cli.Wrd.ClassContext,PatientId:%String,EpisodeId:%String="",DocumentId:%String="",&ClsOUTDocument:Region.FRXX.ClinicomLink.cli.Wrd.ClassDocument]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	/*
S aa = ##class(Region.FRXX.ClinicomLink.cli.Wrd.ClassListofDocuments).%New()
W ##class(Region.FRXX.ClinicomLink.WebServices.Wrd.ClassDocumentsServices).GetAll("655401","3055", .aa)
w aa.Count()
	*/
	SET $ZTRAP = "GetDocError"
	#DIM ClsDocumentStream As Region.FRXX.ClinicomLink.cli.Wrd.ClassDocumentStream
	
	SET:(ClsINOUTContext = $$$NULLOREF) ClsINOUTContext = ##class(Region.FRXX.ClinicomLink.cli.Wrd.ClassContext).%New()
	DO ClsINOUTContext.Reset()

	KILL ^TQLBO0015
	S ^TQLBO0015("PatientId") = PatientId
	S ^TQLBO0015("EpisodeId") = EpisodeId
	S ^TQLBO0015("$USERNAME") = $USERNAME
	
	SET ClsOUTDocument = ##class(Region.FRXX.ClinicomLink.cli.Wrd.ClassDocument).%OpenId(DocumentId, 0, .sc)
	IF $$$ISERR(sc)
	{
		SET ClsINOUTContext.Error = $System.Status.GetErrorText(sc)
		QUIT $$$FALSE
	}
	DO ..GetDocInfos(.ClsOUTDocument)
	#DIM MyDoc as Region.FRXX.ClinicomLink.cli.Wrd.ClassDocumentStream
	FOR I=1:1:ClsOUTDocument.ListofDocuments.Count()
	{
		SET MyDoc = ClsOUTDocument.ListofDocuments.GetAt(I)
		SET MyDoc.LocalFilename = ""
	}	
	QUIT $$$TRUE
GetDocError
	SET ^TQLBO0015("sc") = $ZERROR
	SET ClsINOUTContext.Error = $ZERROR
	DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError($ZERROR)
	QUIT $$$FALSE
]]></Implementation>
</Method>

<Method name="Dump">
<ClassMethod>1</ClassMethod>
<FormalSpec>Id:%Integer</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	/*
DO ##class(Region.FRXX.ClinicomLink.WebServices.Wrd.ClassDocumentsServices).Dump(1)
	*/
	#DIM ClsDocumentStream As Region.FRXX.ClinicomLink.cli.Wrd.ClassDocumentStream
	SET aa = ##class(Region.FRXX.ClinicomLink.cli.Wrd.ClassDocument).%OpenId(Id)
	FOR I=1:1:aa.ListofDocuments.Count()
	{
		SET ClsDocumentStream = aa.ListofDocuments.GetAt(I)
		DO ClsDocumentStream.Content.OutputToDevice()
		WRITE "-----------------------------------------", !
	}
]]></Implementation>
</Method>

<Method name="DisplayHTMLDoc">
<ClassMethod>1</ClassMethod>
<FormalSpec>PatientId:%Integer,EpisodeId:%Integer=""</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	/*
DO ##class(Region.FRXX.ClinicomLink.WebServices.Wrd.ClassDocumentsServices).DisplayHTMLDoc("655401","3055")
	*/
	SET $ZTRAP = "DisplayHTMLDoc"
	#DIM ClsDocumentStream As Region.FRXX.ClinicomLink.cli.Wrd.ClassDocumentStream
	
	KILL ^TQLBO0015
	S ^TQLBO0015("PatientId") = PatientId
	S ^TQLBO0015("EpisodeId") = EpisodeId
	S ^TQLBO0015("$USERNAME") = $USERNAME
	IF EpisodeId = ""
	{
		SET strQuery = "select ID from Region_FRXX_ClinicomLink_cli_Wrd.ClassDocument WHERE PatientId=?"
	}
	ELSE
	{
		SET strQuery = "select ID from Region_FRXX_ClinicomLink_cli_Wrd.ClassDocument WHERE PatientId=? and EpisodeId=?"
	}
	S ^TQLBO0015("strQuery") = strQuery
	SET rset = ##class(%Library.ResultSet).%New()
	SET sc = rset.Prepare(strQuery)
	IF $$$ISERR(sc)
	{
		SET ^TQLBO0015("sc") = "Prepare " _ ##class(%SYSTEM.Status).GetErrorText(sc)
		QUIT $$$FALSE
	}
	IF EpisodeId = ""
	{
		SET sc = rset.Execute(PatientId)
	}
	ELSE
	{
		SET sc = rset.Execute(PatientId, EpisodeId)
	}
	S:$$$ISERR(sc) ^TQLBO0015("sc") = "Execute " _ ##class(%SYSTEM.Status).GetErrorText(sc)
	WHILE rset.Next(.sc)
	{
		QUIT:$$$ISERR(sc)
		S ^TQLBO0015("passe") = 1
		SET ClsDocument = ##class(Region.FRXX.ClinicomLink.cli.Wrd.ClassDocument).%OpenId(rset.GetDataByName("ID"))
		FOR I=1:1:ClsDocument.ListofDocuments.Count()
		{
			SET ClsDocumentStream = ClsDocument.ListofDocuments.GetAt(I)
			IF ClsDocumentStream.DocumentType = "HTML"
			{
				WRITE "<B>" _ ClsDocument.DocumentName _ "</B><P>"
				DO ClsDocumentStream.Content.OutputToDevice()
			}
			WRITE "<p>"
		}
	}
	S:$$$ISERR(sc) ^TQLBO0015("sc") = "Next " _ ##class(%SYSTEM.Status).GetErrorText(sc)
	$$$CLOSERSET(rset)
	QUIT $$$TRUE
DisplayHTMLDoc
	WRITE $ZERROR _ "<P>"
	$$$CLOSERSET(rset)
	QUIT $$$FALSE
]]></Implementation>
</Method>

<Method name="GetAllDocuments">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&ClsINOUTContext:Region.FRXX.ClinicomLink.cli.Wrd.ClassContext,PatientId:%Integer,EpisodeId:%Integer="",&ClsOUTListofDocuments:Region.FRXX.ClinicomLink.cli.Wrd.ClassListofDocuments]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	/*
W ##class(Region.FRXX.ClinicomLink.WebServices.Wrd.ClassDocumentsServices).GetDefaultContext(.ClsContext)
// Pour .91, T2015-FRXX-SUP
S EpiId = 10
S PatId = 16
S aa = ##class(Region.FRXX.ClinicomLink.cli.Wrd.ClassListofDocuments).%New()
W ##class(Region.FRXX.ClinicomLink.WebServices.Wrd.ClassDocumentsServices).GetAllDocuments(ClsContext, PatId, EpiId, .aa)
w aa.Count()
	*/
	SET $ZTRAP = "GetAllDocumentsError"
	#DIM ClsDocumentStream As Region.FRXX.ClinicomLink.cli.Wrd.ClassDocumentStream
	
	SET:(ClsINOUTContext = $$$NULLOREF) ClsINOUTContext = ##class(Region.FRXX.ClinicomLink.cli.Wrd.ClassContext).%New()
	DO ClsINOUTContext.Reset()
	
	KILL ^TQLBO0015
	S ^TQLBO0015("PatientId") = PatientId
	S ^TQLBO0015("EpisodeId") = EpisodeId
	S ^TQLBO0015("$USERNAME") = $USERNAME
	IF EpisodeId = ""
	{
		SET strQuery = "select ID from Region_FRXX_ClinicomLink_cli_Wrd.ClassDocument WHERE PatientId=?"
	}
	ELSE
	{
		SET strQuery = "select ID from Region_FRXX_ClinicomLink_cli_Wrd.ClassDocument WHERE PatientId=? and EpisodeId=?"
	}
	S ^TQLBO0015("strQuery") = strQuery
	SET rset = ##class(%Library.ResultSet).%New()
	SET sc = rset.Prepare(strQuery)
	IF $$$ISERR(sc)
	{
		SET ^TQLBO0015("sc") = "Prepare " _ ##class(%SYSTEM.Status).GetErrorText(sc)
		QUIT $$$FALSE
	}
	IF EpisodeId = ""
	{
		SET sc = rset.Execute(PatientId)
	}
	ELSE
	{
		SET sc = rset.Execute(PatientId, EpisodeId)
	}
	S:$$$ISERR(sc) ^TQLBO0015("sc") = "Execute " _ ##class(%SYSTEM.Status).GetErrorText(sc)
	WHILE rset.Next(.sc)
	{
		QUIT:$$$ISERR(sc)
		S ^TQLBO0015("passe") = 1
		SET strId = rset.GetDataByName("ID")
		SET ClsDocument = ##class(Region.FRXX.ClinicomLink.cli.Wrd.ClassDocument).%OpenId(strId, 0)
		SET ClsDocument.ListofDocuments = $$$NULLOREF
		DO ..GetDocInfos(.ClsDocument)
		DO ClsOUTListofDocuments.Insert(ClsDocument)
	}
	S:$$$ISERR(sc) ^TQLBO0015("sc") = "Next " _ ##class(%SYSTEM.Status).GetErrorText(sc)
	$$$CLOSERSET(rset)
	QUIT $$$TRUE
GetAllDocumentsError
	SET ^TQLBO0015("$ZERROR") = $ZERROR
	//WRITE $ZERROR _ "<P>"
	SET ClsINOUTContext.Error = $ZERROR
	DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError($ZERROR)
	$$$CLOSERSET(rset)
	QUIT $$$FALSE
]]></Implementation>
</Method>

<Method name="Login">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[strINUsername:%String,strINPassword:%String,&ClsOUTContext:Region.FRXX.ClinicomLink.cli.Wrd.ClassContext]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	/*
S ClsContext = ##class(Region.FRXX.ClinicomLink.cli.Wrd.ClassContext).%New()
W ##class(Region.FRXX.ClinicomLink.WebServices.Wrd.ClassDocumentsServices).Login("cwssms","cwssms", .ClsContext)
W ##class(Region.FRXX.ClinicomLink.WebServices.Wrd.ClassDocumentsServices).Login("cwssms","cwssms1", .ClsContext)
W ##class(Region.FRXX.ClinicomLink.WebServices.Wrd.ClassDocumentsServices).Login("cwssms1","cwssms", .ClsContext)
W ##class(Region.FRXX.ClinicomLink.WebServices.Wrd.ClassDocumentsServices).Login("HBRAS","HBBRAS", .ClsContext)
	*/
	SET $ZTRAP = "LoginError"
	SET Retour = ""
	
	DO ClsOUTContext.Reset()
	
	SET Retour = ##class(web.SSUser).IsValidUser(strINUsername, strINPassword)
	IF Retour = ""
	{
		SET ClsOUTContext.Error = "Utilisateur/mot de passe incorrecte."
	}
	ELSE
	{
		SET ClsOUTContext.UserId = Retour
		SET ClsUser = ##class(User.SSUser).%OpenId(Retour)
		IF ClsUser '= $$$NULLOREF
		{
			SET ClsOUTContext.Username = ClsUser.SSUSRInitials
			SET:(ClsUser.SSUSRCTLANDR '="") ClsOUTContext.LanguageId = ClsUser.SSUSRCTLANDR.%Id()
			IF ClsUser.SSUSRHospitalDR '= $$$NULLOREF
			{
				SET ClsOUTContext.HospitalId = ClsUser.SSUSRHospitalDR.%Id()
				SET ClsOUTContext.HospitalDesc = ClsUser.SSUSRHospitalDR.HOSPDesc
			}
		}
		SET ClsOUTContext.LocationDesc = ""
		SET ClsOUTContext.SiteCode = $LIST(^websys.ConfigurationD(1), 14)
		SET ClsOUTContext.Identifier = ##class(%SYSTEM.Util).CreateGUID()
		SET:($$$ISSESSIONVALID) ClsOUTContext.SessionId = %session.SessionId
	}
	GOTO LoginFin
LoginError
	SET $ZTRAP = ""
	SET ClsOUTContext.Error = $ZERROR
	DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError($ZERROR)
	SET Retour = ""
LoginFin
	QUIT (Retour '= "")
]]></Implementation>
</Method>

<Method name="GetAllLocations">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&ClsINOUTContext:Region.FRXX.ClinicomLink.cli.Wrd.ClassContext,&ClsOUTListofUserLocations:Region.FRXX.ClinicomLink.cli.Grp.ClassListofUserLocations]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	/*
Q  K
S ClsContext = ##class(Region.FRXX.ClinicomLink.cli.Wrd.ClassContext).%New()
S ClsContext.Username="cwssms"
S ClsContext.UserId="649"
S ClsContext.HospitalId=""

S ClsListofUserLocations = ##class(Region.FRXX.ClinicomLink.cli.Grp.ClassListofUserLocations).%New()
W ##class(Region.FRXX.ClinicomLink.WebServices.Wrd.ClassDocumentsServices).GetAllLocations(.ClsContext, .ClsListofUserLocations)
	*/
	SET $ZTRAP = "GetAllLocationsError"
	
	SET Retour = $$$FALSE
	SET:(ClsINOUTContext = $$$NULLOREF) ClsINOUTContext = ##class(Region.FRXX.ClinicomLink.cli.Wrd.ClassContext).%New()
	DO ClsINOUTContext.Reset()
	
	//SET:(ClsOUTListofUserLocations = $$$NULLOREF) ClsOUTListofUserLocations = ##class(Region.FRXX.ClinicomLink.cli.Grp.ClassListofUserLocations).%New()
	DO ClsOUTListofUserLocations.Clear()
	SET strSiteCode = $LIST(^websys.ConfigurationD(1), 14)
	
	set %session=##class(%CSP.Session).%New($Job)
	do %session.Set("LOGON.USERID", ClsINOUTContext.UserId)  // 649
	do %session.Set("LOGON.USERCODE", ClsINOUTContext.Username) // cwssms
	do %session.Set("LOGON.USERNAME", ClsINOUTContext.Username) // cwssms
	do %session.Set("LOGON.GROUPID", ClsINOUTContext.GroupId) // 220
	do %session.Set("LOGON.CTLOCID", ClsINOUTContext.LocationId) // 1585
	do %session.Set("LOGON.SITECODE", ClsINOUTContext.SiteCode) // FRXX
	do %session.Set("LOGON.REGION", ClsINOUTContext.Region) // France
	do %session.Set("LOGON.LANGID", ClsINOUTContext.LanguageId) // 102
	do %session.Set("LOGON.HOSPID", ClsINOUTContext.HospitalId) // 19
	//do %session.Set("COMPUTER_NAME","ModeDegrade")
	
	SET rset = ##class(%Library.ResultSet).%New("web.SSUserOtherLogonLoc:LookUpSelectedUser")
	SET sc = rset.Execute(ClsINOUTContext.UserId, "")
	IF $$$ISERR(sc)
	{
		SET ClsINOUTContext.Error = ##class(%SYSTEM.Status).GetErrorText(sc)
		GOTO GetAllLocationsFin
	}
	WHILE rset.Next(.sc)
	{
		QUIT:$$$ISERR(sc)
		//Loc:%String,Group:%String,HOSPDesc:%String,LocID:%String,GroupID:%String
		//W rset.GetDataByName("Loc"), " ; ",rset.GetDataByName("Group"), " ; ",rset.GetDataByName("HOSPDesc"), " ; ",rset.GetDataByName("LocID"), " ; ",rset.GetDataByName("GroupID"), !
		SET ClsUserLocation = ##class(Region.FRXX.ClinicomLink.cli.Grp.ClassUserLocation).%New()
		SET ClsUserLocation.GroupId = rset.GetDataByName("hidden_GroupID")
		SET ClsUserLocation.GroupCode = rset.GetDataByName("Group")
		SET ClsUserLocation.LocationId = rset.GetDataByName("hidden_LocID")
		SET ClsUserLocation.LocationDesc = rset.GetDataByName("Loc")
		SET ClsUserLocation.HospitalId = rset.GetDataByName("Hospital")
		SET ClsUserLocation.HospitalDesc = rset.GetDataByName("HOSPDesc")
		SET ClsUserLocation.ProfileId = rset.GetDataByName("hidden_ProfileID")
		SET ClsUserLocation.ProfileDesc = rset.GetDataByName("Profile")
		SET (strBuffer01, strBuffer02) = ""
		&SQL(select %NOLOCK HOSP_RowId, HOSP_Code INTO :ClsUserLocation.HospitalId, :ClsUserLocation.HospitalCode from sqlUser.CT_Hospital where HOSP_Desc = :ClsUserLocation.HospitalDesc)
		//W "SQLCOde = ", SQLCODE, ", %msg=", %msg, !
		//SET ClsUserLocation.HospitalId = strBuffer01
		//SET ClsUserLocation.HospitalCode = strBuffer02
		//SET ClsUserLocation.GroupId = rset.GetDataByName("GroupID")
		SET ClsUserLocation.LocationCode = $LISTGET(##class(web.CTLoc).GetCodeDescriptionFromId(ClsUserLocation.LocationId), 3)
		SET ClsUserLocation.SiteCode = strSiteCode
		DO ClsOUTListofUserLocations.Insert(ClsUserLocation)
		SET ClsUserLocation = ""
	}
	IF $$$ISERR(sc)
	{
		SET ClsINOUTContext.Error = ##class(%SYSTEM.Status).GetErrorText(sc)
		GOTO GetAllLocationsFin
	}
	SET Retour = $$$TRUE
	GOTO GetAllLocationsFin
GetAllLocationsError
	SET $ZTRAP = ""
	SET ClsINOUTContext.Error = $ZERROR
	DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError($ZERROR)
	SET Retour = $$$FALSE
GetAllLocationsFin
	QUIT Retour
]]></Implementation>
</Method>

<Method name="SearchIdentity">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&ClsINOUTContext:Region.FRXX.ClinicomLink.cli.Wrd.ClassContext,ClsINPatientSearchIdentity:Region.FRXX.ClinicomLink.cli.PatS.ClassPatientSearchIdentity,&ClsOUTListofPatients:Region.FRXX.ClinicomLink.cli.Pat.ClassListofPatients]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	/*
Q  K
S ClsContext = ##class(Region.FRXX.ClinicomLink.cli.Wrd.ClassContext).%New()
S ClsContext.Username="cwssms"
S ClsContext.UserId="649"
S ClsContext.HospitalId=""

S ClsPatientSearchIdentity = ##class(Region.FRXX.ClinicomLink.cli.PatS.ClassPatientSearchIdentity).%New()
S ClsPatientSearchIdentity.FirstName = "west"
S ClsPatientSearchIdentity.LastName = "jo"
//S ClsPatientSearchIdentity.Sex = "F"

S ClsListofPatients = ##class(Region.FRXX.ClinicomLink.cli.Pat.ClassListofPatients).%New()
W ##class(Region.FRXX.ClinicomLink.WebServices.Wrd.ClassDocumentsServices).SearchIdentity(.ClsContext, ClsPatientSearchIdentity, .ClsListofPatients)
w ClsListofPatients.Count()
d $system.OBJ.Dump(ClsListofPatients.GetAt(1))
	*/
	SET $ZTRAP = "SearchIdentityError"
	
	SET Retour = $$$FALSE
	SET:(ClsINOUTContext = $$$NULLOREF) ClsINOUTContext = ##class(Region.FRXX.ClinicomLink.cli.Wrd.ClassContext).%New()
	DO ClsINOUTContext.Reset()
	
	SET ClsINPatientSearchIdentity.DateOfBirth = $$$CVTSTR4WS(ClsINPatientSearchIdentity.DateOfBirth)
	SET ClsINPatientSearchIdentity.Sex = $$$CVTSTR4WS(ClsINPatientSearchIdentity.Sex)
	SET ClsINPatientSearchIdentity.FirstName = $$$CVTSTR4WS(ClsINPatientSearchIdentity.FirstName)
	SET ClsINPatientSearchIdentity.LastName = $$$CVTSTR4WS(ClsINPatientSearchIdentity.LastName)
	S ^TQLBO015("ClsINPatientSearchIdentity.DateOfBirth") = ClsINPatientSearchIdentity.DateOfBirth
	S ^TQLBO015("ClsINPatientSearchIdentity.Sex") = ClsINPatientSearchIdentity.Sex
	S ^TQLBO015("ClsINPatientSearchIdentity.FirstName") = ClsINPatientSearchIdentity.FirstName
	S ^TQLBO015("ClsINPatientSearchIdentity.LastName") = ClsINPatientSearchIdentity.LastName
	S ^TQLBO015("$Job") = $Job
	//SET:(ClsOUTListofUserLocations = $$$NULLOREF) ClsOUTListofUserLocations = ##class(Region.FRXX.ClinicomLink.cli.Grp.ClassListofUserLocations).%New()
	DO ClsOUTListofPatients.Clear()
	
	set:( ($DATA(%request) = 0) || (%request = $$$NULLOREF)) %request=##class(%CSP.Request).%New()
	set:( ($DATA(%session) = 0) || (%session = $$$NULLOREF)) %session=##class(%CSP.Session).%New($Job)
	do %session.Set("LOGON.USERID", ClsINOUTContext.UserId)  // 649
	do %session.Set("LOGON.USERCODE", ClsINOUTContext.Username) // cwssms
	do %session.Set("LOGON.USERNAME", ClsINOUTContext.Username) // cwssms
	do %session.Set("LOGON.GROUPID", ClsINOUTContext.GroupId) // 220
	do %session.Set("LOGON.CTLOCID", ClsINOUTContext.LocationId) // 1585
	do %session.Set("LOGON.SITECODE", ClsINOUTContext.SiteCode) // FRXX
	do %session.Set("LOGON.REGION", ClsINOUTContext.Region) // France
	do %session.Set("LOGON.LANGID", ClsINOUTContext.LanguageId) // 102
	do %session.Set("LOGON.HOSPID", ClsINOUTContext.HospitalId) // 19
	
	//do %session.Set("COMPUTER_NAME","ModeDegrade")

	SET rset = ##class(%Library.ResultSet).%New("web.PAPerson:Find")
	//RegistrationNo, PAPERName, PAPERName2, PAPERName3, NationalID, SSN, CTSEXDesc, GovtCardNo, ProvOB, MedicalRecordNo, BillNo, EpisodeNo, PAPERDob, soundex, phone, hiddenFlag) As 
	//
	SET strDOB = ""
	SET:(ClsINPatientSearchIdentity.DateOfBirth '="") strDOB = $ZDATEH(ClsINPatientSearchIdentity.DateOfBirth, 8) // Format YYYYMMDD->$HOROLOG
	SET strSex = ""
	IF ClsINPatientSearchIdentity.Sex '= ""
	{
		&sql(select CTSEX_Desc INTO :strSex from SQLUser.ct_sex where CTSEX_Code=:ClsINPatientSearchIdentity.Sex)
	}
	S ^TQLBO015("Sex") = strSex
	SET sc = rset.Execute("", ClsINPatientSearchIdentity.FirstName, ClsINPatientSearchIdentity.LastName, "", "", "", strSex, "", "", "", "", "", strDOB)
	IF $$$ISERR(sc)
	{
		SET ClsINOUTContext.Error = ##class(%SYSTEM.Status).GetErrorText(sc)
		GOTO SearchIdentityFin
	}
	WHILE rset.Next(.sc)
	{
		QUIT:$$$ISERR(sc)
		
		//%Query(CONTAINID = 1, ROWSPEC = "ID,RegistrationNo,Name,Name2,Name3,Dob:%Date,Sex,Tel,Medicare,AddressLine1,City,Zip,Marital,Deceased,Address2,edob,mergereg,DVA,Name4:%String,Name5:%String,Name6:%String,Name7:%String,Name8:%String,PAPERAddress2:%String,PAPERID:%String,VIPStatus:%String,Occupation:%String,EmplNo:%String,PreferredContactMethod:%String,ReasonAttn:%String,fedob:%String,PatType:%String,dobalias:%String,ResidentNum:%String,PAPERFreeText1:%String,PAPERFreeText2:%String,DefPayor:%String,DefPayorId:%String,DefPlan:%String,DefPlanId:%String,Email:%String,MobilePhone:%String,FamilyDoc:%String,Segment:%String,Area:%String,MicroArea:%String,GovernCardNo:%String,ResidentNumSel:%String")
		//W rset.GetDataByName("Name"), " ; ", rset.GetDataByName("Name2"), " ; ", rset.GetDataByName("Dob"), " ; ", rset.GetDataByName("Sex"), " ; ", !
		
		SET ClsPatient = ##class(Region.FRXX.ClinicomLink.cli.Pat.ClassPatient).%New()
		SET ClsPatient.PatientId = rset.GetDataByName("APPT_PAPMI_DR")
		SET ClsPatient.FirstName = rset.GetDataByName("Name")
		SET ClsPatient.LastName = rset.GetDataByName("Name2")
		SET ClsPatient.MaidenName = rset.GetDataByName("Name4")
		SET:(rset.GetDataByName("Dob") '= "") ClsPatient.DateOfBirth = $ZDate(rset.GetDataByName("Dob"), 8)
		SET ClsPatient.Sex = ##class(web.CTSex).GetCodeFromDescription(rset.GetDataByName("Sex"))
		SET ClsPatient.IPP = rset.GetDataByName("RegistrationNo")
		SET ClsPatient.Age = ##class(web.PAPerson).calculateAgeUnitsShow(ClsPatient.PatientId)
		DO ClsOUTListofPatients.Insert(ClsPatient)
		SET ClsPatient = ""
		
	}
	SET Retour = $$$TRUE
	GOTO SearchIdentityFin
SearchIdentityError
	SET $ZTRAP = ""
	SET ClsINOUTContext.Error = $ZERROR
	S ^TQLBO015("SearchIdentity $ZERROR") = $ZERROR
	DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError($ZERROR)
SearchIdentityFin
	$$$CLOSERSET(rset)
	QUIT Retour
]]></Implementation>
</Method>

<Method name="GetAllEpisodes">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&ClsINOUTContext:Region.FRXX.ClinicomLink.cli.Wrd.ClassContext,strINPatientRowId:%String,&ClsOUTListofEpisodes:Region.FRXX.ClinicomLink.cli.Pat.ClassListofEpisodes]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	/*
Q  K
S ClsContext = ##class(Region.FRXX.ClinicomLink.cli.Wrd.ClassContext).%New()
S ClsContext.Username="isc$lbo"
S ClsContext.UserId="846"
S ClsContext.GroupId = "190"
S ClsContext.ProfileId = "145"
S ClsContext.HospitalId="2"

S ClsListofEpisodes = ##class(Region.FRXX.ClinicomLink.cli.Pat.ClassListofEpisodes).%New()
W ##class(Region.FRXX.ClinicomLink.WebServices.Wrd.ClassDocumentsServices).GetAllEpisodes(.ClsContext, "16", .ClsListofEpisodes)
w ClsContext.Error
w ClsListofEpisodes.Count()
d $system.OBJ.Dump(ClsListofEpisodes.GetAt(1))
	*/
	SET $ZTRAP = "GetAllEpisodesError"
	
	SET Retour = $$$FALSE
	SET:(ClsINOUTContext = $$$NULLOREF) ClsINOUTContext = ##class(Region.FRXX.ClinicomLink.cli.Wrd.ClassContext).%New()
	DO ClsINOUTContext.Reset()
	
	//SET:(ClsOUTListofUserLocations = $$$NULLOREF) ClsOUTListofUserLocations = ##class(Region.FRXX.ClinicomLink.cli.Grp.ClassListofUserLocations).%New()
	DO ClsOUTListofEpisodes.Clear()

	set:( ($DATA(%request) = 0) || (%request = $$$NULLOREF)) %request=##class(%CSP.Request).%New()
	set:( ($DATA(%session) = 0) || (%session = $$$NULLOREF)) %session=##class(%CSP.Session).%New($Job)
	do %session.Set("LOGON.USERID", ClsINOUTContext.UserId)  // 649
	do %session.Set("LOGON.USERCODE", ClsINOUTContext.Username) // cwssms
	do %session.Set("LOGON.USERNAME", ClsINOUTContext.Username) // cwssms
	do %session.Set("LOGON.GROUPID", ClsINOUTContext.GroupId) // 220
	do %session.Set("LOGON.CTLOCID", ClsINOUTContext.LocationId) // 1585
	do %session.Set("LOGON.SITECODE", ClsINOUTContext.SiteCode) // FRXX
	do %session.Set("LOGON.REGION", ClsINOUTContext.Region) // France
	do %session.Set("LOGON.LANGID", ClsINOUTContext.LanguageId) // 102
	do %session.Set("LOGON.HOSPID", ClsINOUTContext.HospitalId) // 19
	do %session.Set("LOGON.PROFILEID", ClsINOUTContext.ProfileId) // 102
	
	do %request.Set("AcrossEpisodes", "Y") // 102
	
	SET rset = ##class(%Library.ResultSet).%New("web.PAAdm:FindEpisodeWithPayor")
	//TSRTITM As %String, TSRTORD As %String, PatientID, admType, VISITSTATUS, ADMINTTYPE, VERIFIED, CodeEpisode, EpisodeIDs, SameHospital
	//
	SET sc = rset.Execute("", "", strINPatientRowId)
	IF $$$ISERR(sc)
	{
		SET ClsINOUTContext.Error = ##class(%SYSTEM.Status).GetErrorText(sc)
		GOTO GetAllEpisodesFin
	}
	WHILE rset.Next(.sc)
	{
		QUIT:$$$ISERR(sc)
		//%Query(CONTAINID = 1, ROWSPEC = "EpisodeID,PAADMADMNo:%String,PAADMAdmDate:%Date,PAADMAdmTime:%Time,CTLOCDesc:%String,CTPCPDesc:%String,PAADMVisitStatus:%String,DEPDesc:%String,PAADMRemark:%String,SERDesc:%String,PAADMType:%String,payor:%String,mradm:%String,PAADMDischgDate:%Date,PAADMDischgTime:%Time,REFPRIDesc:%String,RSTDesc:%String,REFTDesc:%String,WARDDesc:%String,RoomDesc:%String,WLType:%String,WLRowId:%String,GPConsent:%String,CodingStatus:%String,CARETYPDesc:%String,IPATDesc:%String,AdmSrc:%String,Hosp:%String,CTDSPDesc:%String,Plan:%String,Outstanding:%String,RESDesc:%String,MRADMGPConsent:%String,ACUDesc:%String,ADMCATDesc:%String,PatientID:%String,RegNo:%String,Surname:%String,FirstName:%String,DischSource:%String,SIGNFDesc:%String,RUDesc:%String,RefSource:%String,OPDaysWaiting:%String,LengthOfStay:%String,DiagPC:%String,VisitRefStatus:%String,OtherName:%String,Sex:%String,DOB:%String,Bed:%String,CTPCPCode:%String,DDESTDesc:%String,REFDDesc:%String,SUBTDesc:%String,VisitDischStatus:%String,WLRemarks:%String,SPPPCode:%String,SPPPDesc:%String,WLProcedureFreeText:%String,RBCServ:%String,WLAdmComment:%String,IntendedWard:%String,PAADMFinDischDate:%Date,PAADMMedDischDate:%Date,PAADMSpecialCategory:%String,PAADMFlaggedPatient:%String,PAADM2ReferredToHospitalDR:%String,PAADMVerified:%String,payorCategory:%String,IsCoded:%String,VIPStatus,CMCTPCPDesc,HidPAADMVisitStatus,GroupNumber,OrigAdmNo,HidFAUpdateUser,HidFAUpdateDate,HidComents,HidFAConcern,PatientType,TreatingCareProv,LinkedWL,HospTrust,EstDschrgDate,BookedWard,CTPCPId,TreatingCareProvId,CategDepart:%String"
		//W rset.GetDataByName("Name"), " ; ", rset.GetDataByName("Name2"), " ; ", rset.GetDataByName("Dob"), " ; ", rset.GetDataByName("Sex"), " ; ", !
		
		SET ClsEpisode = ##class(Region.FRXX.ClinicomLink.cli.Pat.ClassEpisode).%New()
		SET ClsEpisode.EpisodeId = rset.GetDataByName("EpisodeID")
		SET ClsEpisode.EpisodeExt = rset.GetDataByName("PAADMADMNo")
		SET ClsEpisode.AdmDTTM = $TRANSLATE($ZDATETIME(rset.GetDataByName("PAADMAdmDate") _ "," _ rset.GetDataByName("PAADMAdmTime"), 8), ": ", "")
		SET ClsEpisode.DischDTTM = $TRANSLATE($ZDATETIME(rset.GetDataByName("PAADMDischgDate") _ "," _ rset.GetDataByName("PAADMDischgTime"), 8), ": ", "")
		SET ClsEpisode.WardDesc = rset.GetDataByName("CTLOCDesc")
		SET ClsEpisode.DoctorDesc = rset.GetDataByName("CTPCPDesc")
		SET ClsEpisode.HospitalDesc = rset.GetDataByName("Hosp")
		SET ClsEpisode.PatientId = rset.GetDataByName("PatientID")
		SET ClsEpisode.IPP = rset.GetDataByName("RegNo")
		SET ClsEpisode.StatusDesc = rset.GetDataByName("VisitDischStatus")
		SET ClsEpisode.MRId = $PIECE($GET(^PAADM(ClsEpisode.EpisodeId)), "^", 61)
		/*FOR i=1:1:rset.GetColumnCount()
		{
			W rset.GetColumnHeader(i), "=", rset.GetData(i), !
		}
		w "-----", !*/
		DO ClsOUTListofEpisodes.Insert(ClsEpisode)
		SET ClsEpisode = ""
		
	}
	SET Retour = $$$TRUE
	GOTO GetAllEpisodesFin
GetAllEpisodesError
	SET $ZTRAP = ""
	SET ClsINOUTContext.Error = $ZERROR
	DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError($ZERROR)
GetAllEpisodesFin
	$$$CLOSERSET(rset)
	QUIT Retour
]]></Implementation>
</Method>

<Method name="GetAllMergeFields">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&ClsINOUTContext:Region.FRXX.ClinicomLink.cli.Wrd.ClassContext,&ClsOUTListofMergeFields:Region.FRXX.ClinicomLink.cli.Wrd.ClassListofMergeFields]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	/*
Q  K
S ClsContext = ##class(Region.FRXX.ClinicomLink.cli.Wrd.ClassContext).%New()
S ClsContext.Username="cwssms"
S ClsContext.UserId="649"
S ClsContext.HospitalId=""

S ClsListofMergeFields = ##class(Region.FRXX.ClinicomLink.cli.Wrd.ClassListofMergeFields).%New()
W ##class(Region.FRXX.ClinicomLink.WebServices.Wrd.ClassDocumentsServices).GetAllMergeFields(.ClsContext, .ClsListofMergeFields)
w ClsListofMergeFields.Count()
d $system.OBJ.Dump(ClsListofMergeFields.GetAt(1))
	*/
	SET $ZTRAP = "GetAllMergeFieldsError"
	
	SET Retour = $$$FALSE
	SET:(ClsINOUTContext = $$$NULLOREF) ClsINOUTContext = ##class(Region.FRXX.ClinicomLink.cli.Wrd.ClassContext).%New()
	DO ClsINOUTContext.Reset()
	
	DO ClsOUTListofMergeFields.Clear()

	&sql(DECLARE CursorMergeFields CURSOR FOR
	    SELECT FieldName, Sample, Category
	    INTO :ClsMergeField.FieldName, :ClsMergeField.Sample, :ClsMergeField.Category
	    FROM Region_FRXX_ClinicomLink_cli_Wrd.ClassMergeField
	    ORDER BY FieldName
	 )
	    //INTO :strFieldName, :strSample, :strFieldId, :strCategory

	&sql(OPEN CursorMergeFields)
	SET ClsMergeField = ##class(Region.FRXX.ClinicomLink.cli.Wrd.ClassMergeField).%New()
	&sql(FETCH CursorMergeFields)

	WHILE (SQLCODE = 0)
	{	
		DO ClsOUTListofMergeFields.Insert(ClsMergeField)
		SET ClsMergeField = ##class(Region.FRXX.ClinicomLink.cli.Wrd.ClassMergeField).%New()
		&sql(FETCH CursorMergeFields)
	}

	&sql(CLOSE CursorMergeFields)

	&sql(DECLARE CursorMergeFieldsStd CURSOR FOR
	    SELECT LTE_Code
	    INTO :ClsMergeField.FieldName
	    FROM SQLUser.CT_LetterTemplateExpression
	    ORDER BY LTE_Code
	 )
	    //INTO :strFieldName, :strSample, :strFieldId, :strCategory

	&sql(OPEN CursorMergeFieldsStd)
	SET ClsMergeField = ##class(Region.FRXX.ClinicomLink.cli.Wrd.ClassMergeField).%New()
	&sql(FETCH CursorMergeFieldsStd)

	WHILE (SQLCODE = 0)
	{	
		SET ClsMergeField.Sample = "Default"
		SET ClsMergeField.Category = "Standard"
		DO ClsOUTListofMergeFields.Insert(ClsMergeField)
		SET ClsMergeField = ##class(Region.FRXX.ClinicomLink.cli.Wrd.ClassMergeField).%New()
		&sql(FETCH CursorMergeFieldsStd)
	}

	&sql(CLOSE CursorMergeFieldsStd)

	SET Retour = $$$TRUE
	GOTO GetAllMergeFieldsFin
GetAllMergeFieldsError
	SET $ZTRAP = ""
	SET ClsINOUTContext.Error = $ZERROR
	DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError($ZERROR)
GetAllMergeFieldsFin
	$$$CLOSERSET(rset)
	QUIT Retour
]]></Implementation>
</Method>

<Method name="GetAllMergeFieldsAsFile">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&ClsINOUTContext:Region.FRXX.ClinicomLink.cli.Wrd.ClassContext,&strOUTFileName:%String]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	/*
Q  K
S ClsContext = ##class(Region.FRXX.ClinicomLink.cli.Wrd.ClassContext).%New()
S ClsContext.Username="cwssms"
S ClsContext.UserId="649"
S ClsContext.HospitalId=""

S strFileName = ""
W ##class(Region.FRXX.ClinicomLink.WebServices.Wrd.ClassDocumentsServices).GetAllMergeFieldsAsFile(.ClsContext, .strFileName)
w strFileName
	*/
	SET $ZTRAP = "GetAllMergeFieldsAsFileError"
	#DIM ClsMergeField as Region.FRXX.ClinicomLink.cli.Wrd.ClassMergeField
	
	SET Retour = $$$FALSE

	SET:(ClsINOUTContext = $$$NULLOREF) ClsINOUTContext = ##class(Region.FRXX.ClinicomLink.cli.Wrd.ClassContext).%New()
	DO ClsINOUTContext.Reset()

	SET ClsListofMergeFields = ##class(Region.FRXX.ClinicomLink.cli.Wrd.ClassListofMergeFields).%New()
	IF ..GetAllMergeFields(.ClsINOUTContext, .ClsListofMergeFields)
	{
		SET strOUTFileName = ##class(Region.FRXX.ClinicomLink.cli.utils.ClassSystemUtils).GetTempFileName("", "xml")
		SET MyFile = ##class(%Library.FileCharacterStream).%New()
		SET MyFile.TranslateTable = "UTF8"
		SET MyFile.Filename = strOUTFileName
		SET MyFile.LineTerminator = $CHAR(13,10)
		FOR intIndex=1:1:ClsListofMergeFields.Count()
		{
			SET ClsMergeField = ClsListofMergeFields.GetAt(intIndex)
			DO MyFile.WriteLine(ClsMergeField.FieldName _ "	" _ ClsMergeField.Category _ "	" _ ClsMergeField.Sample)
		}
		SET sc = MyFile.%Save()
		SET MyFile = $$$NULLOREF
	}
	
	SET Retour = $$$TRUE
	GOTO GetAllMergeFieldsAsFileFin
GetAllMergeFieldsAsFileError
	SET $ZTRAP = ""
	SET ClsINOUTContext.Error = $ZERROR
	DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError($ZERROR)
GetAllMergeFieldsAsFileFin
	$$$CLOSERSET(rset)
	QUIT Retour
]]></Implementation>
</Method>

<Method name="InitMergeFields">
<ClassMethod>1</ClassMethod>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	/*
DO ##class(Region.FRXX.ClinicomLink.WebServices.Wrd.ClassDocumentsServices).InitMergeFields()
	*/
	SET $ZTRAP = "InitMergeFieldsError"
	
	SET Retour = $$$FALSE

	KILL ^FRXX.Clini4115.ClassMergeF9739D, ^FRXX.Clini4115.ClassMergeF9739I, ^FRXX.Clini4115.ClassMergeF9739S
	SET ClsMergeField = ##class(Region.FRXX.ClinicomLink.cli.Wrd.ClassMergeField).%New()
	SET ClsMergeField.FieldName = "NOM"
	SET ClsMergeField.Sample = "Bogni"
	SET ClsMergeField.Category = "Identity"
	SET sc = ClsMergeField.%Save()
	IF $$$ISERR(sc)
	{
		DO $System.OBJ.DisplayError(sc)
		WRITE !
	}
	SET ClsMergeField = ##class(Region.FRXX.ClinicomLink.cli.Wrd.ClassMergeField).%New()
	SET ClsMergeField.FieldName = "PRENOM"
	SET ClsMergeField.Sample = "Laurent"
	SET ClsMergeField.Category = "Identity"
	SET sc = ClsMergeField.%Save()
	IF $$$ISERR(sc)
	{
		DO $System.OBJ.DisplayError(sc)
		WRITE !
	}
	
	SET Retour = $$$TRUE
	GOTO InitMergeFieldsFin
InitMergeFieldsError
	SET $ZTRAP = ""
	DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError($ZERROR)
InitMergeFieldsFin
	$$$CLOSERSET(rset)
	QUIT Retour
]]></Implementation>
</Method>

<Method name="InitAll">
<ClassMethod>1</ClassMethod>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	/*
DO ##class(Region.FRXX.ClinicomLink.WebServices.Wrd.ClassDocumentsServices).InitAll()
	*/
	DO ..InitMergeFields()
	DO ##class(Region.FRXX.DataFix.ClassTQMoulinetteT2014).GrantTable("Region_FRXX_ClinicomLink_cli_Wrd.ClassDocument", "UnknowUser")
	DO ##class(Region.FRXX.DataFix.ClassTQMoulinetteT2014).GrantTable("Region_FRXX_ClinicomLink_cli_Wrd.ClassDocumentStream", "UnknowUser")
	DO ##class(Region.FRXX.DataFix.ClassTQMoulinetteT2014).GrantTable("Region_FRXX_ClinicomLink_cli_Wrd.ClassMergeField", "UnknowUser")

	D ##class(Region.FRXX.DataFix.ClassTQMoulinetteT2014).GrantSchema("Region_FRXX_ClinicomLink_cli_Wrd", "UnknowUser")
	D ##class(Region.FRXX.DataFix.ClassTQMoulinetteT2014).GrantSchema("Region_FRXX_ClinicomLink_cli_Wrd", "TrakCareDBRole")
]]></Implementation>
</Method>

<Method name="GetMergeFieldsValues">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&ClsINOUTContext:Region.FRXX.ClinicomLink.cli.Wrd.ClassContext,PatientId:%String,EpisodeId:%String="",&ClsINOUTListofMergeFields:Region.FRXX.ClinicomLink.cli.Wrd.ClassListofMergeFields]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	/*
Q  K
S ClsContext = ##class(Region.FRXX.ClinicomLink.cli.Wrd.ClassContext).%New()
S ClsContext.Username="cwssms"
S ClsContext.UserId="649"
S ClsContext.HospitalId=""

S ClsMergeField = ##class(Region.FRXX.ClinicomLink.cli.Wrd.ClassMergeField).%New()
S ClsMergeField.FieldName = "NOM"
S ClsListofMergeFields = ##class(Region.FRXX.ClinicomLink.cli.Wrd.ClassListofMergeFields).%New()
DO ClsListofMergeFields.Insert(ClsMergeField)
W ##class(Region.FRXX.ClinicomLink.WebServices.Wrd.ClassDocumentsServices).GetMergeFieldsValues(.ClsContext, "16","10", .ClsListofMergeFields)
w ClsListofMergeFields.Count()
d $system.OBJ.Dump(ClsListofMergeFields.GetAt(1))
	*/
	SET $ZTRAP = "GetMergeFieldsValuesError"
	#DIM ClsMergeField as Region.FRXX.ClinicomLink.cli.Wrd.ClassMergeField
	#DIM rset As %Library.ResultSet
	#DIM strQuery As %String
	#DIM sc As %Library.Status
	
	SET Retour = $$$FALSE
	SET:(ClsINOUTContext = $$$NULLOREF) ClsINOUTContext = ##class(Region.FRXX.ClinicomLink.cli.Wrd.ClassContext).%New()
	DO ClsINOUTContext.Reset()
	
	SET:'$$$ISREQUESTVALID %request = ##class(%CSP.Request).%New()
	DO %request.Set("PatientID", PatientId)
	DO %request.Set("EpisodeID", EpisodeId)
	DO %request.Set("ApptID", "")
	DO %request.Set("LetterTypeCode", "")
	DO %request.Set("CTLetterTemplate", "")
	
	SET rset = ##class(%Library.ResultSet).%New()
	SET sc = rset.Prepare("SELECT LTE_Expression FROM SQLUser.CT_LetterTemplateExpression WHERE LTE_Code=?")
	IF $$$ISERR(sc)
	{
		SET strBuffer = $$$FormatText("Erreur Prepare pour %1: %2", strQuery, $SYSTEM.Status.GetErrorText(sc))
		WRITE:('$$$ISSESSIONVALID) strBuffer, !
		DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError(strBuffer)
		GOTO GetMergeFieldsValuesFin
	}
	FOR intIndex=1:1:ClsINOUTListofMergeFields.Count()
	{
		SET ClsMergeField = ClsINOUTListofMergeFields.GetAt(intIndex)
		IF ClsMergeField.FieldName = "NOM" { SET ClsMergeField.Value = $PIECE($GET(^PAPER(PatientId, "ALL")), "^", 1) CONTINUE }
		IF ClsMergeField.FieldName = "PRENOM" { SET ClsMergeField.Value = $PIECE($GET(^PAPER(PatientId, "ALL")), "^", 2) CONTINUE }

		SET sc = rset.Execute(ClsMergeField.FieldName)
		IF $$$ISERR(sc)
		{
			SET strBuffer = $$$FormatText("Erreur Execute pour %1: %2", strQuery, $SYSTEM.Status.GetErrorText(sc))
			DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError(strBuffer)
			CONTINUE
		}
		WHILE rset.Next(.sc)
		{
			QUIT:$$$ISERR(sc)
			SET strExpression = rset.GetDataByName("LTE_Expression")
			SET strBuffer = ""
			XECUTE "SET strBuffer=" _ strExpression
			SET ClsMergeField.Value = strBuffer
		}
		DO rset.Close()
Suite
	}
	
	SET Retour = $$$TRUE
	GOTO GetMergeFieldsValuesFin
GetMergeFieldsValuesError
	SET $ZTRAP = ""
	SET ClsINOUTContext.Error = $ZERROR
	DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError($ZERROR)
GetMergeFieldsValuesFin
	QUIT Retour
]]></Implementation>
</Method>

<Method name="GetDefaultContext">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&ClsINOUTContext:Region.FRXX.ClinicomLink.cli.Wrd.ClassContext]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	/*
W ##class(Region.FRXX.ClinicomLink.WebServices.Wrd.ClassDocumentsServices).GetDefaultContext()
	*/
	SET $ZTRAP = "GetDefaultContextError"
	SET Retour = $$$FALSE
	
	SET ClsINOUTContext = ##class(Region.FRXX.ClinicomLink.cli.Wrd.ClassContext).%New()
	// Pour .91, T2015-FRXX-SUP
	SET ClsINOUTContext.Username = "isc$lbo"
	SET ClsINOUTContext.UserId = "846"
	SET ClsINOUTContext.HospitalId = "2"
	SET ClsINOUTContext.GroupId = "299"
	SET ClsINOUTContext.ProfileId = "253"
	
	SET Retour = $$$TRUE
	GOTO GetDefaultContextFin
GetDefaultContextError
	SET $ZTRAP = ""
	WRITE:('$$$ISSESSIONVALID) $ZERROR, !
	DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError($ZERROR)
GetDefaultContextFin
	QUIT Retour
]]></Implementation>
</Method>

<Method name="GetDocInfos">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&ClsINOUTDocument:Region.FRXX.ClinicomLink.cli.Wrd.ClassDocument]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	/*
SET ClsOUTDocument = ##class(Region.FRXX.ClinicomLink.cli.Wrd.ClassDocument).%OpenId(133)
W ##class(Region.FRXX.ClinicomLink.WebServices.Wrd.ClassDocumentsServices).GetDocInfos(.ClsOUTDocument)
	*/
	IF (ClsINOUTDocument.CreationDTTM '= "") && (ClsINOUTDocument.CreationDTTM '= $CHAR(0))
	{
		SET ClsINOUTDocument.CreationDTTM = $ZDATETIME(ClsINOUTDocument.CreationDTTM, 8, 1)
		SET ClsINOUTDocument.CreationDTTM = $REPLACE(ClsINOUTDocument.CreationDTTM, " ", "")
		SET ClsINOUTDocument.CreationDTTM = $REPLACE(ClsINOUTDocument.CreationDTTM, ":", "")
	}
	ELSE
	{
		SET ClsINOUTDocument.CreationDTTM = ""
	}
	IF (ClsINOUTDocument.LastModifDTTM '= "") && (ClsINOUTDocument.LastModifDTTM '= $CHAR(0))
	{
		SET ClsINOUTDocument.LastModifDTTM = $ZDATETIME(ClsINOUTDocument.LastModifDTTM, 8, 1)
		SET ClsINOUTDocument.LastModifDTTM = $REPLACE(ClsINOUTDocument.LastModifDTTM, " ", "")
		SET ClsINOUTDocument.LastModifDTTM = $REPLACE(ClsINOUTDocument.LastModifDTTM, ":", "")
	}
	ELSE
	{
		SET ClsINOUTDocument.LastModifDTTM = ""
	}
	SET ClsINOUTDocument.DocumentId = ClsINOUTDocument.%Id()
	SET objPALetter = ##class(User.PALetter).%OpenId(ClsINOUTDocument.PALetterId)
	IF objPALetter = $$$NULLOREF
	{
		SET ClsINOUTDocument.PlainRichTextId = -1
		SET ClsINOUTDocument.HTMLRichTextId = -1
	}
	ELSE
	{
		IF objPALetter.LETPlainRichText = $$$NULLOREF
		{
			SET ClsINOUTDocument.PlainRichTextId = -1
		}
		ELSE
		{
			SET ClsINOUTDocument.PlainRichTextId = objPALetter.LETPlainRichText.%Id()
		}
		IF objPALetter.LETHTMLRichText = $$$NULLOREF
		{
			SET ClsINOUTDocument.HTMLRichTextId = -1
		}
		ELSE
		{
			SET ClsINOUTDocument.HTMLRichTextId = objPALetter.LETHTMLRichText.%Id()
		}
	}
	IF ClsINOUTDocument.CreationUserRowId '= ""
	{
		SET strBuffer = ##class(web.SSUser).GetCodeDescriptionFromId(ClsINOUTDocument.CreationUserRowId)
		SET ClsINOUTDocument.CreationUserCode = $LISTGET(strBuffer, 3)
		SET ClsINOUTDocument.CreationUserDesc = $LISTGET(strBuffer, 1)
	}
	IF ClsINOUTDocument.LastModifUserRowId '= ""
	{
		SET strBuffer = ##class(web.SSUser).GetCodeDescriptionFromId(ClsINOUTDocument.LastModifUserRowId)
		SET ClsINOUTDocument.LastModifUserCode = $LISTGET(strBuffer, 3)
		SET ClsINOUTDocument.LastModifUserDesc = $LISTGET(strBuffer, 1)
	}
	IF ClsINOUTDocument.ValidateUserRowId '= ""
	{
		SET strBuffer = ##class(web.SSUser).GetCodeDescriptionFromId(ClsINOUTDocument.ValidateUserRowId)
		SET ClsINOUTDocument.ValidateUserCode = $LISTGET(strBuffer, 3)
		SET ClsINOUTDocument.ValidateUserDesc = $LISTGET(strBuffer, 1)
	}
	IF ClsINOUTDocument.TypistRowId '= ""
	{
		SET strBuffer = ##class(web.SSUser).GetCodeDescriptionFromId(ClsINOUTDocument.TypistRowId)
		SET ClsINOUTDocument.TypistCode = $LISTGET(strBuffer, 3)
		SET ClsINOUTDocument.TypistDesc = $LISTGET(strBuffer, 1)
	}
	IF ClsINOUTDocument.DoctorRowId '= ""
	{
		SET strBuffer = ##class(web.CTCareProv).GetCodeDescriptionFromId(ClsINOUTDocument.DoctorRowId)
		SET ClsINOUTDocument.DoctorCode = $LISTGET(strBuffer, 3)
		SET ClsINOUTDocument.DoctorDesc = $LISTGET(strBuffer, 1)
	}
	
	QUIT $$$TRUE
]]></Implementation>
</Method>

<Method name="GetDoctorExtInfosByCode">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&ClsINOUTContext:Region.FRXX.ClinicomLink.cli.Wrd.ClassContext,strINDoctorCode:%String="",&ClsOUTMedecinEtab:Region.FRXX.ClinicomLink.cli.SDC.ClassMedecinExt]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	/*
W ##class(Region.FRXX.ClinicomLink.WebServices.Wrd.ClassDocumentsServices).GetDefaultContext(.ClsContext)
// Pour .91, T2015-FRXX-SUP
W ##class(Region.FRXX.ClinicomLink.WebServices.Wrd.ClassDocumentsServices).GetDoctorExtInfosByCode(.ClsContext, "0001", .aa)
zw aa
	*/
	SET $ZTRAP = "GetDoctorExtInfosByCodeError"
	#DIM rset As %Library.ResultSet
	#DIM strQuery As %String
	#DIM sc As %Library.Status

	SET Retour = $$$FALSE
	DO ClsINOUTContext.Reset()
	
	SET ClsOUTMedecinEtab = ##class(Region.FRXX.ClinicomLink.cli.SDC.ClassMedecinExt).%New()
	SET strINDoctorCode = $REPLACE(strINDoctorCode, $CHAR(0), "")
	SET strQuery = "SELECT %NOLOCK REFD_RowId FROM SQLUser.PAC_RefDoctor WHERE REFD_Code=?"

	SET rset = ##class(%Library.ResultSet).%New()
	SET sc = rset.Prepare(strQuery)
	IF $$$ISERR(sc)
	{
		SET strBuffer = $$$FormatText("Erreur Prepare pour %1: %2", strQuery, $SYSTEM.Status.GetErrorText(sc))
		SET ClsINOUTContext.Error = strBuffer
		DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError(strBuffer)
		GOTO GetDoctorExtInfosByCodeFin
	}
	SET sc = rset.Execute(strINDoctorCode)
	IF $$$ISERR(sc)
	{
		SET strBuffer = $$$FormatText("Erreur Execute pour %1: %2", strQuery, $SYSTEM.Status.GetErrorText(sc))
		SET ClsINOUTContext.Error = strBuffer
		DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError(strBuffer)
		GOTO GetDoctorExtInfosByCodeFin
	}
	IF rset.Next(.sc)
	{
		QUIT:$$$ISERR(sc)
		SET Retour = ..GetDoctorExtInfosById(.ClsINOUTContext, rset.GetDataByName("REFD_RowId"), .ClsOUTMedecinEtab)
	}
	IF $$$ISERR(sc)
	{
		SET strBuffer = $$$FormatText("Erreur Next pour %1: %2", strQuery, $SYSTEM.Status.GetErrorText(sc))
		SET ClsINOUTContext.Error = strBuffer
		DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError(strBuffer)
		GOTO GetDoctorExtInfosByCodeFin
	}
	SET Retour = $$$TRUE
	GOTO GetDoctorExtInfosByCodeFin
GetDoctorExtInfosByCodeError
	SET $ZTRAP = ""
	SET ClsINOUTContext.Error = $ZERROR
	DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError($ZERROR)
GetDoctorExtInfosByCodeFin
	$$$CLOSERSET(rset)
	QUIT Retour
]]></Implementation>
</Method>

<Method name="GetDoctorExtInfosById">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&ClsINOUTContext:Region.FRXX.ClinicomLink.cli.Wrd.ClassContext,strINDoctorId:%String="",&ClsOUTMedecinExt:Region.FRXX.ClinicomLink.cli.SDC.ClassMedecinExt]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	SET $ZTRAP = "GetDoctorExtInfosByCodeError"
	#DIM rset As %Library.ResultSet
	#DIM strQuery As %String
	#DIM sc As %Library.Status

	SET Retour = $$$FALSE
	DO ClsINOUTContext.Reset()
	SET PACRefDoctor = ##class(User.PACRefDoctor).%OpenId(strINDoctorId, 0, .sc)
	IF $$$ISERR(sc)
	{
		SET strBuffer = $$$FormatText("Erreur Next pour %1: %2", "##class(User.PACRefDoctor).%OpenId(" _ strINDoctorId _ ")", $SYSTEM.Status.GetErrorText(sc))
		SET ClsINOUTContext.Error = strBuffer
		DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError(strBuffer)
		GOTO GetDoctorExtInfosByCodeFin
	}
	SET:( ($DATA(ClsOUTMedecinExt) = 0 ) || (ClsOUTMedecinExt = $$$NULLOREF) ) ClsOUTMedecinExt = ##class(Region.FRXX.ClinicomLink.cli.SDC.ClassMedecinExt).%New()
	SET ClsOUTMedecinExt.DoctorId = strINDoctorId
	SET ClsOUTMedecinExt.Code = PACRefDoctor.REFDCode
	SET ClsOUTMedecinExt.Name = PACRefDoctor.REFDDesc
	SET ClsOUTMedecinExt.Forename = PACRefDoctor.REFDForename
	SET ClsOUTMedecinExt.MaidenName = PACRefDoctor.REFDMiddleName
	SET ClsOUTMedecinExt.Title = PACRefDoctor.REFDTitle
	SET ClsOUTMedecinExt.ZIPCode = PACRefDoctor.REFDZipCode
	SET:(PACRefDoctor.REFDCITYDR '= $$$NULLOREF) ClsOUTMedecinExt.City = PACRefDoctor.REFDCITYDR.CTCITDesc
	IF PACRefDoctor.REFDAddress '= $$$NULLOREF
	{
		
		SET:(PACRefDoctor.REFDAddress.Count() >= 1) ClsOUTMedecinExt.Address1 = PACRefDoctor.REFDAddress.GetAt(1)
		SET:(PACRefDoctor.REFDAddress.Count() >= 2) ClsOUTMedecinExt.Address2 = PACRefDoctor.REFDAddress.GetAt(2)
		SET:(PACRefDoctor.REFDAddress.Count() >= 3) ClsOUTMedecinExt.Address3 = PACRefDoctor.REFDAddress.GetAt(3)
	}
	SET ClsOUTMedecinExt.Email = PACRefDoctor.REFDEmail
	SET ClsOUTMedecinExt.Email2 = PACRefDoctor.REFDEmail2
	SET ClsOUTMedecinExt.Fax = PACRefDoctor.REFDFax
	SET ClsOUTMedecinExt.Phone = PACRefDoctor.REFDPhone
	SET ClsOUTMedecinExt.PhonePro = PACRefDoctor.REFDBusPhone
	SET ClsOUTMedecinExt.MobilePhone = PACRefDoctor.REFDMobilePhone
	SET ClsOUTMedecinExt.ADELI = PACRefDoctor.REFDRegNumber1
	IF PACRefDoctor.REFDSpecialtyDR '= $$$NULLOREF
	{
		SET ClsOUTMedecinExt.Specialty = PACRefDoctor.REFDSpecialtyDR.CTSPCCode
	}
	SET Retour = $$$TRUE
	GOTO GetDoctorExtInfosByCodeFin
GetDoctorExtInfosByCodeError
	SET $ZTRAP = ""
	SET ClsINOUTContext.Error = $ZERROR
	DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError($ZERROR)
GetDoctorExtInfosByCodeFin
	QUIT Retour
]]></Implementation>
</Method>

<Method name="GetDoctorExtByIdAsCorresp">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&ClsINOUTContext:Region.FRXX.ClinicomLink.cli.Wrd.ClassContext,strINDoctorId:%String="",&ClsOUTCorrespondant:Region.FRXX.ClinicomLink.cli.Wrd.ClassCorrespondant]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	/*
W ##class(Region.FRXX.ClinicomLink.WebServices.Wrd.ClassDocumentsServices).GetDefaultContext(.ClsContext)
// Pour .91, T2015-FRXX-SUP
W ##class(Region.FRXX.ClinicomLink.WebServices.Wrd.ClassDocumentsServices).GetDoctorExtByIdAsCorresp(.ClsContext, 172, .aa)
	*/
	SET $ZTRAP = "GetDoctorExtByIdAsCorrespError"
	#DIM rset As %Library.ResultSet
	#DIM strQuery As %String
	#DIM sc As %Library.Status

	SET Retour = $$$FALSE
	DO ClsINOUTContext.Reset()
	SET strQuery = "SELECT %NOLOCK REFD_Desc, REFD_Title, REFD_Title_DR, REFD_Forename, REFD_Address, REFD_CTZIP_DR->CTZIP_Code, REFD_CITY_DR->CTCIT_Desc, REFD_Phone, REFD_MobilePhone, REFD_Email, REFD_Fax from SQLUser.PAC_RefDoctor WHERE REFD_RowId=?"

	SET rset = ##class(%Library.ResultSet).%New()
	SET sc = rset.Prepare(strQuery)
	IF $$$ISERR(sc)
	{
		SET strBuffer = $$$FormatText("Erreur Prepare pour %1: %2", strQuery, $SYSTEM.Status.GetErrorText(sc))
		SET ClsINOUTContext.Error = strBuffer
		DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError(strBuffer)
		GOTO GetDoctorExtByIdAsCorrespFin
	}
	SET sc = rset.Execute(strINDoctorId)
	IF $$$ISERR(sc)
	{
		SET strBuffer = $$$FormatText("Erreur Execute pour %1: %2", strQuery, $SYSTEM.Status.GetErrorText(sc))
		SET ClsINOUTContext.Error = strBuffer
		DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError(strBuffer)
		GOTO GetDoctorExtByIdAsCorrespFin
	}
	WHILE rset.Next(.sc)
	{
		QUIT:$$$ISERR(sc)
		SET ClsOUTCorrespondant = ##class(Region.FRXX.ClinicomLink.cli.Wrd.ClassCorrespondant).%New()
		SET ClsOUTCorrespondant.TypeCorrespondant = 6 // Médecins correspondants Extérieur
		SET ClsOUTCorrespondant.CorrespId = rset.GetDataByName("REFD_RowId")
		SET ClsOUTCorrespondant.Qualite = rset.GetDataByName("REFD_Title")
		SET ClsOUTCorrespondant.Qualite = rset.GetDataByName("REFD_Title")
		SET ClsOUTCorrespondant.Title = rset.GetDataByName("REFD_Title_DR")
		SET ClsOUTCorrespondant.FirstName = rset.GetDataByName("REFD_Desc")
		SET ClsOUTCorrespondant.LastName = rset.GetDataByName("REFD_Forename")
		SET LB = rset.GetDataByName("REFD_Address")
		IF ($LISTVALID(LB)) && (LB '= "")
		{
			SET:($LISTLENGTH(LB) >= 1) ClsOUTCorrespondant.Address2 = $LISTGET(LB, 1)
			SET:($LISTLENGTH(LB) >= 2) ClsOUTCorrespondant.Address1 = $LISTGET(LB, 2)
			SET:($LISTLENGTH(LB) >= 3) ClsOUTCorrespondant.Address3 = $LISTGET(LB, 3)
		}
		SET ClsOUTCorrespondant.ZIPCode = rset.GetDataByName("CTZIP_Code")
		SET ClsOUTCorrespondant.City = rset.GetDataByName("CTCIT_Desc")
		SET ClsOUTCorrespondant.Phone = rset.GetDataByName("REFD_Phone")
		SET ClsOUTCorrespondant.MobilePhone = rset.GetDataByName("REFD_MobilePhone")
		SET ClsOUTCorrespondant.Fax = rset.GetDataByName("REFD_Fax")
		//SET ClsOUTCorrespondant.PhonePro = rset.GetDataByName("NOK_TelO")
		SET ClsOUTCorrespondant.Email = rset.GetDataByName("REFD_Email")
	}
	IF $$$ISERR(sc)
	{
		SET strBuffer = $$$FormatText("Erreur Next pour %1: %2", strQuery, $SYSTEM.Status.GetErrorText(sc))
		SET ClsINOUTContext.Error = strBuffer
		DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError(strBuffer)
		GOTO GetDoctorExtByIdAsCorrespFin
	}

	SET Retour = $$$TRUE
	GOTO GetDoctorExtByIdAsCorrespFin
GetDoctorExtByIdAsCorrespError
	SET $ZTRAP = ""
	SET ClsINOUTContext.Error = $ZERROR
	DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError($ZERROR)
GetDoctorExtByIdAsCorrespFin
	QUIT Retour
]]></Implementation>
</Method>

<Method name="GetDoctorExtByCodeAsCorresp">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&ClsINOUTContext:Region.FRXX.ClinicomLink.cli.Wrd.ClassContext,strINDoctorCode:%String="",&ClsOUTCorrespondant:Region.FRXX.ClinicomLink.cli.Wrd.ClassCorrespondant]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	SET $ZTRAP = "GetDoctorExtByCodeAsCorrespError"
	#DIM rset As %Library.ResultSet
	#DIM strQuery As %String
	#DIM sc As %Library.Status

	SET Retour = $$$FALSE
	DO ClsINOUTContext.Reset()
	
	SET Id = ##class(web.PACRefDoctor).GetIdFromCodeOrDescription(strINDoctorCode)
	IF Id '= ""
	{
		SET Retour = ..GetDoctorExtByIdAsCorresp(.ClsINOUTContext, Id, .ClsOUTCorrespondant)
	}
	// pas besoin -> SET Retour = $$$TRUE
	GOTO GetDoctorExtByCodeAsCorrespFin
GetDoctorExtByCodeAsCorrespError
	SET $ZTRAP = ""
	SET ClsINOUTContext.Error = $ZERROR
	DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError($ZERROR)
GetDoctorExtByCodeAsCorrespFin
	QUIT Retour
]]></Implementation>
</Method>

<Method name="GetAllMedecinsExt">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&ClsINOUTContext:Region.FRXX.ClinicomLink.cli.Wrd.ClassContext,strINDoctorCode:%String="",strINDoctorNom:%String="",intINStartId:%Integer,intINNbRows:%Integer,&intOUTLastId:%Integer,&ClsOUTListOfMedecinsExt:Region.FRXX.ClinicomLink.cli.SDC.ClassListofMedecinsExt]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	/*
W ##class(Region.FRXX.ClinicomLink.WebServices.Wrd.ClassDocumentsServices).GetDefaultContext(.ClsContext)
// Pour .91, T2015-FRXX-SUP
SET LastId = ""
W ##class(Region.FRXX.ClinicomLink.WebServices.Wrd.ClassDocumentsServices).GetAllMedecinsExt(.ClsContext, "", "", LastId, 20, .LastId, .aa)
w LastId
	*/
	SET $ZTRAP = "GetAllMedecinsExtError"
	#DIM rset As %Library.ResultSet
	#DIM strQuery As %String
	#DIM sc As %Library.Status
	#DIM %session As %CSP.Session
	
	
	SET strKey = ""
	SET strKey = $ORDER(^TQSEARCHMED(strKey))
	WHILE strKey '= ""
	{
		IF $DATA(^%cspSession(strKey)) = 0
		{
			KILL ^TQSEARCHMED(strKey)
		}
		SET strKey = $ORDER(^TQSEARCHMED(strKey))
	}
	
	SET Retour = $$$FALSE
	IF $$$ISSESSIONVALID
	{
		SET ^aa("%session") = %session.SessionId	
	}
	DO ClsINOUTContext.Reset()
	SET:(+intINStartId <= 0) intINStartId = ""
	set ^aa("intINStartId")=intINStartId
	SET strINDoctorCode = $$$UPPER($REPLACE(strINDoctorCode, $CHAR(0), ""))
	SET strINDoctorNom = $$$UPPER($REPLACE(strINDoctorNom, $CHAR(0), ""))
	
	SET ClsOUTListOfMedecinsExt = ##class(Region.FRXX.ClinicomLink.cli.SDC.ClassListofMedecinsExt).%New()
	
	IF intINStartId = ""
	{
		KILL ^TQSEARCHMED(%session.SessionId, ClsINOUTContext.Identifier)
		SET strQuery = "SELECT %NOLOCK REFD_RowId FROM SQLUser.PAC_RefDoctor "
		SET strSep = ""
		SET strWhere = " WHERE "
		IF strINDoctorCode '= ""
		{
			SET strQuery = strQuery _ strWhere _ strSep _ " UPPER(REFD_Code) LIKE '" _ strINDoctorCode _ "%'"
			SET strSep = " AND "
			SET strWhere = ""
		}
		IF strINDoctorNom '= ""
		{
			SET strQuery = strQuery _ strWhere _ strSep _ " UPPER(REFD_Desc) LIKE '" _ strINDoctorNom _ "%'"
			SET strSep = " AND "
			SET strWhere = ""
		}
		SET strQuery = strQuery _ " ORDER BY REFD_Code, REFD_Desc"
		SET rset = ##class(%Library.ResultSet).%New()
		SET sc = rset.Prepare(strQuery)
		IF $$$ISERR(sc)
		{
			SET strBuffer = $$$FormatText("Erreur Prepare pour %1: %2", strQuery, $SYSTEM.Status.GetErrorText(sc))
			SET ClsINOUTContext.Error = strBuffer
			DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError(strBuffer)
			GOTO GetAllMedecinsExtFin
		}
		set ^aa=strQuery
		SET sc = rset.Execute()
		IF $$$ISERR(sc)
		{
			SET strBuffer = $$$FormatText("Erreur Execute pour %1: %2", strQuery, $SYSTEM.Status.GetErrorText(sc))
			SET ClsINOUTContext.Error = strBuffer
			DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError(strBuffer)
			GOTO GetAllMedecinsExtFin
		}
		SET intCount = 0
		WHILE rset.Next(.sc)
		{
			QUIT:$$$ISERR(sc)
			SET intCount = intCount + 1
			SET ^TQSEARCHMED(%session.SessionId, ClsINOUTContext.Identifier, intCount) = rset.GetDataByName("REFD_RowId")
		}
		IF $$$ISERR(sc)
		{
			SET strBuffer = $$$FormatText("Erreur Next pour %1: %2", strQuery, $SYSTEM.Status.GetErrorText(sc))
			SET ClsINOUTContext.Error = strBuffer
			DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError(strBuffer)
			GOTO GetAllMedecinsExtFin
		}
	}
	SET intCount = 0
	SET strKey = intINStartId
	SET strKey = $ORDER(^TQSEARCHMED(%session.SessionId, ClsINOUTContext.Identifier, strKey), 1, strData)
	WHILE strKey '= ""
	{
		SET intCount = intCount + 1
		IF ..GetDoctorExtInfosById(.ClsINOUTContext, strData, .ClsMedecinExt) && (ClsMedecinExt '= $$$NULLOREF)
		{
			DO ClsOUTListOfMedecinsExt.Insert(ClsMedecinExt)
		}
		IF intCount = intINNbRows
		{
			SET intOUTLastId = strKey
			QUIT
		}
		SET ClsMedecinExt = $$$NULLOREF
		SET strKey = $ORDER(^TQSEARCHMED(%session.SessionId, ClsINOUTContext.Identifier, strKey), 1, strData)
	}
	IF intCount < intINNbRows
	{
		SET intOUTLastId = "-1"
		SET Retour = $$$TRUE
		GOTO GetAllMedecinsExtFin
	}
	SET ClsMedecinExt = $$$NULLOREF
	SET Retour = $$$TRUE
	GOTO GetAllMedecinsExtFin
GetAllMedecinsExtError
	SET $ZTRAP = ""
	SET ClsINOUTContext.Error = $ZERROR
	DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError($ZERROR)
GetAllMedecinsExtFin
	$$$CLOSERSET(rset)
	QUIT Retour
]]></Implementation>
</Method>

<Method name="GetAllMedecinsEtab">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&ClsINOUTContext:Region.FRXX.ClinicomLink.cli.Wrd.ClassContext,strINDoctorCode:%String="",strINDoctorNom:%String="",intINStartId:%Integer,intINNbRows:%Integer,&intOUTLastId:%Integer,&ClsOUTListOfMedecinsEtab:Region.FRXX.ClinicomLink.cli.SDC.ClassListofMedecinsEtab]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	/*
W ##class(Region.FRXX.ClinicomLink.WebServices.Wrd.ClassDocumentsServices).GetDefaultContext(.ClsContext)
// Pour .91, T2015-FRXX-SUP
SET LastId = ""
W ##class(Region.FRXX.ClinicomLink.WebServices.Wrd.ClassDocumentsServices).GetAllMedecins(.ClsContext, "", "", LastId, 20, .LastId, .aa)
w LastId
	*/
	SET $ZTRAP = "GetAllMedecinsError"
	#DIM rset As %Library.ResultSet
	#DIM strQuery As %String
	#DIM sc As %Library.Status
	#DIM %session As %CSP.Session
	
	
	SET strKey = ""
	SET strKey = $ORDER(^TQSEARCHMEDETAB(strKey))
	WHILE strKey '= ""
	{
		IF $DATA(^%cspSession(strKey)) = 0
		{
			KILL ^TQSEARCHMEDETAB(strKey)
		}
		SET strKey = $ORDER(^TQSEARCHMEDETAB(strKey))
	}
	
	SET ^aa("%session") = ClsINOUTContext.Identifier
	SET Retour = $$$FALSE
	DO ClsINOUTContext.Reset()
	SET:(+intINStartId <= 0) intINStartId = ""
	set ^aa("intINStartId")=intINStartId
	SET strINDoctorCode = $$$UPPER($REPLACE(strINDoctorCode, $CHAR(0), ""))
	SET strINDoctorNom = $$$UPPER($REPLACE(strINDoctorNom, $CHAR(0), ""))
	
	SET ClsOUTListOfMedecinsEtab = ##class(Region.FRXX.ClinicomLink.cli.SDC.ClassListofMedecinsExt).%New()
	
	IF intINStartId = ""
	{
		KILL ^TQSEARCHMEDETAB(%session.SessionId, ClsINOUTContext.Identifier)
		SET strQuery = "SELECT %NOLOCK CTPCP_RowId1 FROM SQLUser.CT_CareProv "
		SET strSep = ""
		SET strWhere = " WHERE "
		IF strINDoctorCode '= ""
		{
			SET strQuery = strQuery _ strWhere _ strSep _ " UPPER(CTPCP_Code) LIKE '" _ strINDoctorCode _ "%'"
			SET strSep = " AND "
			SET strWhere = ""
		}
		IF strINDoctorNom '= ""
		{
			SET strQuery = strQuery _ strWhere _ strSep _ " UPPER(CTPCP_Surname) LIKE '" _ strINDoctorNom _ "%'"
			SET strSep = " AND "
			SET strWhere = ""
		}
		SET strQuery = strQuery _ " ORDER BY CTPCP_Code, CTPCP_Surname, CTPCP_FirstName"
		SET rset = ##class(%Library.ResultSet).%New()
		SET sc = rset.Prepare(strQuery)
		IF $$$ISERR(sc)
		{
			SET strBuffer = $$$FormatText("Erreur Prepare pour %1: %2", strQuery, $SYSTEM.Status.GetErrorText(sc))
			SET ClsINOUTContext.Error = strBuffer
			DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError(strBuffer)
			GOTO GetAllMedecinsFin
		}
		set ^aa=strQuery
		SET sc = rset.Execute()
		IF $$$ISERR(sc)
		{
			SET strBuffer = $$$FormatText("Erreur Execute pour %1: %2", strQuery, $SYSTEM.Status.GetErrorText(sc))
			SET ClsINOUTContext.Error = strBuffer
			DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError(strBuffer)
			GOTO GetAllMedecinsFin
		}
		SET intCount = 0
		WHILE rset.Next(.sc)
		{
			QUIT:$$$ISERR(sc)
			SET intCount = intCount + 1
			SET ^TQSEARCHMEDETAB(%session.SessionId, ClsINOUTContext.Identifier, intCount) = rset.GetDataByName("CTPCP_RowId1")
		}
		IF $$$ISERR(sc)
		{
			SET strBuffer = $$$FormatText("Erreur Next pour %1: %2", strQuery, $SYSTEM.Status.GetErrorText(sc))
			SET ClsINOUTContext.Error = strBuffer
			DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError(strBuffer)
			GOTO GetAllMedecinsFin
		}
	}
	SET intCount = 0
	SET strKey = intINStartId
	SET strKey = $ORDER(^TQSEARCHMEDETAB(%session.SessionId, ClsINOUTContext.Identifier, strKey), 1, strData)
	WHILE strKey '= ""
	{
		SET intCount = intCount + 1
		IF ..GetDoctorEtabInfosById(.ClsINOUTContext, strData, .ClsMedecinEtab) && (ClsMedecinEtab '= $$$NULLOREF)
		{
			DO ClsOUTListOfMedecinsEtab.Insert(ClsMedecinEtab)
		}
		IF intCount = intINNbRows
		{
			SET intOUTLastId = strKey
			QUIT
		}
		SET ClsMedecinEtab = $$$NULLOREF
		SET strKey = $ORDER(^TQSEARCHMEDETAB(%session.SessionId, ClsINOUTContext.Identifier, strKey), 1, strData)
	}
	IF intCount < intINNbRows
	{
		SET intOUTLastId = "-1"
		SET Retour = $$$TRUE
		GOTO GetAllMedecinsFin
	}
	SET ClsMedecinEtab = $$$NULLOREF
	SET Retour = $$$TRUE
	GOTO GetAllMedecinsFin
GetAllMedecinsError
	SET $ZTRAP = ""
	SET ClsINOUTContext.Error = $ZERROR
	DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError($ZERROR)
GetAllMedecinsFin
	$$$CLOSERSET(rset)
	QUIT Retour
]]></Implementation>
</Method>

<Method name="GetDoctorEtabInfosByCode">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&ClsINOUTContext:Region.FRXX.ClinicomLink.cli.Wrd.ClassContext,strINDoctorCode:%String="",&ClsOUTMedecinEtab:Region.FRXX.ClinicomLink.cli.SDC.ClassMedecinEtab]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	/*
W ##class(Region.FRXX.ClinicomLink.WebServices.Wrd.ClassDocumentsServices).GetDefaultContext(.ClsContext)
// Pour .91, T2015-FRXX-SUP
W ##class(Region.FRXX.ClinicomLink.WebServices.Wrd.ClassDocumentsServices).GetDoctorEtabInfosByCode(.ClsContext, "CLIN", .aa)
zw aa
	*/
	SET $ZTRAP = "GetDoctorEtabInfosByCodeError"
	#DIM rset As %Library.ResultSet
	#DIM strQuery As %String
	#DIM sc As %Library.Status

	SET Retour = $$$FALSE
	DO ClsINOUTContext.Reset()
	
	SET ClsOUTMedecinEtab = ##class(Region.FRXX.ClinicomLink.cli.SDC.ClassMedecinEtab).%New()
	SET strINDoctorCode = $REPLACE(strINDoctorCode, $CHAR(0), "")
	SET strQuery = "SELECT %NOLOCK CTPCP_RowId1 FROM SQLUser.CT_CareProv WHERE CTPCP_Code=?"

	SET rset = ##class(%Library.ResultSet).%New()
	SET sc = rset.Prepare(strQuery)
	IF $$$ISERR(sc)
	{
		SET strBuffer = $$$FormatText("Erreur Prepare pour %1: %2", strQuery, $SYSTEM.Status.GetErrorText(sc))
		SET ClsINOUTContext.Error = strBuffer
		DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError(strBuffer)
		GOTO GetDoctorEtabInfosByCodeFin
	}
	SET sc = rset.Execute(strINDoctorCode)
	IF $$$ISERR(sc)
	{
		SET strBuffer = $$$FormatText("Erreur Execute pour %1: %2", strQuery, $SYSTEM.Status.GetErrorText(sc))
		SET ClsINOUTContext.Error = strBuffer
		DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError(strBuffer)
		GOTO GetDoctorEtabInfosByCodeFin
	}
	IF rset.Next(.sc)
	{
		QUIT:$$$ISERR(sc)
		SET Retour = ..GetDoctorEtabInfosById(.ClsINOUTContext, rset.GetDataByName("CTPCP_RowId1"), .ClsOUTMedecinEtab)
	}
	IF $$$ISERR(sc)
	{
		SET strBuffer = $$$FormatText("Erreur Next pour %1: %2", strQuery, $SYSTEM.Status.GetErrorText(sc))
		SET ClsINOUTContext.Error = strBuffer
		DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError(strBuffer)
		GOTO GetDoctorEtabInfosByCodeFin
	}
	SET Retour = $$$TRUE
	GOTO GetDoctorEtabInfosByCodeFin
GetDoctorEtabInfosByCodeError
	SET $ZTRAP = ""
	SET ClsINOUTContext.Error = $ZERROR
	DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError($ZERROR)
GetDoctorEtabInfosByCodeFin
	$$$CLOSERSET(rset)
	QUIT Retour
]]></Implementation>
</Method>

<Method name="GetDoctorEtabInfosById">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&ClsINOUTContext:Region.FRXX.ClinicomLink.cli.Wrd.ClassContext,strINDoctorId:%String="",&ClsOUTMedecinEtab:Region.FRXX.ClinicomLink.cli.SDC.ClassMedecinEtab]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	SET $ZTRAP = "GetDoctorEtabInfosByIdError"
	#DIM rset As %Library.ResultSet
	#DIM strQuery As %String
	#DIM sc As %Library.Status

	SET Retour = $$$FALSE
	DO ClsINOUTContext.Reset()
	SET CTCareProv = ##class(User.CTCareProv).%OpenId(strINDoctorId, 0, .sc)
	IF $$$ISERR(sc)
	{
		SET strBuffer = $$$FormatText("Erreur Next pour %1: %2", "##class(User.CTCareProv).%OpenId(" _ strINDoctorId _ ")", $SYSTEM.Status.GetErrorText(sc))
		SET ClsINOUTContext.Error = strBuffer
		DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError(strBuffer)
		GOTO GetDoctorEtabInfosByIdFin
	}
	SET:( ($DATA(ClsOUTMedecinEtab) = 0 ) || (ClsOUTMedecinEtab = $$$NULLOREF) ) ClsOUTMedecinEtab = ##class(Region.FRXX.ClinicomLink.cli.SDC.ClassMedecinEtab).%New()
	SET ClsOUTMedecinEtab.DoctorId = strINDoctorId
	SET ClsOUTMedecinEtab.Code = CTCareProv.CTPCPCode
	SET ClsOUTMedecinEtab.Name = CTCareProv.CTPCPSurname
	IF ClsOUTMedecinEtab.Name = ""
	{
		SET ClsOUTMedecinEtab.Name = CTCareProv.CTPCPDesc
	}
	SET ClsOUTMedecinEtab.Forename = CTCareProv.CTPCPFirstName
	SET ClsOUTMedecinEtab.MaidenName = CTCareProv.CTPCPOtherName
	SET ClsOUTMedecinEtab.Title = CTCareProv.CTPCPTitleDR
	SET:(CTCareProv.CTPCPZipDR '= $$$NULLOREF) ClsOUTMedecinEtab.ZIPCode = CTCareProv.CTPCPZipDR.CTZIPCode
	SET:(CTCareProv.CTPCPCityDR '= $$$NULLOREF) ClsOUTMedecinEtab.City = CTCareProv.CTPCPCityDR.CTCITDesc
	IF CTCareProv.CTPCPStName '= $$$NULLOREF
	{
		
		SET:(CTCareProv.CTPCPStName.Count() >= 1) ClsOUTMedecinEtab.Address1 = CTCareProv.CTPCPStName.GetAt(1)
		SET:(CTCareProv.CTPCPStName.Count() >= 2) ClsOUTMedecinEtab.Address2 = CTCareProv.CTPCPStName.GetAt(2)
		SET:(CTCareProv.CTPCPStName.Count() >= 3) ClsOUTMedecinEtab.Address3 = CTCareProv.CTPCPStName.GetAt(3)
	}
	SET ClsOUTMedecinEtab.Email = CTCareProv.CTPCPEmail
	//SET ClsOUTMedecinEtab.Email2 = CTCareProv.REFDEmail2
	SET ClsOUTMedecinEtab.Fax = CTCareProv.CTPCPFax
	SET ClsOUTMedecinEtab.Phone = CTCareProv.CTPCPTelO
	SET ClsOUTMedecinEtab.PhonePro = CTCareProv.CTPCPTelH
	SET ClsOUTMedecinEtab.MobilePhone = CTCareProv.CTPCPMobilePhone
	//SET ClsOUTMedecinEtab.ADELI = CTCareProv.REFDRegNumber1
	IF CTCareProv.CTPCPSpecDR '= $$$NULLOREF
	{
		SET ClsOUTMedecinEtab.Specialty = CTCareProv.CTPCPSpecDR.CTSPCCode
	}
	SET Retour = $$$TRUE
	GOTO GetDoctorEtabInfosByIdFin
GetDoctorEtabInfosByIdError
	SET $ZTRAP = ""
	SET ClsINOUTContext.Error = $ZERROR
	DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError($ZERROR)
GetDoctorEtabInfosByIdFin
	QUIT Retour
]]></Implementation>
</Method>

<Method name="GetDoctorEtabByIdAsCorresp">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&ClsINOUTContext:Region.FRXX.ClinicomLink.cli.Wrd.ClassContext,strINDoctorId:%String="",&ClsOUTCorrespondant:Region.FRXX.ClinicomLink.cli.Wrd.ClassCorrespondant]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	/*
W ##class(Region.FRXX.ClinicomLink.WebServices.Wrd.ClassDocumentsServices).GetDefaultContext(.ClsContext)
// Pour .91, T2015-FRXX-SUP
W ##class(Region.FRXX.ClinicomLink.WebServices.Wrd.ClassDocumentsServices).GetDoctorEtabByIdAsCorresp(.ClsContext, 2897, .aa)
	*/
	SET $ZTRAP = "GetDoctorEtabByIdAsCorrespError"
	SET Retour = $$$FALSE

	#DIM rset As %Library.ResultSet
	#DIM strQuery As %String
	#DIM sc As %Library.Status

	SET Retour = $$$FALSE
	DO ClsINOUTContext.Reset()
	SET strQuery = "SELECT %NOLOCK CTPCP_Desc, CTPCP_Title_DR->TTL_Code, CTPCP_Title, CTPCP_FirstName, CTPCP_Surname, CTPCP_Email, CTPCP_Zip_DR->CTZIP_Code, CTPCP_City_DR->CTCIT_Desc, CTPCP_MobilePhone, CTPCP_Fax from SQLUser.CT_CareProv WHERE CTPCP_RowId1=?"

	SET rset = ##class(%Library.ResultSet).%New()
	SET sc = rset.Prepare(strQuery)
	IF $$$ISERR(sc)
	{
		SET strBuffer = $$$FormatText("Erreur Prepare pour %1: %2", strQuery, $SYSTEM.Status.GetErrorText(sc))
		SET ClsINOUTContext.Error = strBuffer
		DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError(strBuffer)
		GOTO GetDoctorEtabByIdAsCorrespFin
	}
	SET sc = rset.Execute(strINDoctorId)
	IF $$$ISERR(sc)
	{
		SET strBuffer = $$$FormatText("Erreur Execute pour %1: %2", strQuery, $SYSTEM.Status.GetErrorText(sc))
		SET ClsINOUTContext.Error = strBuffer
		DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError(strBuffer)
		GOTO GetDoctorEtabByIdAsCorrespFin
	}
	WHILE rset.Next(.sc)
	{
		QUIT:$$$ISERR(sc)
		SET ClsOUTCorrespondant = ##class(Region.FRXX.ClinicomLink.cli.Wrd.ClassCorrespondant).%New()
		SET ClsOUTCorrespondant.TypeCorrespondant = 7 // Médecins correspondants Etablissement
		SET ClsOUTCorrespondant.CorrespId = strINDoctorId
		SET ClsOUTCorrespondant.Qualite = rset.GetDataByName("TTL_Code")
		SET ClsOUTCorrespondant.Title = rset.GetDataByName("CTPCP_Title")
		SET ClsOUTCorrespondant.FirstName = rset.GetDataByName("CTPCP_FirstName")
		SET ClsOUTCorrespondant.LastName = rset.GetDataByName("CTPCP_Surname")
		SET LB = rset.GetDataByName("REFD_Address")
		IF ($LISTVALID(LB)) && (LB '= "")
		{
			SET:($LISTLENGTH(LB) >= 1) ClsOUTCorrespondant.Address2 = $LISTGET(LB, 1)
			SET:($LISTLENGTH(LB) >= 2) ClsOUTCorrespondant.Address1 = $LISTGET(LB, 2)
			SET:($LISTLENGTH(LB) >= 3) ClsOUTCorrespondant.Address3 = $LISTGET(LB, 3)
		}
		SET ClsOUTCorrespondant.ZIPCode = rset.GetDataByName("CTZIP_Code")
		SET ClsOUTCorrespondant.City = rset.GetDataByName("CTCIT_Desc")
		//SET ClsOUTCorrespondant.Phone = rset.GetDataByName("REFD_Phone")
		SET ClsOUTCorrespondant.MobilePhone = rset.GetDataByName("CTPCP_MobilePhone")
		SET ClsOUTCorrespondant.Fax = rset.GetDataByName("CTPCP_Fax")
		//SET ClsOUTCorrespondant.PhonePro = rset.GetDataByName("NOK_TelO")
		SET ClsOUTCorrespondant.Email = rset.GetDataByName("CTPCP_Email")
	}
	IF $$$ISERR(sc)
	{
		SET strBuffer = $$$FormatText("Erreur Next pour %1: %2", strQuery, $SYSTEM.Status.GetErrorText(sc))
		SET ClsINOUTContext.Error = strBuffer
		DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError(strBuffer)
		GOTO GetDoctorEtabByIdAsCorrespFin
	}
	
	SET Retour = $$$TRUE
	GOTO GetDoctorEtabByIdAsCorrespFin
GetDoctorEtabByIdAsCorrespError
	SET $ZTRAP = ""
	SET ClsINOUTContext.Error = $ZERROR
	DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError($ZERROR)
GetDoctorEtabByIdAsCorrespFin
	QUIT Retour
]]></Implementation>
</Method>

<Method name="GetDoctorEtabByCodeAsCorresp">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&ClsINOUTContext:Region.FRXX.ClinicomLink.cli.Wrd.ClassContext,strINDoctorCode:%String="",&ClsOUTCorrespondant:Region.FRXX.ClinicomLink.cli.Wrd.ClassCorrespondant]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	/*
W ##class(Region.FRXX.ClinicomLink.WebServices.Wrd.ClassDocumentsServices).GetDefaultContext(.ClsContext)
// Pour .91, T2015-FRXX-SUP
W ##class(Region.FRXX.ClinicomLink.WebServices.Wrd.ClassDocumentsServices).GetDoctorEtabByIdAsCorresp(.ClsContext, 2897, .aa)
	*/
	SET $ZTRAP = "GetDoctorEtabByCodeAsCorrespError"

	SET Retour = $$$FALSE
	DO ClsINOUTContext.Reset()
	
	SET Id = ##class(web.CTCareProv).GetIdFromCodeOrDescription(strINDoctorCode)
	IF Id '= ""
	{
		SET Retour = ..GetDoctorEtabByIdAsCorresp(.ClsINOUTContext, Id, .ClsOUTCorrespondant)
	}
	
	GOTO GetDoctorEtabByCodeAsCorrespFin
GetDoctorEtabByCodeAsCorrespError
	SET $ZTRAP = ""
	SET ClsINOUTContext.Error = $ZERROR
	DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError($ZERROR)
GetDoctorEtabByCodeAsCorrespFin
	QUIT Retour
]]></Implementation>
</Method>

<Method name="Disconnect">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&ClsINOUTContext:Region.FRXX.ClinicomLink.cli.Wrd.ClassContext]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	SET $ZTRAP = "DisconnectError1"
	KILL ^TQSEARCHMED(ClsINOUTContext.SessionId, ClsINOUTContext.Identifier)
DisconnectError1
	SET $ZTRAP = "DisconnectError2"
	KILL ^TQSEARCHMEDETAB(ClsINOUTContext.SessionId, ClsINOUTContext.Identifier)
DisconnectError2
	QUIT $$$TRUE
]]></Implementation>
</Method>

<Method name="LTGetAll">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&ClsINOUTContext:Region.FRXX.ClinicomLink.cli.Wrd.ClassContext,strINDomain:%String="",&ClsOUTListofDocuments:Region.FRXX.ClinicomLink.cli.Wrd.ClassListofDocuments]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	/*
W ##class(Region.FRXX.ClinicomLink.WebServices.Wrd.ClassDocumentsServices).GetDefaultContext(.ClsContext)
// Pour .91, T2015-FRXX-SUP
S aa = ##class(Region.FRXX.ClinicomLink.cli.Wrd.ClassListofDocuments).%New()
W ##class(Region.FRXX.ClinicomLink.WebServices.Wrd.ClassDocumentsServices).LTGetAll(ClsContext, 0, .aa)
w aa.Count()
	*/
	SET $ZTRAP = "LTGetAllError"
	#DIM ClsDocumentStream As Region.FRXX.ClinicomLink.cli.Wrd.ClassDocumentStream
	SET Retour = $$$FALSE
	DO ClsINOUTContext.Reset()
	
	SET strINDomain = +strINDomain
	SET:(ClsINOUTContext = $$$NULLOREF) ClsINOUTContext = ##class(Region.FRXX.ClinicomLink.cli.Wrd.ClassContext).%New()

	KILL ^TQLBO0015
	SET strQuery = "select %NOLOCK ID from Region_FRXX_ClinicomLink_cli_Wrd.ClassDocument WHERE DocumentType = 'DOCX_LT' AND Domaine=?"
	S ^TQLBO0015("strQuery") = strQuery
	SET rset = ##class(%Library.ResultSet).%New()
	SET sc = rset.Prepare(strQuery)
	IF $$$ISERR(sc)
	{
		SET strBuffer = "Prepare " _ ##class(%SYSTEM.Status).GetErrorText(sc)
		SET ClsINOUTContext.Error = strBuffer
		SET ^TQLBO0015("Prepare") = strBuffer
		GOTO LTGetAllFin
	}
	SET sc = rset.Execute(strINDomain)
	IF $$$ISERR(sc)
	{
		SET strBuffer = "Execute " _ ##class(%SYSTEM.Status).GetErrorText(sc)
		SET ClsINOUTContext.Error = strBuffer
		SET ^TQLBO0015("Execute") = strBuffer
		GOTO LTGetAllFin
	}
	WHILE rset.Next(.sc)
	{
		QUIT:$$$ISERR(sc)
		SET ClsDocument = ##class(Region.FRXX.ClinicomLink.cli.Wrd.ClassDocument).%OpenId(rset.GetDataByName("ID"), 0)
		SET ClsDocument.DocumentId = rset.GetDataByName("ID")
		SET ClsDocument.ListofDocuments = $$$NULLOREF
		DO ClsOUTListofDocuments.Insert(ClsDocument)
}
	IF $$$ISERR(sc)
	{
		SET strBuffer = "Next " _ ##class(%SYSTEM.Status).GetErrorText(sc)
		SET ClsINOUTContext.Error = strBuffer
		SET ^TQLBO0015("Next") = strBuffer
		GOTO LTGetAllFin
	}
	SET Retour = $$$TRUE
	GOTO LTGetAllFin
LTGetAllError
	SET $ZTRAP = ""
	SET ^TQLBO0015("$ZERROR") = $ZERROR
	SET ClsINOUTContext.Error = $ZERROR
	DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError($ZERROR)
LTGetAllFin
	$$$CLOSERSET(rset)
	QUIT Retour
]]></Implementation>
</Method>

<Method name="LTGet">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&ClsINOUTContext:Region.FRXX.ClinicomLink.cli.Wrd.ClassContext,strDocumentId:%String="",&ClsOUTDocument:Region.FRXX.ClinicomLink.cli.Wrd.ClassDocument]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	/*
S aa = ##class(Region.FRXX.ClinicomLink.cli.Wrd.ClassListofDocuments).%New()
W ##class(Region.FRXX.ClinicomLink.WebServices.Wrd.ClassDocumentsServices).GetAll("655401","3055", .aa)
w aa.Count()
	*/
	SET $ZTRAP = "LTGetError"
	SET Retour = $$$FALSE
	#DIM ClsDocumentStream As Region.FRXX.ClinicomLink.cli.Wrd.ClassDocumentStream
	
	DO ClsINOUTContext.Reset()
	SET:(ClsINOUTContext = $$$NULLOREF) ClsINOUTContext = ##class(Region.FRXX.ClinicomLink.cli.Wrd.ClassContext).%New()

	KILL ^TQLBO0015
	
	SET ClsOUTDocument = ##class(Region.FRXX.ClinicomLink.cli.Wrd.ClassDocument).%OpenId(strDocumentId, 0, .sc)
	IF $$$ISERR(sc) || (ClsOUTDocument = $$$NULLOREF)
	{
		SET ClsOUTDocument = ##class(Region.FRXX.ClinicomLink.cli.Wrd.ClassDocument).%New() // Pour ne pas générer d'erreur sur le client
		SET ClsINOUTContext.Error = $System.Status.GetErrorText(sc)
		GOTO LTGetFin
	}
	SET Retour = $$$TRUE
	GOTO LTGetFin
LTGetError
	SET $ZTRAP = ""
	SET ^TQLBO0015("sc") = $ZERROR
	SET ClsINOUTContext.Error = $ZERROR
	DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError($ZERROR)
LTGetFin
	QUIT Retour
]]></Implementation>
</Method>

<Method name="LTGetByCode">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&ClsINOUTContext:Region.FRXX.ClinicomLink.cli.Wrd.ClassContext,strINDocumentCode:%String="",&ClsOUTDocument:Region.FRXX.ClinicomLink.cli.Wrd.ClassDocument]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	/*
S aa = ##class(Region.FRXX.ClinicomLink.cli.Wrd.ClassListofDocuments).%New()
W ##class(Region.FRXX.ClinicomLink.WebServices.Wrd.ClassDocumentsServices).GetAll("655401","3055", .aa)
w aa.Count()
	*/
	SET $ZTRAP = "LTGetByCodeError"
	#DIM rset As %Library.ResultSet
	#DIM strQuery As %String
	#DIM sc As %Library.Status

	SET Retour = $$$FALSE
	
	DO ClsINOUTContext.Reset()
	
	SET strQuery = "SELECT %NOLOCK ID FROM Region_FRXX_ClinicomLink_cli_Wrd.ClassDocument WHERE (DocumentName=?) AND (DocumentType='DOCX_LT')"

	SET rset = ##class(%Library.ResultSet).%New()
	SET sc = rset.Prepare(strQuery)
	IF $$$ISERR(sc)
	{
		SET strBuffer = "Erreur Prepare " _ ##class(%SYSTEM.Status).GetErrorText(sc)
		SET ClsINOUTContext.Error = strBuffer
		DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError(strBuffer)
		GOTO LTGetByCodeFin
	}
	SET sc = rset.Execute(strINDocumentCode)
	IF $$$ISERR(sc)
	{
		SET strBuffer = "Erreur Execute " _ ##class(%SYSTEM.Status).GetErrorText(sc)
		SET ClsINOUTContext.Error = strBuffer
		DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError(strBuffer)
		GOTO LTGetByCodeFin
	}
	IF rset.Next(.sc)
	{
		QUIT:$$$ISERR(sc)
		SET Retour = ..LTGet(.ClsINOUTContext, rset.GetDataByName("ID"), .ClsOUTDocument)
	}
	IF $$$ISERR(sc)
	{
		SET strBuffer = "Erreur Next " _ ##class(%SYSTEM.Status).GetErrorText(sc)
		SET ClsINOUTContext.Error = strBuffer
		DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError(strBuffer)
		GOTO LTGetByCodeFin
	}
	
	GOTO LTGetByCodeFin
LTGetByCodeError
	SET $ZTRAP = ""
	SET ^TQLBO0015("sc") = $ZERROR
	SET ClsINOUTContext.Error = $ZERROR
	DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError($ZERROR)
LTGetByCodeFin
	$$$CLOSERSET(rset)
	QUIT Retour
]]></Implementation>
</Method>

<Method name="LTGetMRU">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&ClsINOUTContext:Region.FRXX.ClinicomLink.cli.Wrd.ClassContext,&ClsOUTListofDocuments:Region.FRXX.ClinicomLink.cli.Wrd.ClassListofDocuments=$$$NULLOREF]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	/*
W ##class(Region.FRXX.ClinicomLink.WebServices.Wrd.ClassDocumentsServices).GetDefaultContext(.ClsContext)
// Pour .91, T2015-FRXX-SUP
W ##class(Region.FRXX.ClinicomLink.WebServices.Wrd.ClassDocumentsServices).LTGetMRU(.ClsContext, .ClsOUTListofDocuments)
	*/
	SET $ZTRAP = "LTGetMRUError"
	SET Retour = $$$FALSE
	DO ClsINOUTContext.Reset()

	SET ClsOUTListofDocuments = ##class(Region.FRXX.ClinicomLink.cli.Wrd.ClassListofDocuments).%New()

	SET strQuery = "SELECT %NOLOCK DocumentIds FROM Region_FRXX_ClinicomLink_cli_Wrd.ClassLTMRU WHERE UserId=?"

	SET rset = ##class(%Library.ResultSet).%New()
	SET sc = rset.Prepare(strQuery)
	IF $$$ISERR(sc)
	{
		SET strBuffer = $$$FormatText("Erreur Prepare pour %1: %2", strQuery, $SYSTEM.Status.GetErrorText(sc))
		WRITE:('$$$ISSESSIONVALID) strBuffer, !
		DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError(strBuffer)
		GOTO LTGetMRUFin
	}
	SET sc = rset.Execute($$$CVTSTR4WS(ClsINOUTContext.UserId))
	IF $$$ISERR(sc)
	{
		SET strBuffer = $$$FormatText("Erreur Execute pour %1: %2", strQuery, $SYSTEM.Status.GetErrorText(sc))
		WRITE:('$$$ISSESSIONVALID) strBuffer, !
		DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError(strBuffer)
		GOTO LTGetMRUFin
	}
	SET Data = ""
	IF rset.Next(.sc)
	{
		QUIT:$$$ISERR(sc)
		SET Data = rset.GetDataByName("DocumentIds")
	}
	IF $$$ISERR(sc)
	{
		SET strBuffer = $$$FormatText("Erreur Next pour %1: %2", strQuery, $SYSTEM.Status.GetErrorText(sc))
		WRITE:('$$$ISSESSIONVALID) strBuffer, !
		DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError(strBuffer)
		GOTO LTGetMRUFin
	}
	SET lstData = $LISTFROMSTRING(Data, "^")
	FOR I=1:1:$LISTLENGTH(lstData)
	{
		SET strDocumentId = $LISTGET(lstData, I)
		CONTINUE:(strDocumentId = "")
		SET ClsDocument = $$$NULLOREF
		SET ClsDocument = ##class(Region.FRXX.ClinicomLink.cli.Wrd.ClassDocument).%OpenId(strDocumentId, 0, .sc)
		IF $$$ISOK(sc) && (ClsDocument '= $$$NULLOREF)
		{
			DO ClsOUTListofDocuments.Insert(ClsDocument)
		}
	}
	
	SET Retour = $$$TRUE
	GOTO LTGetMRUFin
LTGetMRUError
	SET $ZTRAP = ""
	WRITE:('$$$ISSESSIONVALID) $ZERROR, !
	SET ClsINOUTContext.Error = $ZERROR
	DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError($ZERROR)
LTGetMRUFin
	$$$CLOSERSET(rset)
	QUIT Retour
]]></Implementation>
</Method>

<Method name="LTSetMRU">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&ClsINOUTContext:Region.FRXX.ClinicomLink.cli.Wrd.ClassContext,ClsINListofDocuments:Region.FRXX.ClinicomLink.cli.Wrd.ClassListofDocuments]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	/*
W ##class(Region.FRXX.ClinicomLink.WebServices.Wrd.ClassDocumentsServices).LTSetMRU()
	*/
	SET $ZTRAP = "LTSetMRUError"
	SET Retour = $$$FALSE
	DO ClsINOUTContext.Reset()
	
	SET Retour = $$$TRUE
	GOTO LTSetMRUFin
LTSetMRUError
	SET $ZTRAP = ""
	WRITE:('$$$ISSESSIONVALID) $ZERROR, !
	SET ClsINOUTContext.Error = $ZERROR
	DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError($ZERROR)
LTSetMRUFin
	QUIT Retour
]]></Implementation>
</Method>

<Method name="LTClearMRU">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&ClsINOUTContext:Region.FRXX.ClinicomLink.cli.Wrd.ClassContext]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	/*
W ##class(Region.FRXX.ClinicomLink.WebServices.Wrd.ClassDocumentsServices).GetDefaultContext(.ClsContext)
// Pour .91, T2015-FRXX-SUP
W ##class(Region.FRXX.ClinicomLink.WebServices.Wrd.ClassDocumentsServices).LTClearMRU(.ClsContext)
	*/
	SET $ZTRAP = "LTClearMRUError"
	SET Retour = $$$FALSE
	DO ClsINOUTContext.Reset()

	SET strQuery = $$$FormatText("DELETE FROM Region_FRXX_ClinicomLink_cli_Wrd.ClassLTMRU WHERE UserId = '%1'", ClsINOUTContext.UserId)
	SET rset = $SYSTEM.SQL.Execute(strQuery)
	IF (rset.SQLCODE '= 0) && (rset.SQLCODE '= 100)
	{
		SET strBuffer = $$$FormatText("Erreur Execute pour %1: %2", strQuery, $$$GETSQLCODEMSG(rset.SQLCODE))
		WRITE:('$$$ISSESSIONVALID) strBuffer, !
		DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError(strBuffer)
		GOTO LTClearMRUFin
	}
	$$$CLOSERSET(rset)
	
	SET Retour = $$$TRUE
	GOTO LTClearMRUFin
LTClearMRUError
	SET $ZTRAP = ""
	WRITE:('$$$ISSESSIONVALID) $ZERROR, !
	SET ClsINOUTContext.Error = $ZERROR
	DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError($ZERROR)
LTClearMRUFin
	QUIT Retour
]]></Implementation>
</Method>

<Method name="LTAddMRU">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&ClsINOUTContext:Region.FRXX.ClinicomLink.cli.Wrd.ClassContext,ClsINDocument:Region.FRXX.ClinicomLink.cli.Wrd.ClassDocument]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	/*
W ##class(Region.FRXX.ClinicomLink.WebServices.Wrd.ClassDocumentsServices).GetDefaultContext(.ClsContext)
// Pour .91, T2015-FRXX-SUP
SET ClsDocument = ##class(Region.FRXX.ClinicomLink.cli.Wrd.ClassDocument).%New()
SET ClsDocument.DocumentId = 1
W ##class(Region.FRXX.ClinicomLink.WebServices.Wrd.ClassDocumentsServices).LTAddMRU(.ClsContext, ClsDocument)
	*/
	SET $ZTRAP = "LTAddMRUError"
	#DIM rset As %Library.ResultSet
	#DIM strQuery As %String
	#DIM sc As %Library.Status
	
	SET Retour = $$$FALSE
	DO ClsINOUTContext.Reset()
	
	SET strQuery = "SELECT %NOLOCK DocumentIds FROM Region_FRXX_ClinicomLink_cli_Wrd.ClassLTMRU WHERE UserId=?"

	SET rset = ##class(%Library.ResultSet).%New()
	SET sc = rset.Prepare(strQuery)
	IF $$$ISERR(sc)
	{
		SET strBuffer = $$$FormatText("Erreur Prepare pour %1: %2", strQuery, $SYSTEM.Status.GetErrorText(sc))
		WRITE:('$$$ISSESSIONVALID) strBuffer, !
		DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError(strBuffer)
		GOTO LTAddMRUFin
	}
	SET sc = rset.Execute(ClsINOUTContext.UserId)
	IF $$$ISERR(sc)
	{
		SET strBuffer = $$$FormatText("Erreur Execute pour %1: %2", strQuery, $SYSTEM.Status.GetErrorText(sc))
		WRITE:('$$$ISSESSIONVALID) strBuffer, !
		DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError(strBuffer)
		GOTO LTAddMRUFin
	}
	SET Data = ""
	IF rset.Next(.sc)
	{
		QUIT:$$$ISERR(sc)
		SET Data = rset.GetDataByName("DocumentIds")
	}
	IF $$$ISERR(sc)
	{
		SET strBuffer = $$$FormatText("Erreur Next pour %1: %2", strQuery, $SYSTEM.Status.GetErrorText(sc))
		WRITE:('$$$ISSESSIONVALID) strBuffer, !
		DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError(strBuffer)
		GOTO LTAddMRUFin
	}
	SET lstData = $LISTFROMSTRING(Data, "^")
	SET Data = ClsINDocument.DocumentId
	FOR I=1:1:9
	{
		CONTINUE:($LISTGET(lstData, I) = ClsINDocument.DocumentId)
		SET Data = Data _ "^" _ $LISTGET(lstData, I)
	}
	$$$CLOSERSET(rset)
	GOTO:('..LTClearMRU(.ClsINOUTContext)) LTAddMRUFin
	
	SET strQuery = $$$FormatText("INSERT INTO Region_FRXX_ClinicomLink_cli_Wrd.ClassLTMRU (UserId, DocumentIds) VALUES ('%1', '%2')", ClsINOUTContext.UserId, Data)
	SET rset = $SYSTEM.SQL.Execute(strQuery)
	IF rset.SQLCODE '= 0
	{
		SET strBuffer = $$$FormatText("Erreur Execute pour %1: %2", strQuery, $$$GETSQLCODEMSG(rset.SQLCODE))
		WRITE:('$$$ISSESSIONVALID) strBuffer, !
		DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError(strBuffer)
		GOTO LTAddMRUFin
	}

	SET Retour = $$$TRUE
	GOTO LTAddMRUFin
LTAddMRUError
	SET $ZTRAP = ""
	WRITE:('$$$ISSESSIONVALID) $ZERROR, !
	SET ClsINOUTContext.Error = $ZERROR
	DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError($ZERROR)
LTAddMRUFin
	$$$CLOSERSET(rset)
	QUIT Retour
]]></Implementation>
</Method>

<Method name="EpisodeGetInfos">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&ClsINOUTContext:Region.FRXX.ClinicomLink.cli.Wrd.ClassContext,strINEpisodeId:%String,&ClsOUTPatient:Region.FRXX.ClinicomLink.cli.Pat.ClassPatient,&ClsOUTEpisode:Region.FRXX.ClinicomLink.cli.Pat.ClassEpisode]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	/*
W ##class(Region.FRXX.ClinicomLink.WebServices.Wrd.ClassDocumentsServices).GetDefaultContext(.ClsContext)
// Pour .91, T2015-FRXX-SUP
W ##class(Region.FRXX.ClinicomLink.WebServices.Wrd.ClassDocumentsServices).EpisodeGetInfos(ClsContext)
	*/
	SET $ZTRAP = "EpisodeGetInfosError"
	SET Retour = $$$FALSE
	DO ClsINOUTContext.Reset()
	
	SET ClsOUTPatient = ##class(Region.FRXX.ClinicomLink.cli.Pat.ClassPatient).%New()
	SET ClsOUTEpisode = ##class(Region.FRXX.ClinicomLink.cli.Pat.ClassEpisode).%New()
	SET PatientId = $PIECE(^PAADM(strINEpisodeId), "^", 1)
	SET PAPerson = ##class(User.PAPerson).%OpenId(PatientId, 0, .sc)
	IF $$$ISERR(sc)
	{
		SET ^TQLBO0015("sc") = sc
		SET ClsINOUTContext.Error = $System.Status.GetErrorText(sc)
	}
	SET ClsOUTPatient.FirstName = PAPerson.PAPERName
	SET ClsOUTPatient.LastName = PAPerson.PAPERName2
	SET ClsOUTPatient.IPP = $PIECE($GET(^PAPER(PatientId, "PAT", 1)), "^", 2)
	SET ClsOUTEpisode.EpisodeExt = $PIECE(^PAADM(strINEpisodeId), "^", 81)
	
	SET Retour = $$$TRUE
	GOTO EpisodeGetInfosFin
EpisodeGetInfosError
	SET $ZTRAP = ""
	SET ^TQLBO0015("sc") = $ZERROR
	SET ClsINOUTContext.Error = $ZERROR
	DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError($ZERROR)
EpisodeGetInfosFin
	QUIT Retour
]]></Implementation>
</Method>

<Method name="CorrespGetAll">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&ClsINOUTContext:Region.FRXX.ClinicomLink.cli.Wrd.ClassContext,strINPatientId:%String,strINEpisodeId:%String="",&ClsOUTListofCorrespondants:Region.FRXX.ClinicomLink.cli.Wrd.ClassListofCorrespondants]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	/*
W ##class(Region.FRXX.ClinicomLink.WebServices.Wrd.ClassDocumentsServices).GetDefaultContext(.ClsContext)
// Pour .91, T2015-FRXX-SUP
W ##class(Region.FRXX.ClinicomLink.WebServices.Wrd.ClassDocumentsServices).CorrespGetAll(.ClsContext, 16, 10, .ClsListofCorrespondants)
S a = ClsListofCorrespondants.GetAt(1)
zw a
	*/
	SET $ZTRAP = "CorrespGetAllError"
	#DIM rset As %Library.ResultSet
	#DIM strQuery As %String
	#DIM sc As %Library.Status

	SET Retour = $$$FALSE
	DO ClsINOUTContext.Reset()
	
	SET ClsOUTListofCorrespondants = ##class(Region.FRXX.ClinicomLink.cli.Wrd.ClassListofCorrespondants).%New()

	IF ..CorrespGetPatient(.ClsINOUTContext, strINPatientId, .ClsCorrespondant)
	{
		IF ClsCorrespondant '= $$$NULLOREF
		{
			DO ClsOUTListofCorrespondants.Insert(ClsCorrespondant)
			SET ClsCorrespondant = $$$NULLOREF
		}
		ELSE
		{
			GOTO CorrespGetAllFin
		}
	}
	
	IF ..CorrespGetFamilyDoctor(.ClsINOUTContext, strINPatientId, .ClsCorrespondant)
	{
		IF ClsCorrespondant '= $$$NULLOREF
		{
			DO ClsOUTListofCorrespondants.Insert(ClsCorrespondant)
			SET ClsCorrespondant = $$$NULLOREF
		}
		ELSE
		{
			GOTO CorrespGetAllFin
		}
	}
	
	SET strQuery = "SELECT %NOLOCK ADDR_RowId FROM SQLUser.PA_TempAddress WHERE ADDR_ParRef=?"

	SET rset = ##class(%Library.ResultSet).%New()
	SET sc = rset.Prepare(strQuery)
	IF $$$ISERR(sc)
	{
		SET strBuffer = $$$FormatText("Erreur Prepare pour %1: %2", strQuery, $SYSTEM.Status.GetErrorText(sc))
		SET ClsINOUTContext.Error = strBuffer
		DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError(strBuffer)
		GOTO CorrespGetAllFin
	}
	SET sc = rset.Execute(strINPatientId)
	IF $$$ISERR(sc)
	{
		SET strBuffer = $$$FormatText("Erreur Execute pour %1: %2", strQuery, $SYSTEM.Status.GetErrorText(sc))
		SET ClsINOUTContext.Error = strBuffer
		DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError(strBuffer)
		GOTO CorrespGetAllFin
	}
	WHILE rset.Next(.sc)
	{
		QUIT:$$$ISERR(sc)
		IF ..CorrespGetTempAddress(.ClsINOUTContext, rset.GetDataByName("ADDR_RowId"), .ClsCorrespondant)
		{
			IF ClsCorrespondant '= $$$NULLOREF
			{
				DO ClsOUTListofCorrespondants.Insert(ClsCorrespondant)
				SET ClsCorrespondant = $$$NULLOREF
			}
		}
		ELSE
		{
			GOTO CorrespGetAllFin
		}
	}
	IF $$$ISERR(sc)
	{
		SET strBuffer = $$$FormatText("Erreur Next pour %1: %2", strQuery, $SYSTEM.Status.GetErrorText(sc))
		SET ClsINOUTContext.Error = strBuffer
		DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError(strBuffer)
		GOTO CorrespGetAllFin
	}
	$$$CLOSERSET(rset)

	SET strQuery = "SELECT %NOLOCK NOK_RowId from SQLUser.PA_Nok WHERE NOK_PAPMI_ParRef=?"

	SET rset = ##class(%Library.ResultSet).%New()
	SET sc = rset.Prepare(strQuery)
	IF $$$ISERR(sc)
	{
		SET strBuffer = $$$FormatText("Erreur Prepare pour %1: %2", strQuery, $SYSTEM.Status.GetErrorText(sc))
		SET ClsINOUTContext.Error = strBuffer
		DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError(strBuffer)
		GOTO CorrespGetAllFin
	}
	SET sc = rset.Execute(strINPatientId)
	IF $$$ISERR(sc)
	{
		SET strBuffer = $$$FormatText("Erreur Execute pour %1: %2", strQuery, $SYSTEM.Status.GetErrorText(sc))
		SET ClsINOUTContext.Error = strBuffer
		DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError(strBuffer)
		GOTO CorrespGetAllFin
	}
	WHILE rset.Next(.sc)
	{
		QUIT:$$$ISERR(sc)
		IF ..CorrespGetNok(.ClsINOUTContext, rset.GetDataByName("NOK_RowId"), .ClsCorrespondant)
		{
			IF ClsCorrespondant '= $$$NULLOREF
			{
				DO ClsOUTListofCorrespondants.Insert(ClsCorrespondant)
				SET ClsCorrespondant = $$$NULLOREF
			}
		}
		ELSE
		{
			GOTO CorrespGetAllFin
		}
	}
	IF $$$ISERR(sc)
	{
		SET strBuffer = $$$FormatText("Erreur Next pour %1: %2", strQuery, $SYSTEM.Status.GetErrorText(sc))
		SET ClsINOUTContext.Error = strBuffer
		DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError(strBuffer)
		GOTO CorrespGetAllFin
	}
	$$$CLOSERSET(rset)

	IF strINEpisodeId '= ""
	{	
		SET strQuery = "SELECT %NOLOCK REFD_RowId from SQLUser.PA_AdmRefDoc WHERE REFD_ParRef=?"

		SET rset = ##class(%Library.ResultSet).%New()
		SET sc = rset.Prepare(strQuery)
		IF $$$ISERR(sc)
		{
			SET strBuffer = $$$FormatText("Erreur Prepare pour %1: %2", strQuery, $SYSTEM.Status.GetErrorText(sc))
			SET ClsINOUTContext.Error = strBuffer
			DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError(strBuffer)
			GOTO CorrespGetAllFin
		}
		SET sc = rset.Execute(strINEpisodeId)
		IF $$$ISERR(sc)
		{
			SET strBuffer = $$$FormatText("Erreur Execute pour %1: %2", strQuery, $SYSTEM.Status.GetErrorText(sc))
			SET ClsINOUTContext.Error = strBuffer
			DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError(strBuffer)
			GOTO CorrespGetAllFin
		}
		WHILE rset.Next(.sc)
		{
			QUIT:$$$ISERR(sc)
			IF ..CorrespGetAdmRefDoc(.ClsINOUTContext, rset.GetDataByName("REFD_RowId"), .ClsCorrespondant)
			{
				DO ClsOUTListofCorrespondants.Insert(ClsCorrespondant)
				SET ClsCorrespondant = $$$NULLOREF
			}
			ELSE
			{
				GOTO CorrespGetAllFin
			}
		}
		IF $$$ISERR(sc)
		{
			SET strBuffer = $$$FormatText("Erreur Next pour %1: %2", strQuery, $SYSTEM.Status.GetErrorText(sc))
			SET ClsINOUTContext.Error = strBuffer
			DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError(strBuffer)
			GOTO CorrespGetAllFin
		}
		$$$CLOSERSET(rset)
	}
	
	SET Retour = $$$TRUE
	GOTO CorrespGetAllFin
CorrespGetAllError
	SET $ZTRAP = ""
	WRITE:('$$$ISSESSIONVALID) $ZERROR, !
	DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError($ZERROR)
CorrespGetAllFin
	$$$CLOSERSET(rset)
	QUIT Retour
]]></Implementation>
</Method>

<Method name="CorrespGetPatient">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&ClsINOUTContext:Region.FRXX.ClinicomLink.cli.Wrd.ClassContext,strINPatientId:%String,&ClsOUTCorrespondant:Region.FRXX.ClinicomLink.cli.Wrd.ClassCorrespondant]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	/*
W ##class(YYY).CorrespGetPatient()
	*/
	SET $ZTRAP = "CorrespGetPatientError"
	SET Retour = $$$FALSE
	
	SET PAPerson = ##class(User.PAPerson).%OpenId(strINPatientId, 0, .sc)
	IF $$$ISERR(sc)
	{
		SET ^TQLBO0015("sc") = sc
		SET ClsINOUTContext.Error = $System.Status.GetErrorText(sc)
		GOTO CorrespGetPatientFin
	}

	SET ClsOUTCorrespondant = ##class(Region.FRXX.ClinicomLink.cli.Wrd.ClassCorrespondant).%New()
	SET ClsOUTCorrespondant.TypeCorrespondant = 1 // Patient
	SET ClsOUTCorrespondant.CorrespId = strINPatientId
	SET:(PAPerson.PAPERTitleDR '= $$$NULLOREF) ClsOUTCorrespondant.Qualite = PAPerson.PAPERTitleDR.TTLDesc
	SET (ClsOUTCorrespondant.FirstName, strPAPERName) = PAPerson.PAPERName
	SET (ClsOUTCorrespondant.LastName, strPAPERName2) = PAPerson.PAPERName2
	SET ClsOUTCorrespondant.Address1 = PAPerson.PAPERStNameLine1
	SET ClsOUTCorrespondant.Address2 = PAPerson.PAPERAddress2
	SET:(PAPerson.PAPERZipDR '= $$$NULLOREF) ClsOUTCorrespondant.ZIPCode = PAPerson.PAPERZipDR.CTZIPCode
	SET ClsOUTCorrespondant.City = PAPerson.PAPERForeignAddress
	SET ClsOUTCorrespondant.Phone = PAPerson.PAPERTelH
	SET ClsOUTCorrespondant.PhonePro = PAPerson.PAPERTelO
	SET ClsOUTCorrespondant.MobilePhone = PAPerson.PAPERMobPhone
	SET ClsOUTCorrespondant.Email = PAPerson.PAPEREmail
	SET ClsOUTCorrespondant.Fax = PAPerson.PAPERFax
	
	SET Retour = $$$TRUE
	GOTO CorrespGetPatientFin
CorrespGetPatientError
	SET $ZTRAP = ""
	SET ClsINOUTContext.Error = $ZERROR
	DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError($ZERROR)
CorrespGetPatientFin
	QUIT Retour
]]></Implementation>
</Method>

<Method name="CorrespGetFamilyDoctor">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&ClsINOUTContext:Region.FRXX.ClinicomLink.cli.Wrd.ClassContext,strINPatientId:%String,&ClsOUTCorrespondant:Region.FRXX.ClinicomLink.cli.Wrd.ClassCorrespondant]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	/*
W ##class(YYY).CorrespGetFamilyDoctor()
	*/
	SET $ZTRAP = "CorrespGetFamilyDoctorError"
	SET Retour = $$$FALSE
	
	SET PAPerson = ##class(User.PAPerson).%OpenId(strINPatientId, 0, .sc)
	IF $$$ISERR(sc)
	{
		SET ^TQLBO0015("sc") = sc
		SET ClsINOUTContext.Error = $System.Status.GetErrorText(sc)
		GOTO CorrespGetFamilyDoctorFin
	}

	IF PAPerson.PAPERFamilyDoctorDR = $$$NULLOREF
	{
		SET Retour = $$$TRUE
		GOTO CorrespGetFamilyDoctorFin
	}
	
	SET ClsOUTCorrespondant = ##class(Region.FRXX.ClinicomLink.cli.Wrd.ClassCorrespondant).%New()
	SET ClsOUTCorrespondant.TypeCorrespondant = 4 // Médecin de famille
	SET ClsOUTCorrespondant.CorrespId = PAPerson.PAPERFamilyDoctorDR.%Id()
	SET ClsOUTCorrespondant.Qualite = PAPerson.PAPERFamilyDoctorDR.REFDTitle
	SET ClsOUTCorrespondant.Title = PAPerson.PAPERFamilyDoctorDR.REFDTitleDR
	SET ClsOUTCorrespondant.FirstName = PAPerson.PAPERFamilyDoctorDR.REFDDesc
	SET ClsOUTCorrespondant.LastName = PAPerson.PAPERFamilyDoctorDR.REFDForename
	IF PAPerson.PAPERFamilyDoctorDR.REFDAddress '= $$$NULLOREF
	{
		SET:(PAPerson.PAPERFamilyDoctorDR.REFDAddress.Count() >= 1) ClsOUTCorrespondant.Address1 = PAPerson.PAPERFamilyDoctorDR.REFDAddress.GetAt(1)
		SET:(PAPerson.PAPERFamilyDoctorDR.REFDAddress.Count() >= 2) ClsOUTCorrespondant.Address2 = PAPerson.PAPERFamilyDoctorDR.REFDAddress.GetAt(2)
		SET:(PAPerson.PAPERFamilyDoctorDR.REFDAddress.Count() >= 3) ClsOUTCorrespondant.Address3 = PAPerson.PAPERFamilyDoctorDR.REFDAddress.GetAt(3)
	}
	SET:(PAPerson.PAPERFamilyDoctorDR.REFDCTZIPDR '= $$$NULLOREF) ClsOUTCorrespondant.ZIPCode = PAPerson.PAPERFamilyDoctorDR.REFDCTZIPDR.CTZIPCode
	SET:(PAPerson.PAPERFamilyDoctorDR.REFDCITYDR '= $$$NULLOREF) ClsOUTCorrespondant.City = PAPerson.PAPERFamilyDoctorDR.REFDCITYDR.CTCITDesc
	SET ClsOUTCorrespondant.Phone = PAPerson.PAPERFamilyDoctorDR.REFDPhone
	//SET ClsOUTCorrespondant.PhonePro = PAPerson.PAPERTelO
	//SET ClsOUTCorrespondant.MobilePhone = PAPerson.PAPERMobPhone
	SET ClsOUTCorrespondant.Email = PAPerson.PAPERFamilyDoctorDR.REFDEmail
	SET ClsOUTCorrespondant.Fax = PAPerson.PAPERFamilyDoctorDR.REFDFax
	
	SET Retour = $$$TRUE
	GOTO CorrespGetFamilyDoctorFin
CorrespGetFamilyDoctorError
	SET $ZTRAP = ""
	SET ClsINOUTContext.Error = $ZERROR
	DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError($ZERROR)
CorrespGetFamilyDoctorFin
	QUIT Retour
]]></Implementation>
</Method>

<Method name="CorrespGetTempAddress">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&ClsINOUTContext:Region.FRXX.ClinicomLink.cli.Wrd.ClassContext,strINTempAddressId:%String,&ClsOUTCorrespondant:Region.FRXX.ClinicomLink.cli.Wrd.ClassCorrespondant]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	/*
W ##class(Region.FRXX.ClinicomLink.WebServices.Wrd.ClassDocumentsServices).GetDefaultContext(.ClsContext)
// Pour .91, T2015-FRXX-SUP
W ##class(Region.FRXX.ClinicomLink.WebServices.Wrd.ClassDocumentsServices).CorrespGetFamilyDoctor(.ClsContext, 16,.ClsCorrespondant)
zw a

	*/
	SET $ZTRAP = "CorrespGetTempAddressError"
	SET Retour = $$$FALSE
	SET strQuery = "SELECT %NOLOCK *, ADDR_City_DR->CTCIT_Desc, ADDR_Zip_DR->CTZIP_Code, ADDR_AddressType_DR->CTADR_Desc, ADDR_ParRef->PAPER_Title_DR->TTL_Desc, ADDR_ParRef->PAPER_Name, ADDR_ParRef->PAPER_Name2 FROM SQLUser.PA_TempAddress WHERE ADDR_RowId=?"

	SET rset = ##class(%Library.ResultSet).%New()
	SET sc = rset.Prepare(strQuery)
	IF $$$ISERR(sc)
	{
		SET strBuffer = $$$FormatText("Erreur Prepare pour %1: %2", strQuery, $SYSTEM.Status.GetErrorText(sc))
		SET ClsINOUTContext.Error = strBuffer
		DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError(strBuffer)
		GOTO CorrespGetTempAddressFin
	}
	SET sc = rset.Execute(strINTempAddressId)
	IF $$$ISERR(sc)
	{
		SET strBuffer = $$$FormatText("Erreur Execute pour %1: %2", strQuery, $SYSTEM.Status.GetErrorText(sc))
		SET ClsINOUTContext.Error = strBuffer
		DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError(strBuffer)
		GOTO CorrespGetTempAddressFin
	}
	WHILE rset.Next(.sc)
	{
		QUIT:$$$ISERR(sc)
		SET ClsOUTCorrespondant = ##class(Region.FRXX.ClinicomLink.cli.Wrd.ClassCorrespondant).%New()
		SET ClsOUTCorrespondant.TypeCorrespondant = 2 // Patient autres adresses
		SET ClsOUTCorrespondant.CorrespId = rset.GetDataByName("ADDR_RowId")
		SET ClsOUTCorrespondant.AddressType = rset.GetDataByName("CTADR_Desc")
		SET ClsOUTCorrespondant.Qualite = rset.GetDataByName("TTL_Desc")
		SET ClsOUTCorrespondant.FirstName = rset.GetDataByName("PAPER_Name")
		SET ClsOUTCorrespondant.LastName = rset.GetDataByName("PAPER_Name2")
		SET ClsOUTCorrespondant.Address1 = $LISTGET(rset.GetDataByName("ADDR_Street"), 1)
		SET ClsOUTCorrespondant.Address2 = $LISTGET(rset.GetDataByName("ADDR_Street2"), 1)
		SET ClsOUTCorrespondant.ZIPCode = rset.GetDataByName("CTZIP_Code")
		SET ClsOUTCorrespondant.City = rset.GetDataByName("CTCIT_Desc")
		SET ClsOUTCorrespondant.Phone = rset.GetDataByName("ADDR_Phone")
	}
	IF $$$ISERR(sc)
	{
		SET strBuffer = $$$FormatText("Erreur Next pour %1: %2", strQuery, $SYSTEM.Status.GetErrorText(sc))
		SET ClsINOUTContext.Error = strBuffer
		DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError(strBuffer)
		GOTO CorrespGetTempAddressError
	}

	SET Retour = $$$TRUE
	GOTO CorrespGetTempAddressFin
CorrespGetTempAddressError
	SET $ZTRAP = ""
	SET ClsINOUTContext.Error = $ZERROR
	DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError($ZERROR)
CorrespGetTempAddressFin
	$$$CLOSERSET(rset)
	QUIT Retour
]]></Implementation>
</Method>

<Method name="CorrespGetNok">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&ClsINOUTContext:Region.FRXX.ClinicomLink.cli.Wrd.ClassContext,strINNokId:%String,&ClsOUTCorrespondant:Region.FRXX.ClinicomLink.cli.Wrd.ClassCorrespondant]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	/*
W ##class(Region.FRXX.ClinicomLink.WebServices.Wrd.ClassDocumentsServices).GetDefaultContext(.ClsContext)
// Pour .91, T2015-FRXX-SUP
W ##class(Region.FRXX.ClinicomLink.WebServices.Wrd.ClassDocumentsServices).CorrespGetNok(.ClsContext, 16, "16||3", .ClsCorrespondant)
zw a

	*/
	SET $ZTRAP = "CorrespGetNokError"
	SET Retour = $$$FALSE

	SET strQuery = "SELECT %NOLOCK *, NOK_Zip_DR->CTZIP_Code, NOK_ContactType_DR->CONTTP_Desc, NOK_Title_DR->TTL_Desc from SQLUser.PA_Nok WHERE NOK_RowId=?"

	SET rset = ##class(%Library.ResultSet).%New()
	SET sc = rset.Prepare(strQuery)
	IF $$$ISERR(sc)
	{
		SET strBuffer = $$$FormatText("Erreur Prepare pour %1: %2", strQuery, $SYSTEM.Status.GetErrorText(sc))
		SET ClsINOUTContext.Error = strBuffer
		DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError(strBuffer)
		GOTO CorrespGetNokFin
	}
	SET sc = rset.Execute(strINNokId)
	IF $$$ISERR(sc)
	{
		SET strBuffer = $$$FormatText("Erreur Execute pour %1: %2", strQuery, $SYSTEM.Status.GetErrorText(sc))
		SET ClsINOUTContext.Error = strBuffer
		DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError(strBuffer)
		GOTO CorrespGetNokFin
	}
	WHILE rset.Next(.sc)
	{
		QUIT:$$$ISERR(sc)
		SET ClsOUTCorrespondant = ##class(Region.FRXX.ClinicomLink.cli.Wrd.ClassCorrespondant).%New()
		SET ClsOUTCorrespondant.TypeCorrespondant = 3 // Patient personnes à prévenir
		SET ClsOUTCorrespondant.CorrespId = rset.GetDataByName("NOK_RowId")
		SET ClsOUTCorrespondant.Qualite = rset.GetDataByName("TTL_Desc")
		SET ClsOUTCorrespondant.FirstName = rset.GetDataByName("NOK_Name")
		SET ClsOUTCorrespondant.LastName = rset.GetDataByName("NOK_Name2")
		SET ClsOUTCorrespondant.Address1 = rset.GetDataByName("NOK_StNameLine1")
		SET ClsOUTCorrespondant.Address2 = rset.GetDataByName("NOK_Address2")
		SET ClsOUTCorrespondant.ZIPCode = rset.GetDataByName("CTZIP_Code")
		SET ClsOUTCorrespondant.City = rset.GetDataByName("NOK_ForeignCity")
		SET ClsOUTCorrespondant.Phone = rset.GetDataByName("NOK_TelH")
		SET ClsOUTCorrespondant.MobilePhone = rset.GetDataByName("NOK_MobPhone")
		SET ClsOUTCorrespondant.PhonePro = rset.GetDataByName("NOK_TelO")
		SET ClsOUTCorrespondant.Fax = rset.GetDataByName("NOK_FaxNumber")
		SET ClsOUTCorrespondant.Email = rset.GetDataByName("NOK_Email")
		SET ClsOUTCorrespondant.Tag = rset.GetDataByName("CONTTP_Desc")
	}
	IF $$$ISERR(sc)
	{
		SET strBuffer = $$$FormatText("Erreur Next pour %1: %2", strQuery, $SYSTEM.Status.GetErrorText(sc))
		SET ClsINOUTContext.Error = strBuffer
		DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError(strBuffer)
		GOTO CorrespGetNokFin
	}
	$$$CLOSERSET(rset)

	SET Retour = $$$TRUE
	GOTO CorrespGetNokFin
CorrespGetNokError
	SET $ZTRAP = ""
	SET ClsINOUTContext.Error = $ZERROR
	DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError($ZERROR)
CorrespGetNokFin
	$$$CLOSERSET(rset)
	QUIT Retour
]]></Implementation>
</Method>

<Method name="CorrespGetAdmRefDoc">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&ClsINOUTContext:Region.FRXX.ClinicomLink.cli.Wrd.ClassContext,strINAdmRefDocId:%String,&ClsOUTCorrespondant:Region.FRXX.ClinicomLink.cli.Wrd.ClassCorrespondant]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	/*
W ##class(Region.FRXX.ClinicomLink.WebServices.Wrd.ClassDocumentsServices).GetDefaultContext(.ClsContext)
// Pour .91, T2015-FRXX-SUP
W ##class(Region.FRXX.ClinicomLink.WebServices.Wrd.ClassDocumentsServices).CorrespGetFamilyDoctor(.ClsContext, 16,.ClsCorrespondant)
zw a

	*/
	SET $ZTRAP = "CorrespGetAdmRefDocError"
	SET Retour = $$$FALSE

	SET strQuery = "SELECT %NOLOCK *, REFD_RefDoc_DR->REFD_Desc, REFD_RefDoc_DR->REFD_Title, REFD_RefDoc_DR->REFD_Title_DR, REFD_RefDoc_DR->REFD_Forename, REFD_RefDoc_DR->REFD_Address, REFD_RefDoc_DR->REFD_CTZIP_DR->CTZIP_Code, REFD_RefDoc_DR->REFD_CITY_DR->CTCIT_Desc, REFD_RefDoc_DR->REFD_Phone, REFD_RefDoc_DR->REFD_MobilePhone, REFD_RefDoc_DR->REFD_Email, REFD_RefDoc_DR->REFD_Fax from SQLUser.PA_AdmRefDoc WHERE REFD_RowId=?"

	SET rset = ##class(%Library.ResultSet).%New()
	SET sc = rset.Prepare(strQuery)
	IF $$$ISERR(sc)
	{
		SET strBuffer = $$$FormatText("Erreur Prepare pour %1: %2", strQuery, $SYSTEM.Status.GetErrorText(sc))
		SET ClsINOUTContext.Error = strBuffer
		DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError(strBuffer)
		GOTO CorrespGetAdmRefDocFin
	}
	SET sc = rset.Execute(strINAdmRefDocId)
	IF $$$ISERR(sc)
	{
		SET strBuffer = $$$FormatText("Erreur Execute pour %1: %2", strQuery, $SYSTEM.Status.GetErrorText(sc))
		SET ClsINOUTContext.Error = strBuffer
		DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError(strBuffer)
		GOTO CorrespGetAdmRefDocFin
	}
	WHILE rset.Next(.sc)
	{
		QUIT:$$$ISERR(sc)
		SET ClsOUTCorrespondant = ##class(Region.FRXX.ClinicomLink.cli.Wrd.ClassCorrespondant).%New()
		SET ClsOUTCorrespondant.TypeCorrespondant = 5 // Médecins correspondants
		SET ClsOUTCorrespondant.CorrespId = rset.GetDataByName("REFD_RowId")
		SET ClsOUTCorrespondant.Qualite = rset.GetDataByName("REFD_Title")
		SET ClsOUTCorrespondant.Qualite = rset.GetDataByName("REFD_Title")
		SET ClsOUTCorrespondant.Title = rset.GetDataByName("REFD_Title_DR")
		SET ClsOUTCorrespondant.FirstName = rset.GetDataByName("REFD_Desc")
		SET ClsOUTCorrespondant.LastName = rset.GetDataByName("REFD_Forename")
		SET LB = rset.GetDataByName("REFD_Address")
		IF ($LISTVALID(LB)) && (LB '= "")
		{
			SET:($LISTLENGTH(LB) >= 1) ClsOUTCorrespondant.Address2 = $LISTGET(LB, 1)
			SET:($LISTLENGTH(LB) >= 2) ClsOUTCorrespondant.Address1 = $LISTGET(LB, 2)
			SET:($LISTLENGTH(LB) >= 3) ClsOUTCorrespondant.Address3 = $LISTGET(LB, 3)
		}
		SET ClsOUTCorrespondant.ZIPCode = rset.GetDataByName("CTZIP_Code")
		SET ClsOUTCorrespondant.City = rset.GetDataByName("CTCIT_Desc")
		SET ClsOUTCorrespondant.Phone = rset.GetDataByName("REFD_Phone")
		SET ClsOUTCorrespondant.MobilePhone = rset.GetDataByName("REFD_MobilePhone")
		SET ClsOUTCorrespondant.Fax = rset.GetDataByName("REFD_Fax")
		//SET ClsOUTCorrespondant.PhonePro = rset.GetDataByName("NOK_TelO")
		SET ClsOUTCorrespondant.Email = rset.GetDataByName("REFD_Email")
	}
	IF $$$ISERR(sc)
	{
		SET strBuffer = $$$FormatText("Erreur Next pour %1: %2", strQuery, $SYSTEM.Status.GetErrorText(sc))
		SET ClsINOUTContext.Error = strBuffer
		DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError(strBuffer)
		GOTO CorrespGetAdmRefDocFin
	}

	SET Retour = $$$TRUE
	GOTO CorrespGetAdmRefDocFin
CorrespGetAdmRefDocError
	SET $ZTRAP = ""
	SET ClsINOUTContext.Error = $ZERROR
	DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError($ZERROR)
CorrespGetAdmRefDocFin
	$$$CLOSERSET(rset)
	QUIT Retour
]]></Implementation>
</Method>

<Method name="WardGetAll">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&ClsINOUTContext:Region.FRXX.ClinicomLink.cli.Wrd.ClassContext,&ClsOUTListofWards:Region.FRXX.ClinicomLink.cli.Wrd.ClassListofWards]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	/*
W ##class(Region.FRXX.ClinicomLink.WebServices.Wrd.ClassDocumentsServices).GetDefaultContext(.ClsContext)
// Pour .91, T2015-FRXX-SUP
W ##class(Region.FRXX.ClinicomLink.WebServices.Wrd.ClassDocumentsServices).WardGetAll(.ClsContext, .ClsOUTListofWards)
	*/
	SET $ZTRAP = "WardGetAllError"
	#DIM rset As %Library.ResultSet
	#DIM strQuery As %String
	#DIM sc As %Library.Status

	SET Retour = $$$FALSE

	SET ClsOUTListofWards = ##class(Region.FRXX.ClinicomLink.cli.Wrd.ClassListofWards).%New()
	
	SET strQuery = "SELECT %NOLOCK CTLOC_Code, CTLOC_Desc from SQLUser.CT_Loc WHERE CTLOC_Code LIKE '%_US'"

	SET rset = ##class(%Library.ResultSet).%New()
	SET sc = rset.Prepare(strQuery)
	IF $$$ISERR(sc)
	{
		SET strBuffer = $$$FormatText("Erreur Prepare pour %1: %2", strQuery, $SYSTEM.Status.GetErrorText(sc))
		SET ClsINOUTContext.Error = strBuffer
		DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError(strBuffer)
		GOTO WardGetAllFin
	}
	SET sc = rset.Execute()
	IF $$$ISERR(sc)
	{
		SET strBuffer = $$$FormatText("Erreur Execute pour %1: %2", strQuery, $SYSTEM.Status.GetErrorText(sc))
		SET ClsINOUTContext.Error = strBuffer
		DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError(strBuffer)
		GOTO WardGetAllFin
	}
	WHILE rset.Next(.sc)
	{
		QUIT:$$$ISERR(sc)
		SET ClsWard = ##class(Region.FRXX.ClinicomLink.cli.Wrd.ClassWard).%New()
		SET ClsWard.Code = rset.GetDataByName("CTLOC_Code")
		SET ClsWard.Description = rset.GetDataByName("CTLOC_Desc")
		DO ClsOUTListofWards.Insert(ClsWard)
		SET ClsWard = $$$NULLOREF
	}
	IF $$$ISERR(sc)
	{
		SET strBuffer = $$$FormatText("Erreur Next pour %1: %2", strQuery, $SYSTEM.Status.GetErrorText(sc))
		SET ClsINOUTContext.Error = strBuffer
		DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError(strBuffer)
		GOTO WardGetAllFin
	}

	SET Retour = $$$TRUE
	GOTO WardGetAllFin
WardGetAllError
	SET $ZTRAP = ""
	SET ClsINOUTContext.Error = $ZERROR
	DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError($ZERROR)
WardGetAllFin
	$$$CLOSERSET(rset)
	QUIT Retour
]]></Implementation>
</Method>

<Method name="CorrespondantsGet">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&ClsINOUTContext:Region.FRXX.ClinicomLink.cli.Wrd.ClassContext,strINPatientId:%String,strINEpisodeId:%String,strINCorrespondants:%String,&ClsOUTCorrespondants:Region.FRXX.ClinicomLink.cli.Wrd.ClassListofCorrespondants]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	/*
W ##class(Region.FRXX.ClinicomLink.WebServices.Wrd.ClassDocumentsServices).GetDefaultContext(.ClsContext)
// Pour .91, T2015-FRXX-SUP
W ##class(Region.FRXX.ClinicomLink.WebServices.Wrd.ClassDocumentsServices).CorrespondantsGet(.ClsContext, 16, 10, "1_16_1_0_~4_2444_1_0_~2_16||3_1_0_~3_16||3_1_1_~5_10||2_1_0_~5_10||4_1_0_~", .ClsOUTCorrespondants)
FOR I=1:1:ClsOUTCorrespondants.Count() { SET a = ClsOUTCorrespondants.GetAt(I) zw a }
FOR I=1:1:ClsOUTCorrespondants.Count() { SET a = ClsOUTCorrespondants.GetAt(I) w a.TypeCorrespondant  _ " => " _ a.CorrespId, ! }
	*/
	SET $ZTRAP = "CorrespondantsGetError"
	#DIM rset As %Library.ResultSet
	#DIM strQuery As %String
	#DIM sc As %Library.Status

	SET Retour = $$$FALSE
	DO ClsINOUTContext.Reset()
	
	SET strINCorrespondants = $GET(strINCorrespondants, "")
	SET ClsOUTCorrespondants = ##class(Region.FRXX.ClinicomLink.cli.Wrd.ClassListofCorrespondants).%New()
	GOTO:(strINCorrespondants = "") CorrespondantsGetFin

	SET arrCorresp = $LISTFROMSTRING(strINCorrespondants, "~")
	SET ptr = 0
	WHILE $LISTNEXT(arrCorresp, ptr, value)
	{
		SET strTypeCorresp = $PIECE(value, "_", 1)
		SET strCodeCorresp = $PIECE(value, "_", 2)
		IF strTypeCorresp = 1 // Patient
		{
			IF ..CorrespGetPatient(.ClsINOUTContext, strINPatientId, .ClsCorrespondant)
			{
				DO:(ClsCorrespondant '= $$$NULLOREF) ClsOUTCorrespondants.Insert(ClsCorrespondant)
				SET ClsCorrespondant = $$$NULLOREF
			}
			ELSE
			{
				GOTO CorrespondantsGetFin
			}
		}
		ELSEIF strTypeCorresp = 2 // Patient autres adresses
		{
			IF ..CorrespGetTempAddress(.ClsINOUTContext, strCodeCorresp, .ClsCorrespondant)
			{
				DO:(ClsCorrespondant '= $$$NULLOREF) ClsOUTCorrespondants.Insert(ClsCorrespondant)
				SET ClsCorrespondant = $$$NULLOREF
			}
			ELSE
			{
				GOTO CorrespondantsGetFin
			}
		}
		ELSEIF strTypeCorresp = 3 // Patient personnes à prévenir
		{
			IF ..CorrespGetNok(.ClsINOUTContext, strCodeCorresp, .ClsCorrespondant)
			{
				DO:(ClsCorrespondant '= $$$NULLOREF) ClsOUTCorrespondants.Insert(ClsCorrespondant)
				SET ClsCorrespondant = $$$NULLOREF
			}
			ELSE
			{
				GOTO CorrespondantsGetFin
			}
		}
		ELSEIF strTypeCorresp = 4 // Médecin de famille
		{
			IF ..CorrespGetFamilyDoctor(.ClsINOUTContext, strINPatientId, .ClsCorrespondant)
			{
				DO:(ClsCorrespondant '= $$$NULLOREF) ClsOUTCorrespondants.Insert(ClsCorrespondant)
				SET ClsCorrespondant = $$$NULLOREF
			}
			ELSE
			{
				GOTO CorrespondantsGetFin
			}
		}
		ELSEIF strTypeCorresp = 5 // Médecins correspondants Extérieur
		{
			IF ..CorrespGetAdmRefDoc(.ClsINOUTContext, strCodeCorresp, .ClsCorrespondant)
			{
				DO:(ClsCorrespondant '= $$$NULLOREF) ClsOUTCorrespondants.Insert(ClsCorrespondant)
				SET ClsCorrespondant = $$$NULLOREF
			}
			ELSE
			{
				GOTO CorrespondantsGetFin
			}
		}
		ELSEIF strTypeCorresp = 6 // Médecins correspondants Extérieur
		{
			IF ..GetDoctorExtByCodeAsCorresp(.ClsINOUTContext, strCodeCorresp, .ClsCorrespondant)
			{
				DO:(ClsCorrespondant '= $$$NULLOREF) ClsOUTCorrespondants.Insert(ClsCorrespondant)
				SET ClsCorrespondant = $$$NULLOREF
			}
			ELSE
			{
				GOTO CorrespondantsGetFin
			}
		}
		ELSEIF strTypeCorresp = 7 // Médecins correspondants Etablissement
		{
			IF ..GetDoctorEtabByCodeAsCorresp(.ClsINOUTContext, strCodeCorresp, .ClsCorrespondant)
			{
				DO:(ClsCorrespondant '= $$$NULLOREF) ClsOUTCorrespondants.Insert(ClsCorrespondant)
				SET ClsCorrespondant = $$$NULLOREF
			}
			ELSE
			{
				GOTO CorrespondantsGetFin
			}
		}
	}

	SET Retour = $$$TRUE
	GOTO CorrespondantsGetFin
CorrespondantsGetError
	SET $ZTRAP = ""
	SET ClsINOUTContext.Error = $ZERROR
	DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError($ZERROR)
CorrespondantsGetFin
	QUIT Retour
]]></Implementation>
</Method>

<Method name="SearchByRBResource">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&ClsINOUTContext:Region.FRXX.ClinicomLink.cli.Wrd.ClassContext,ClsINPatientSearchByRBResource:Region.FRXX.ClinicomLink.cli.PatS.ClassPatientSearchByRBResource,&ClsOUTListofPatients:Region.FRXX.ClinicomLink.cli.Pat.ClassListofPatientsAppt]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	/*
Q  K
S ClsContext = ##class(Region.FRXX.ClinicomLink.cli.Wrd.ClassContext).%New()
S ClsContext.Username="cwssms"
S ClsContext.UserId="649"
S ClsContext.HospitalId=""

S ClsINPatientSearchByRBResource = ##class(Region.FRXX.ClinicomLink.cli.PatS.ClassPatientSearchByRBResource).%New()
S ClsINPatientSearchByRBResource.ResourceCode = "Ben B. JACOBS" // "Docteur Ben B. JACOBS"
S ClsINPatientSearchByRBResource.Location = "DCD1"
S ClsINPatientSearchByRBResource.StartDate = "01/01/2011"
S ClsINPatientSearchByRBResource.EndDate = "08/09/2014"

S ClsListofPatients = ##class(Region.FRXX.ClinicomLink.cli.Pat.ClassListofPatients).%New()
W ##class(Region.FRXX.ClinicomLink.WebServices.Wrd.ClassDocumentsServices).SearchByRBResource(.ClsContext, ClsINPatientSearchByRBResource, .ClsListofPatients)
w ClsListofPatients.Count()
d $system.OBJ.Dump(ClsListofPatients.GetAt(1))
	*/
	SET $ZTRAP = "SearchByRBResourceError"
	#DIM rset As %Library.ResultSet
	#DIM strQuery As %String
	#DIM sc As %Library.Status
	
	SET Retour = $$$FALSE
	SET:(ClsINOUTContext = $$$NULLOREF) ClsINOUTContext = ##class(Region.FRXX.ClinicomLink.cli.Wrd.ClassContext).%New()
	DO ClsINOUTContext.Reset()
	
	SET ClsINPatientSearchByRBResource.ResourceCode = $$$CVTSTR4WS(ClsINPatientSearchByRBResource.ResourceCode)
	SET ClsINPatientSearchByRBResource.Location = $$$CVTSTR4WS(ClsINPatientSearchByRBResource.Location)
	SET ClsINPatientSearchByRBResource.StartDate = $$$CVTSTR4WS(ClsINPatientSearchByRBResource.StartDate)
	SET ClsINPatientSearchByRBResource.EndDate = $$$CVTSTR4WS(ClsINPatientSearchByRBResource.EndDate)
	SET ClsINPatientSearchByRBResource.ApptStatus = $$$CVTSTR4WS(ClsINPatientSearchByRBResource.ApptStatus)

	set (ResourceId, ResourceIds, Sep) = ""
	FOR I=1:1:$l(ClsINPatientSearchByRBResource.Location, ",")
	{
		set LocationId = ##class(web.CTLoc).GetIdFromCodeDescriptionHosp(ClsINPatientSearchByRBResource.Location)
		if LocationId '= ""
		{
			set ResourceId = ##class(web.RBResource).GetIdFromLocationAndRes(LocationId, ClsINPatientSearchByRBResource.ResourceCode)
			if ResourceId '= ""
			{
				set ResourceIds = ResourceIds _ Sep _ ResourceId
				set Sep = ","
			}
		}
	}
	set:(ResourceIds '= "") ResourceId = $LISTFROMSTRING(ResourceIds, ",")
	set StartDate = $zdh(ClsINPatientSearchByRBResource.StartDate, 4)
	set EndDate = $zdh(ClsINPatientSearchByRBResource.EndDate, 4)
	set ApptStatus = ClsINPatientSearchByRBResource.ApptStatus
	set:(ApptStatus = "") ApptStatus = "'P', 'A', 'I'"
	
	DO ClsOUTListofPatients.Clear()
	
	SET Retour = $$$FALSE
	SET strQuery = ""
	SET strQuery = strQuery _ "SELECT %NOLOCK APPT_RowId, APPT_DateComp, APPT_TimeComp, APPT_Status, APPT_SeenDate, "
	SET strQuery = strQuery _ "APPT_PAPMI_DR, APPT_PAPMI_DR->PAPMI_RowId->PAPER_Name, APPT_PAPMI_DR->PAPMI_RowId->PAPER_Name2,  "
	SET strQuery = strQuery _ "APPT_PAPMI_DR->PAPMI_RowId->PAPER_Name4, APPT_PAPMI_DR->PAPMI_RowId->PAPER_Dob, APPT_PAPMI_DR->PAPMI_No, "
	SET strQuery = strQuery _ "APPT_PAPMI_DR->PAPMI_RowId->PAPER_Sex_DR, "
	SET strQuery = strQuery _ "APPT_AS_ParRef->AS_RES_ParRef->RES_CTLOC_DR->CTLoc_Code AS CTLoc_Code, APPT_AS_ParRef->AS_RES_ParRef->RES_CTLOC_DR->CTLoc_Desc AS CTLoc_Desc, "
	SET strQuery = strQuery _ "APPT_Adm_DR, APPT_Adm_DR->PAADM_ADMNo "
	SET strQuery = strQuery _ "FROM SQLUser.RB_Appointment "
	SET strQuery = strQuery _ "WHERE (%INTERNAL(APPT_Status) IN ("  _ ApptStatus _ ")) AND "
	//SET strQuery = strQuery _ "(APPT_Status = ?) AND "
	SET strQuery = strQuery _ "(%INTERNAL APPT_DateComp >= ?) AND "
	SET strQuery = strQuery _ "(%INTERNAL APPT_DateComp <= ?) "
	SET:(ResourceIds '= "") strQuery = strQuery _ "AND (APPT_AS_ParRef->AS_RES_ParRef %INLIST ?) "
	SET strQuery = strQuery _ "ORDER BY APPT_DateComp, APPT_TimeComp"
	
	SET rset = ##class(%Library.ResultSet).%New()
	SET sc = rset.Prepare(strQuery)
	IF $$$ISERR(sc)
	{
		SET strBuffer = $$$FormatText("Erreur Prepare pour %1: %2", strQuery, $SYSTEM.Status.GetErrorText(sc))
		DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError(strBuffer)
		GOTO SearchByRBResourceFin
	}
	SET sc = rset.Execute(StartDate, EndDate, ResourceId)
	IF $$$ISERR(sc)
	{
		SET strBuffer = $$$FormatText("Erreur Execute pour %1: %2", strQuery, $SYSTEM.Status.GetErrorText(sc))
		DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError(strBuffer)
		GOTO SearchByRBResourceFin
	}
	WHILE rset.Next(.sc)
	{
		QUIT:$$$ISERR(sc)
			
		SET ClsPatient = ##class(Region.FRXX.ClinicomLink.cli.Pat.ClassPatientAppt).%New()
		SET ClsPatient.PatientId = rset.GetDataByName("APPT_PAPMI_DR")
		SET ClsPatient.FirstName = rset.GetDataByName("PAPER_Name")
		SET ClsPatient.LastName = rset.GetDataByName("PAPER_Name2")
		SET ClsPatient.MaidenName = rset.GetDataByName("PAPER_Name4")
		SET:(rset.GetDataByName("PAPER_Dob") '= "") ClsPatient.DateOfBirth = $ZDate(rset.GetDataByName("PAPER_Dob"), 8)
		SET ClsPatient.Sex = ##class(web.CTSex).GetCodeTranslatedFromIdPlusInternal(rset.GetDataByName("PAPER_Sex_DR"))
		SET ClsPatient.IPP = rset.GetDataByName("PAPMI_No")
		SET ClsPatient.Age = ##class(web.PAPerson).calculateAgeUnitsShow(ClsPatient.PatientId)
		SET ClsPatient.Episode = rset.GetDataByName("PAADM_ADMNo")
		SET ClsPatient.EpisodeId = rset.GetDataByName("APPT_Adm_DR")
		
		
		SET ClsPatient.ApptId = rset.Data("APPT_RowId")
		SET ClsPatient.ApptDate = rset.Data("APPT_DateComp")
		SET:(ClsPatient.ApptDate '= "") ClsPatient.ApptDate = $zd(ClsPatient.ApptDate, 4,, 2)
		SET ClsPatient.ApptTime = rset.Data("APPT_TimeComp")
		SET:(ClsPatient.ApptTime '= "") ClsPatient.ApptTime = $zt(ClsPatient.ApptTime, 2)
		SET ClsPatient.ApptStatus = rset.Data("APPT_Status")
		SET:(rset.Data("APPT_SeenDate") '= "") ClsPatient.ApptStatus = "V" // On crée un faux code, V  pour Vue par docteur
		SET ClsPatient.CTLocCode = rset.Data("CTLoc_Code")
		SET ClsPatient.CTLocDesc = rset.Data("CTLoc_Desc")


		DO ClsOUTListofPatients.Insert(ClsPatient)
		SET ClsPatient = ""
	}
	IF $$$ISERR(sc)
	{
		SET strBuffer = $$$FormatText("Erreur Next pour %1: %2", strQuery, $SYSTEM.Status.GetErrorText(sc))
		DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError(strBuffer)
		GOTO SearchByRBResourceFin
	}
	/*
	SET Retour = $$$TRUE
	GOTO SearchByRBResourceFin
	
	set:( ($DATA(%request) = 0) || (%request = $$$NULLOREF)) %request=##class(%CSP.Request).%New()
	set:( ($DATA(%session) = 0) || (%session = $$$NULLOREF)) %session=##class(%CSP.Session).%New($Job)
	do %session.Set("LOGON.USERID", ClsINOUTContext.UserId)  // 649
	do %session.Set("LOGON.USERCODE", ClsINOUTContext.Username) // cwssms
	do %session.Set("LOGON.USERNAME", ClsINOUTContext.Username) // cwssms
	do %session.Set("LOGON.GROUPID", ClsINOUTContext.GroupId) // 220
	do %session.Set("LOGON.CTLOCID", ClsINOUTContext.LocationId) // 1585
	do %session.Set("LOGON.SITECODE", ClsINOUTContext.SiteCode) // FRXX
	do %session.Set("LOGON.REGION", ClsINOUTContext.Region) // France
	do %session.Set("LOGON.LANGID", ClsINOUTContext.LanguageId) // 102
	do %session.Set("LOGON.HOSPID", ClsINOUTContext.HospitalId) // 19
	
	SET rset = ##class(%Library.ResultSet).%New("web.RBAppointment:FindPatAppts")
	//Query FindPatAppts(LocId As %String, ResId As %String, sdate As %String, edate As %String, status As %String, stime As %String, etime As %String, ServId As %String, SSServId As %String, PatientID As %String = "", HospID As %String = "", SessionId As %String = "", TSRTITM As %String, TSRTORD As %String, EBook As %String) As %Query
	// (CONTAINID = 0, ROWSPEC = "reg,name,res,date,stime,etime,service,status,apptId,statcode,surgdate,name2,name3,Remarks,RefPriority,transtodate,transtotime,EpiNumber,apptAdmId,AdmType,MRAdmid,PatId,MedRecNo,Location,Hospital,RSTVisitStatus,VIPStatus,name4,guarDate,SessTypeDesc,DOB,sex,apptPayor,apptplan,reasonDNA,name4,name5,name6,name7,name8,wtLstType,seenD,SeenT,reasonCanc,consultCat,seenByCarPrv,Outcome,TelH,reasOB,OEOrdItemID,UBRN,hasLetter,NationalID,apptTransReq,apptTransDesc,FamilyBooking,TransCount,Address,PostCode,PhoneMobile,ExtPrescNo,ExtPaperPrescNo,ExtDocFiscalCode")
	

	//LocId,ResId,sdate,edate,status,stime,etime,ServId,SSServId,PatientID,HospID,SessionID
	SET sc = rset.Execute(LocationId, ResourceId, StartDate, EndDate, "P", "", "", "", "", "", "", "")
	IF $$$ISERR(sc)
	{
		SET ClsINOUTContext.Error = ##class(%SYSTEM.Status).GetErrorText(sc)
		GOTO SearchByRBResourceFin
	}
	WHILE rset.Next(.sc)
	{
		QUIT:$$$ISERR(sc)
		
		//%Query(CONTAINID = 1, ROWSPEC = "ID,RegistrationNo,Name,Name2,Name3,Dob:%Date,Sex,Tel,Medicare,AddressLine1,City,Zip,Marital,Deceased,Address2,edob,mergereg,DVA,Name4:%String,Name5:%String,Name6:%String,Name7:%String,Name8:%String,PAPERAddress2:%String,PAPERID:%String,VIPStatus:%String,Occupation:%String,EmplNo:%String,PreferredContactMethod:%String,ReasonAttn:%String,fedob:%String,PatType:%String,dobalias:%String,ResidentNum:%String,PAPERFreeText1:%String,PAPERFreeText2:%String,DefPayor:%String,DefPayorId:%String,DefPlan:%String,DefPlanId:%String,Email:%String,MobilePhone:%String,FamilyDoc:%String,Segment:%String,Area:%String,MicroArea:%String,GovernCardNo:%String,ResidentNumSel:%String")
		//W rset.GetDataByName("Name"), " ; ", rset.GetDataByName("Name2"), " ; ", rset.GetDataByName("Dob"), " ; ", rset.GetDataByName("Sex"), " ; ", !
		
		SET ClsPatient = ##class(Region.FRXX.ClinicomLink.cli.Pat.ClassPatient).%New()
		SET ClsPatient.PatientId = rset.GetDataByName("PatId")
		SET ClsPatient.FirstName = rset.GetDataByName("name")
		SET ClsPatient.LastName = rset.GetDataByName("name2")
		SET ClsPatient.MaidenName = rset.GetDataByName("name4")
		SET:(rset.GetDataByName("DOB") '= "") ClsPatient.DateOfBirth = $ZDate(rset.GetDataByName("DOB"), 8)
		SET ClsPatient.Sex = ##class(web.CTSex).GetCodeFromDescription(rset.GetDataByName("sex"))
		SET ClsPatient.IPP = rset.GetDataByName("reg")
		SET ClsPatient.Age = ##class(web.PAPerson).calculateAgeUnitsShow(ClsPatient.PatientId)
		DO ClsOUTListofPatients.Insert(ClsPatient)
		SET ClsPatient = ""
		
	}
	IF $$$ISERR(sc)
	{
		SET ClsINOUTContext.Error = ##class(%SYSTEM.Status).GetErrorText(sc)
		GOTO SearchByRBResourceFin
	}
	*/
	SET Retour = $$$TRUE
	GOTO SearchByRBResourceFin
SearchByRBResourceError
	SET $ZTRAP = ""
	SET ClsINOUTContext.Error = $ZERROR
	S ^TQLBO015("SearchByRBResource $ZERROR") = $ZERROR
	DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError($ZERROR)
SearchByRBResourceFin
	$$$CLOSERSET(rset)
	QUIT Retour
]]></Implementation>
</Method>

<Method name="SetApptStatus">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&ClsINOUTContext:Region.FRXX.ClinicomLink.cli.Wrd.ClassContext,strINApptId:%String,strINApptStatus:%String]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	/*
Caption="Seen By Doctor"
ClassMethod="web.RBAppointment,websysSaveSeenDate,%request.Get(&quot;TEVENT&quot;),%request.Get(&quot;ApptID&quot;)"

Caption="Departed"
ClassMethod="web.RBAppointment,websysSaveApptStatus,%request.Get(&quot;TEVENT&quot;),%request.Get(&quot;ApptID&quot;),&quot;D&quot;"

Caption="Arrived"
ClassMethod="web.RBAppointment,websysSaveApptStatus,%request.Get(&quot;TEVENT&quot;),%request.Get(&quot;ApptID&quot;),&quot;A&quot;"

	*/
	SET $ZTRAP = "SetApptStatusError"
	SET Retour = $$$FALSE
	set Appt = ##class(User.RBAppointment).%OpenId(strINApptId, 0, .sc)
	if $$$ISERR(sc)
	{
		set ClsINOUTContext.Error = $System.Status.GetErrorText(sc)
		goto SetApptStatusFin
	}
	set Appt.APPTStatus = strINApptStatus
	set sc = Appt.%Save()
	if $$$ISERR(sc)
	{
		set ClsINOUTContext.Error = $System.Status.GetErrorText(sc)
		goto SetApptStatusFin
	}
	
	SET Retour = $$$TRUE
	GOTO SetApptStatusFin
SetApptStatusError
	SET $ZTRAP = ""
	SET ClsINOUTContext.Error = $ZERROR
	S ^TQLBO015("SetApptStatus $ZERROR") = $ZERROR
	DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError($ZERROR)
SetApptStatusFin
	QUIT Retour
]]></Implementation>
</Method>

<Method name="GetPackageName">
<ClassMethod>1</ClassMethod>
<FormalSpec>strINClassName:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	/*
W ##class(MXS.ClassAutoCreate).GetPackageName("MXS.ClassListofProjection")
	*/
	SET strOUTPackagename = ""
	SET lstFilename = $LISTFROMSTRING(strINClassName, ".")
	SET strSep = ""
	FOR I=1:1:$LISTLENGTH(lstFilename) - 1
	{
		SET strOUTPackagename = strOUTPackagename _ strSep _ $LIST(lstFilename, I)
		SET strSep = "."
	}
	QUIT strOUTPackagename
]]></Implementation>
</Method>

<Method name="Write4KSoap2">
<ClassMethod>1</ClassMethod>
<FormalSpec>strINTextToWrite:%String,intINCRToAdd:%Integer=-1,blnINGenerateFile:%Boolean=$$$FALSE,FileWriter:%Library.File</FormalSpec>
<Implementation><![CDATA[
	IF blnINGenerateFile
	{
		DO FileWriter.WriteLine(strINTextToWrite)
		FOR I=0:1:intINCRToAdd
		{
			DO FileWriter.WriteLine("")
		}
	}
	ELSE
	{
		WRITE strINTextToWrite, !
		FOR I=0:1:intINCRToAdd
		{
			WRITE !
		}
	}
]]></Implementation>
</Method>

<Method name="GetClassNameFromString">
<ClassMethod>1</ClassMethod>
<FormalSpec>strINClassName:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	SET lstFilename = $LISTFROMSTRING(strINClassName, ".")
	QUIT $LIST(lstFilename, $LISTLENGTH(lstFilename))
]]></Implementation>
</Method>

<Method name="GetParameterForListOf">
<ClassMethod>1</ClassMethod>
<FormalSpec>strINClassName:%String</FormalSpec>
<ReturnType>%Dictionary.ParameterDefinition</ReturnType>
<Implementation><![CDATA[
	SET strID = ""
	&sql(SELECT %ID 
		INTO :strID
		FROM %Dictionary.ParameterDefinition
		WHERE 	(%Dictionary.ParameterDefinition.Name='ELEMENTTYPE') AND
				(%Dictionary.ParameterDefinition.Parent=:strINClassName))
	If (SQLCODE = 0)
	{
		QUIT ##class(%Dictionary.ParameterDefinition).%OpenId(strID)
	}
	QUIT ""
]]></Implementation>
</Method>

<Method name="ConvertCacheTypeToKSoap2">
<ClassMethod>1</ClassMethod>
<FormalSpec>strINType:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	SET strINTypeUpper = $$$TOUPPER(strINType)
	IF strINTypeUpper = "%STRING" QUIT "String"
	IF strINTypeUpper = "%BOOLEAN" QUIT "Boolean"
	IF strINTypeUpper = "%INTEGER" QUIT "int"
	IF (strINTypeUpper = "%FLOAT") || (strINTypeUpper = "%XSD.FLOAT") QUIT "float"
	IF strINTypeUpper = "%XSD.DOUBLE" QUIT "Double"
	IF strINTypeUpper = "%XSD.UNSIGNEDBYTE" QUIT "Short"
	IF strINTypeUpper = "%TIMESTAMP" QUIT "Date"
	IF strINTypeUpper = "%LIBRARY.GLOBALBINARYSTREAM" QUIT "byte[]"
	IF strINTypeUpper = "%STATUS" QUIT "Object"
	QUIT ..GetJavaFullName(strINType)
]]></Implementation>
</Method>

<Method name="ConvertCacheTypeToKSoap2PropertyInfo">
<ClassMethod>1</ClassMethod>
<FormalSpec>strINType:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	SET strINTypeUpper = $$$TOUPPER(strINType)
	IF strINTypeUpper = "%STRING" QUIT "PropertyInfo.STRING_CLASS"
	IF strINTypeUpper = "%BOOLEAN" QUIT "PropertyInfo.BOOLEAN_CLASS"
	IF strINTypeUpper = "%INTEGER" QUIT "PropertyInfo.INTEGER_CLASS"
	IF (strINTypeUpper = "%FLOAT") || (strINTypeUpper = "%XSD.FLOAT") QUIT "Float.class"
	IF strINTypeUpper = "%XSD.DOUBLE" QUIT "PropertyInfo.OBJECT_CLASS"
	IF strINTypeUpper = "%XSD.UNSIGNEDBYTE" QUIT "PropertyInfo.OBJECT_CLASS"
	IF strINTypeUpper = "%TIMESTAMP" QUIT "PropertyInfo.OBJECT_CLASS"
	IF strINTypeUpper = "%STATUS" QUIT "PropertyInfo.OBJECT_CLASS"
	IF strINTypeUpper = "%LIBRARY.GLOBALBINARYSTREAM" QUIT "PropertyInfo.OBJECT_CLASS"
	QUIT "PropertyInfo.OBJECT_CLASS"
	QUIT strINType
]]></Implementation>
</Method>

<Method name="GetJavaFullName">
<ClassMethod>1</ClassMethod>
<FormalSpec>strINClassName:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	/*
W ##class(MXS.ClassAutoCreate).GetJavaFullName("MXS.ClassListofProjection")
	*/
	SET strPackageName = $$$TOLOWER(..GetPackageName(strINClassName))
	SET strClassName = ..GetClassNameFromString(strINClassName)
	QUIT strPackageName _ "." _ strClassName
]]></Implementation>
</Method>

<Method name="IsTypeObject">
<ClassMethod>1</ClassMethod>
<FormalSpec>TheType:%Dictionary.CacheClassname</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	IF (TheType = "%String") || (TheType = "%Integer") || (TheType = "%Boolean") QUIT $$$FALSE
	QUIT $$$TRUE
]]></Implementation>
</Method>

<Method name="ConvertCacheTypeToKSoap2Conversion">
<ClassMethod>1</ClassMethod>
<FormalSpec>strINType:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	SET strINTypeUpper = $$$TOUPPER(strINType)
	IF strINTypeUpper = "%STRING" QUIT "value.toString()"
	IF strINTypeUpper = "%BOOLEAN" QUIT "Boolean.parseBoolean(value.toString())"
	IF strINTypeUpper = "%INTEGER" QUIT "Integer.parseInt(value.toString())"
	IF (strINTypeUpper = "%FLOAT") || (strINTypeUpper = "%XSD.FLOAT") QUIT "Float.parseFloat(value.toString())"
	IF strINTypeUpper = "%XSD.DOUBLE" QUIT "Double.parseDouble(value.toString())"
	IF strINTypeUpper = "%XSD.UNSIGNEDBYTE" QUIT "Short.parseShort(value.toString())"
	IF strINTypeUpper = "%TIMESTAMP" QUIT "simpleDateFormat.parse(value.toString())"
	IF strINTypeUpper = "%STATUS" QUIT "value"
	IF strINTypeUpper = "%LIBRARY.GLOBALBINARYSTREAM" QUIT "value.toString().getBytes()"
	QUIT "(" _ ..GetJavaFullName(strINType) _ ")value"
]]></Implementation>
</Method>

<Method name="ConvertCacheTypeToKSoap2Conversion02">
<ClassMethod>1</ClassMethod>
<FormalSpec>strINCacheName:%String,strINType:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	//"try { this.%FIELD% = %CONSTRUCTORCONVERSION%; } catch (Exception e) { }" _ $CHAR(13, 10)
	SET strINTypeUpper = $$$TOUPPER(strINType)
	IF strINTypeUpper = "%STRING" QUIT "	try { this.%FIELD% = soapObject.getProperty(""" _ strINCacheName _ """).toString(); } catch (Exception e) { }" _ $CHAR(13, 10)
	IF strINTypeUpper = "%BOOLEAN" QUIT "	try { this.%FIELD% = Boolean.parseBoolean(soapObject.getProperty(""" _ strINCacheName _ """).toString()); } catch (Exception e) { }" _ $CHAR(13, 10)
	IF strINTypeUpper = "%INTEGER" QUIT "	try { this.%FIELD% = Integer.parseInt(soapObject.getProperty(""" _ strINCacheName _ """).toString()); } catch (Exception e) { }" _ $CHAR(13, 10)
	IF (strINTypeUpper = "%FLOAT") || (strINTypeUpper = "%XSD.FLOAT") QUIT "	try { this.%FIELD% = Float.parseFloat(soapObject.getProperty(""" _ strINCacheName _ """).toString()); } catch (Exception e) { }" _ $CHAR(13, 10)
	IF strINTypeUpper = "%XSD.DOUBLE" QUIT "	try { this.%FIELD% = Double.parseDouble(soapObject.getProperty(""" _ strINCacheName _ """).toString()); } catch (Exception e) { }" _ $CHAR(13, 10)
	IF strINTypeUpper = "%XSD.UNSIGNEDBYTE" QUIT "	try { this.%FIELD% = Short.parseShort(soapObject.getProperty(""" _ strINCacheName _ """).toString()); } catch (Exception e) { }" _ $CHAR(13, 10)
	IF strINTypeUpper = "%TIMESTAMP" QUIT "	try { SimpleDateFormat simpleDateFormat = new SimpleDateFormat(""yyyyMMdd""); this.%FIELD% = simpleDateFormat.parse(soapObject.getProperty(""" _ strINCacheName _ """).toString()); } catch (Exception e) { }" _ $CHAR(13, 10)
	IF strINTypeUpper = "%STATUS" QUIT "	try { this.%FIELD% = soapObject.getProperty(""" _ strINCacheName _ """); } catch (Exception e) { }" _ $CHAR(13, 10)
	IF strINTypeUpper = "%LIBRARY.GLOBALBINARYSTREAM" QUIT "	try { this.%FIELD% = Base64.decode(soapObject.getProperty(""" _ strINCacheName _ """).toString(), Base64.DEFAULT); } catch (Exception e) { }" _ $CHAR(13, 10)
	SET strClassName = ..GetClassNameFromString(strINCacheName)
	SET strJavaFullName = ..GetJavaFullName(strINType)
	QUIT "try { SoapObject soapObject01 = (SoapObject)soapObject.getProperty(""" _ strINCacheName _ """);" _ $CHAR(13, 10) _ "this." _ strINCacheName _ " = new " _ strJavaFullName _ "(soapObject01);} catch (Exception e) { }" _ $CHAR(13, 10)
	//QUIT "(" _ ..GetJavaFullName(strINType) _ ")soapObject.getProperty(""" _ strINCacheName _ """)"
]]></Implementation>
</Method>

<Method name="ConvertCacheNameToKSoap2ArgName">
<ClassMethod>1</ClassMethod>
<FormalSpec>strINCacheName:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	SET:($$$TOUPPER(strINCacheName) = "CLASS") strINCacheName="class1"
	
	QUIT $$$TOLOWER(strINCacheName)
]]></Implementation>
</Method>

<Method name="CreateClassForKSoap2">
<ClassMethod>1</ClassMethod>
<FormalSpec>strINClassName:%String,strINPackage:%String="",blnINGenerateFile:%Boolean=$$$FALSE,strINSerializableClass:%String="STD"</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	/*
D ##class(Region.FRXX.ClinicomLink.WebServices.Wrd.ClassDocumentsServices).CreateClassForKSoap2("Region.FRXX.ClinicomLink.cli.PatS.ClassPatientSearchByRBResource", "Region.FRXX.ClinicomLink.cli.PatS", "KSOAP")
D ##class(Region.FRXX.ClinicomLink.WebServices.Wrd.ClassDocumentsServices).CreateClassForKSoap2("Region.FRXX.ClinicomLink.cli.Pat.ClassPatientAppt", "Region.FRXX.ClinicomLink.cli.Pat", "KSOAP")
	*/
	SET (strProperties, strgetProperty, strgetPropertyInfo, strsetProperty, strConstructor, strConstructor01, strConstructor02) = ""
	IF '$DATA(strINClassName)
	{
		SET strINClassName = ""
	}
	IF strINClassName = ""
	{
		READ "Nom de la classe (sans .cls):", strINClassName
		IF (strINClassName = "") || ($$$TOUPPER(strINClassName) = "Q")
		{
			QUIT $$$FALSE
		}
		WRITE !
	}
	DO ##class(%Library.Utility).Replace(strINClassName, ".CLS", "", 0, .strINClassName)
	IF strINPackage = ""
	{
		SET strINPackage = $$$TOLOWER(..GetPackageName(strINClassName))
	}
	SET strModeleField = "public %TYPE% %FIELD%; // %CACHE_CLASSNAME%" _ $CHAR(13, 10)
	SET strgetPropertyModele = "		case %INDEX%:" _ $CHAR(13, 10) _ "			return %FIELD%;" _ $CHAR(13, 10)
	SET strsetPropertyModele = "		case %INDEX%:" _ $CHAR(13, 10) _ "			%FIELD% = %CONVERSION%;" _ $CHAR(13, 10) _"			break;" _ $CHAR(13, 10)
	SET strsetTIMESTAMPPropertyModele = "		case %INDEX%:" _ $CHAR(13, 10) _ "{ SimpleDateFormat simpleDateFormat = new SimpleDateFormat(""yyyyMMdd""); try {%FIELD% = %CONVERSION%; } catch (java.text.ParseException e) { e.printStackTrace(); }}" _ $CHAR(13, 10) _"			break;" _ $CHAR(13, 10)
	SET strgetPropertyInfoModele = "		case %INDEX%:" _ $CHAR(13, 10) _ "			info.type = %TYPEKSOAP2%;" _ $CHAR(13, 10) _ "			info.name = ""%FIELD%"";" _ $CHAR(13, 10) _ "			break;" _ $CHAR(13, 10)
	SET strReadINOUTDataModele = "%JAVAFIELD%.%FIELD% = soapObject.getProperty(""%FIELD%"").toString();" _ $CHAR(13, 10)
	SET strConstructor02Modele = "" //"try { this.%FIELD% = %CONSTRUCTORCONVERSION%; } catch (Exception e) { }" _ $CHAR(13, 10)
	IF 'blnINGenerateFile
	{
		WRITE "------------------------------------------------", !
	}
	Set cdef = ##class(%Dictionary.ClassDefinition).%OpenId(strINClassName)
	IF cdef = ""
	{
		QUIT
	}
	SET strClassName = ..GetClassNameFromString(strINClassName)
	SET FileWriter = $$$NULLOREF
	SET strFile = ""
	IF blnINGenerateFile
	{
		SET strFile = ##class(%Projection.AbstractProjection).getROOTDIR("", "ksoap2")
		SET strFile = strFile _ "/" _ $$$TOLOWER($REPLACE(strINPackage, ".", "/"))
		IF '##class(%Library.File).CreateDirectoryChain(strFile)
		{
			QUIT $$$FALSE
		}
		
		SET strFile = strFile _ "/" _ strClassName _ ".java"
		WRITE "Fichier: " _ strFile, !
		SET FileWriter = ##class(%Library.File).%New(strFile)
		DO FileWriter.Open("WNS")
		SET FileWriter.LineTerminator = $CHAR(13, 10)
	}
	SET strConstructor = "public " _ ..GetClassNameFromString(strClassName) _ "("
	DO ..Write4KSoap2("package " _ strINPackage _ ";", 1, blnINGenerateFile, FileWriter) // WRITE "package " _ strINPackage _ ";", !, !
	DO ..Write4KSoap2("// Export de " _ strINClassName _ ".CLS", , blnINGenerateFile, FileWriter) // WRITE "// Export de " _ strINClassName _ ".CLS", !
	DO ..Write4KSoap2("// DTTM: " _ $ZDATETIME($HOROLOG, 4), 1 , blnINGenerateFile, FileWriter) //WRITE "// DTTM: " _ $$$NOW, !
	DO ..Write4KSoap2("// NSP " _ $ZNSPACE, , blnINGenerateFile, FileWriter) //WRITE "// NSP " _ $ZNSPACE, !
	DO ..Write4KSoap2("// Commande :", , blnINGenerateFile, FileWriter) //WRITE "// Commande :", !
	DO ..Write4KSoap2("// D ##class(" _ ..%ClassName(1)  _ ").CreateClassForKSoap2(""" _ strINClassName _ """, """ _ strINPackage _ """, " _ blnINGenerateFile _ ", """ _ strINSerializableClass _ """)", , blnINGenerateFile, FileWriter)
	IF blnINGenerateFile
	{
		DO ..Write4KSoap2("// File: "_ strFile, 0, blnINGenerateFile, FileWriter)
	}
	//DO ..Write4KSoap2("", 1, blnINGenerateFile, FileWriter) //WRITE "// D ##class(MXS.ClassAutoCreate).CreateClassForKSoap2(""" _ strINClassName _ """)", !, !


	DO ..Write4KSoap2("import java.util.Date;", , blnINGenerateFile, FileWriter) //WRITE "import java.util.Date;", !
	DO ..Write4KSoap2("import java.text.SimpleDateFormat;", , blnINGenerateFile, FileWriter) //WRITE "import java.text.SimpleDateFormat;", !
	DO ..Write4KSoap2("import java.util.Vector;", , blnINGenerateFile, FileWriter) //WRITE "import java.util.Vector;", !
	DO ..Write4KSoap2("import android.net.ParseException;", , blnINGenerateFile, FileWriter) //WRITE "import android.net.ParseException;", !
	DO ..Write4KSoap2("import java.util.Hashtable;", , blnINGenerateFile, FileWriter) //WRITE "import java.util.Hashtable;", !
	set UseSerializationSTD = (","_strINSerializableClass_",") [ ",STD,"
	set UseSerializationKSOAP = (","_strINSerializableClass_",") [ ",KSOAP,"
	set:('UseSerializationSTD && 'UseSerializationKSOAP) UseSerializationKSOAP = $$$TRUE
	IF UseSerializationSTD
	{
		DO ..Write4KSoap2("import java.io.Serializable;", , blnINGenerateFile, FileWriter) //WRITE "import org.ksoap2.serialization.KvmSerializable;", !
	}
	IF UseSerializationKSOAP
	{
		DO ..Write4KSoap2("import org.ksoap2.serialization.KvmSerializable;", , blnINGenerateFile, FileWriter) //WRITE "import org.ksoap2.serialization.KvmSerializable;", !
	}
	
	DO ..Write4KSoap2("import org.ksoap2.serialization.PropertyInfo;", 1, blnINGenerateFile, FileWriter) //WRITE "import org.ksoap2.serialization.PropertyInfo;", !, !
	DO ..Write4KSoap2("import org.ksoap2.serialization.SoapObject;", , blnINGenerateFile, FileWriter) //WRITE "import org.ksoap2.serialization.SoapObject;", !
	DO ..Write4KSoap2("import android.util.Base64;", 1, blnINGenerateFile, FileWriter) //WRITE "import android.util.Base64;", !, !
	DO ..Write4KSoap2("import android.util.Log;", , blnINGenerateFile, FileWriter) //WRITE "import org.ksoap2.serialization.SoapObject;", !

	//DO ..Write4KSoap2("", 0, blnINGenerateFile, FileWriter) //
	//DO ..Write4KSoap2("", 0, blnINGenerateFile, FileWriter) //
	
	

	//Write cdef.Name,!
	SET Super = $LISTFROMSTRING(cdef.Super,",")
	FOR I=1:1:$LISTLENGTH(Super)
	{
		IF $LIST(Super, I) = "%Library.ListOfObjects"
		{
			SET IsList = $$$TRUE
			SET strELEMENTTYPE = ..GetParameterForListOf(strINClassName)
			SET strELEMENTTYPE = strELEMENTTYPE.Default
			SET strELEMENTTYPEPackage = ..GetPackageName(strELEMENTTYPE)
			SET strELEMENTTYPEClassName = ..GetClassNameFromString(strELEMENTTYPE)
			QUIT
		}
		ELSE
		{
			SET IsList = $$$FALSE
		}
	}
	IF IsList
	{
		set (strImplement, SepImpl) = ""
		IF UseSerializationSTD
		{
			set strImplement = "Serializable"
			set SepImpl = ", "
			//DO ..Write4KSoap2("public class " _ strClassName _ " extends Vector<" _ $$$TOLOWER(strELEMENTTYPEPackage) _ "." _ strELEMENTTYPEClassName _ "> implements Serializable", , blnINGenerateFile, FileWriter) //WRITE "public class " _ strClassName _ " extends Vector<String> implements KvmSerializable", !
		}
		IF UseSerializationKSOAP
		{
			set strImplement = "KvmSerializable"
			set SepImpl = ", "
			//DO ..Write4KSoap2("public class " _ strClassName _ " extends Vector<" _ $$$TOLOWER(strELEMENTTYPEPackage) _ "." _ strELEMENTTYPEClassName _ "> implements KvmSerializable", , blnINGenerateFile, FileWriter) //WRITE "public class " _ strClassName _ " extends Vector<String> implements KvmSerializable", !
		}
		DO ..Write4KSoap2("public class " _ strClassName _ " extends Vector<" _ $$$TOLOWER(strELEMENTTYPEPackage) _ "." _ strELEMENTTYPEClassName _ "> implements " _ strImplement _ "", , blnINGenerateFile, FileWriter) //WRITE "public class " _ strClassName _ " extends Vector<String> implements KvmSerializable", !
	}
	ELSE
	{
		set (strImplement, SepImpl) = ""
		IF UseSerializationSTD
		{
			set strImplement = "Serializable"
			set SepImpl = ", "
			//DO ..Write4KSoap2("public class " _ strClassName _ " extends Vector<" _ $$$TOLOWER(strELEMENTTYPEPackage) _ "." _ strELEMENTTYPEClassName _ "> implements Serializable", , blnINGenerateFile, FileWriter) //WRITE "public class " _ strClassName _ " extends Vector<String> implements KvmSerializable", !
		}
		IF UseSerializationKSOAP
		{
			set strImplement = strImplement _ SepImpl _ "KvmSerializable"
			set SepImpl = ", "
			//DO ..Write4KSoap2("public class " _ strClassName _ " extends Vector<" _ $$$TOLOWER(strELEMENTTYPEPackage) _ "." _ strELEMENTTYPEClassName _ "> implements " _ ", , blnINGenerateFile, FileWriter) //WRITE "public class " _ strClassName _ " extends Vector<String> implements KvmSerializable", !
		}
		DO ..Write4KSoap2("public class " _ strClassName _ " implements " _ strImplement, , blnINGenerateFile, FileWriter) //WRITE "public class " _ strClassName _ " implements " _ strImplement _ ", !
		
		/*IF strINSerializableClass = "STD"
		{
			DO ..Write4KSoap2("public class " _ strClassName _ " implements Serializable", , blnINGenerateFile, FileWriter) //WRITE "public class " _ strClassName _ " implements KvmSerializable", !
		}
		ELSE
		{
			DO ..Write4KSoap2("public class " _ strClassName _ " implements KvmSerializable", , blnINGenerateFile, FileWriter) //WRITE "public class " _ strClassName _ " implements KvmSerializable", !
		}*/
	}
	DO ..Write4KSoap2("{", , blnINGenerateFile, FileWriter) //WRITE "{", !
	DO ..Write4KSoap2("	private static final long serialVersionUID = " _ $RANDOM(123486432165) _ "L;", , blnINGenerateFile, FileWriter) //WRITE "{", !
	#DIM MyProp As %Dictionary.PropertyDefinition
	// get list of properties
	Set count = cdef.Properties.Count()
	For i = 1:1:count
	{
		SET MyProp = cdef.Properties.GetAt(i)
		CONTINUE:(MyProp.ServerOnly)
		SET NomProp = MyProp.Name
		
		SET blnIsObject = ..IsTypeObject(MyProp.Type)
		SET strType = ..ConvertCacheTypeToKSoap2(MyProp.Type)
		SET strData = strModeleField
		DO ##class(%Library.Utility).Replace(strData, "%TYPE%", strType, 0, .strData)
		DO ##class(%Library.Utility).Replace(strData, "%FIELD%", NomProp, 0, .strData)
		DO ##class(%Library.Utility).Replace(strData, "%CACHE_CLASSNAME%", MyProp.Type, 0, .strData)
		SET strProperties = strProperties _ strData
		
		SET strData = strgetPropertyModele
		SET strType = ..ConvertCacheTypeToKSoap2PropertyInfo(MyProp.Type)
		DO ##class(%Library.Utility).Replace(strData, "%INDEX%", (i - 1), 0, .strData)
		DO ##class(%Library.Utility).Replace(strData, "%FIELD%", NomProp, 0, .strData)
		SET strgetProperty = strgetProperty _ strData
		
		SET strData = strgetPropertyInfoModele
		SET strType = ..ConvertCacheTypeToKSoap2PropertyInfo(MyProp.Type)
		DO ##class(%Library.Utility).Replace(strData, "%INDEX%", (i - 1), 0, .strData)
		DO ##class(%Library.Utility).Replace(strData, "%FIELD%", NomProp, 0, .strData)
		DO ##class(%Library.Utility).Replace(strData, "%TYPEKSOAP2%", strType, 0, .strData)
		SET strgetPropertyInfo = strgetPropertyInfo _ strData
		
		IF $$$TOUPPER(MyProp.Type) = "%TIMESTAMP"
		{
			SET strData = strsetTIMESTAMPPropertyModele
		}
		ELSE
		{
			SET strData = strsetPropertyModele
		}
		SET strType = ..ConvertCacheTypeToKSoap2PropertyInfo(MyProp.Type)
		SET strConversion = ..ConvertCacheTypeToKSoap2Conversion(MyProp.Type)
		DO ##class(%Library.Utility).Replace(strData, "%INDEX%", (i - 1), 0, .strData)
		DO ##class(%Library.Utility).Replace(strData, "%FIELD%", NomProp, 0, .strData)
		DO ##class(%Library.Utility).Replace(strData, "%CONVERSION%", strConversion, 0, .strData)
		SET strsetProperty = strsetProperty _ strData
		
		SET strType = ..ConvertCacheTypeToKSoap2(MyProp.Type)
		SET strNomProp = ..ConvertCacheNameToKSoap2ArgName(NomProp)
		SET strConstructor = strConstructor _ strType _ " " _ strNomProp _ ","
		SET strConstructor01 = strConstructor01 _ "	" _ NomProp _ "=" _ strNomProp _ ";" _ $CHAR(13, 10)
		
		//SET strData = strConstructor02Modele
		//DO ##class(%Library.Utility).Replace(strData, "%FIELD%", NomProp, 0, .strData)
		SET strData = ..ConvertCacheTypeToKSoap2Conversion02(NomProp, MyProp.Type)
		DO ##class(%Library.Utility).Replace(strData, "%FIELD%", NomProp, 0, .strData)
		//DO ##class(%Library.Utility).Replace(strData, "%CONSTRUCTORCONVERSION%", strConversion, 0, .strData)
		SET strConstructor02 = strConstructor02 _ strData
	}
	IF $EXTRACT(strConstructor, *, *) = ","
	{
		SET strConstructor = $EXTRACT(strConstructor, 1, *-1)
	}
	SET strConstructor = strConstructor _ ")" _ $CHAR(13, 10)
	SET strConstructor = strConstructor _ "{" _ $CHAR(13, 10)
	SET strConstructor = strConstructor _ strConstructor01
	SET strConstructor = strConstructor _ "}" _ $CHAR(13, 10)
	
	DO ..Write4KSoap2("public " _ strClassName _ "(){}", , blnINGenerateFile, FileWriter) //WRITE "public " _ strClassName _ "(){}", !, !
	IF IsList
	{
		DO ..Write4KSoap2("public " _ strClassName _ "(SoapObject soapObject) {",, blnINGenerateFile, FileWriter)
		DO ..Write4KSoap2("try {",, blnINGenerateFile, FileWriter)
		DO ..Write4KSoap2("SoapObject soapObject01 = soapObject;",, blnINGenerateFile, FileWriter)
		DO ..Write4KSoap2("for (int i = 0; i < soapObject01.getPropertyCount(); i++) {",, blnINGenerateFile, FileWriter)
		DO ..Write4KSoap2("SoapObject pii = (SoapObject) soapObject01.getProperty(i);",, blnINGenerateFile, FileWriter)
		DO ..Write4KSoap2($$$TOLOWER(strELEMENTTYPEPackage) _ "." _ strELEMENTTYPEClassName _ " obj = new "  _ $$$TOLOWER(strELEMENTTYPEPackage) _ "." _ strELEMENTTYPEClassName _ "(pii);",, blnINGenerateFile, FileWriter)
		DO ..Write4KSoap2("this.add(obj);",, blnINGenerateFile, FileWriter)
		DO ..Write4KSoap2("}",, blnINGenerateFile, FileWriter)
		DO ..Write4KSoap2("} catch (Exception e) {",, blnINGenerateFile, FileWriter)
		DO ..Write4KSoap2("Log.d(""com.lbo.clinicom"", e.toString());",, blnINGenerateFile, FileWriter)
		DO ..Write4KSoap2("}",, blnINGenerateFile, FileWriter)
		DO ..Write4KSoap2("}",, blnINGenerateFile, FileWriter)
		DO ..Write4KSoap2("",, blnINGenerateFile, FileWriter)
	}
	ELSE
	{
		DO ..Write4KSoap2(strConstructor, 1, blnINGenerateFile, FileWriter) //WRITE strConstructor, !, !
	
		DO ..Write4KSoap2("public " _ strClassName _ "(SoapObject soapObject){", , blnINGenerateFile, FileWriter) //WRITE "public " _ strClassName _ "(SoapObject soapObject){", !
		DO ..Write4KSoap2(strConstructor02, , blnINGenerateFile, FileWriter) //WRITE strConstructor02, !
		DO ..Write4KSoap2("}", 1, blnINGenerateFile, FileWriter) //WRITE "}", !, !
	}
	IF strINSerializableClass '= "STD"
	{
		DO ..Write4KSoap2("@Override", , blnINGenerateFile, FileWriter)
	}
	DO ..Write4KSoap2("public int getPropertyCount() {", , blnINGenerateFile, FileWriter) //WRITE "public int getPropertyCount() {", !
	DO ..Write4KSoap2("	return " _ cdef.Properties.Count() _ ";", , blnINGenerateFile, FileWriter) //WRITE "	return " _ cdef.Properties.Count() _ ";", !
	DO ..Write4KSoap2("}", , blnINGenerateFile, FileWriter) //WRITE "}", !, !
	
	IF strINSerializableClass '= "STD"
	{
		DO ..Write4KSoap2("@Override", , blnINGenerateFile, FileWriter)
	}
	DO ..Write4KSoap2("public Object getProperty(int arg0) {", , blnINGenerateFile, FileWriter) //WRITE "public Object getProperty(int arg0) {", !
	DO ..Write4KSoap2("	switch(arg0)", , blnINGenerateFile, FileWriter) //WRITE "	switch(arg0)", !
	DO ..Write4KSoap2("	{", , blnINGenerateFile, FileWriter) //WRITE "	{", !
	DO ..Write4KSoap2(strgetProperty, , blnINGenerateFile, FileWriter) //WRITE strgetProperty, !
	DO ..Write4KSoap2("		default: return null;", , blnINGenerateFile, FileWriter) //WRITE "default: return null;", !
	DO ..Write4KSoap2("	}", , blnINGenerateFile, FileWriter) //WRITE "}", !
	DO ..Write4KSoap2("}", 1, blnINGenerateFile, FileWriter) //WRITE "}", !, !

	IF strINSerializableClass '= "STD"
	{
		DO ..Write4KSoap2("@Override", , blnINGenerateFile, FileWriter)
	}
	DO ..Write4KSoap2("public void getPropertyInfo(int index, Hashtable arg1, PropertyInfo info) {", , blnINGenerateFile, FileWriter) //WRITE "public void getPropertyInfo(int index, Hashtable arg1, PropertyInfo info) {", !
	DO ..Write4KSoap2("	switch(index)", , blnINGenerateFile, FileWriter) //WRITE "	switch(index)", !
	DO ..Write4KSoap2("	{", , blnINGenerateFile, FileWriter) //WRITE "	{", !
	DO ..Write4KSoap2(strgetPropertyInfo, , blnINGenerateFile, FileWriter) //WRITE strgetPropertyInfo, !
	DO ..Write4KSoap2("		default:break;", , blnINGenerateFile, FileWriter) //WRITE "default:break;", !
	DO ..Write4KSoap2("	}", , blnINGenerateFile, FileWriter) //WRITE "}", !
	DO ..Write4KSoap2("}", 1, blnINGenerateFile, FileWriter) //WRITE "}", !, !

	IF strINSerializableClass '= "STD"
	{
		DO ..Write4KSoap2("@Override", , blnINGenerateFile, FileWriter)
	}
	DO ..Write4KSoap2("public void setProperty(int index, Object value) {", , blnINGenerateFile, FileWriter) //WRITE "public void setProperty(int index, Object value) {", !
	DO ..Write4KSoap2("	switch(index)", , blnINGenerateFile, FileWriter) //WRITE "	switch(index)", !
	DO ..Write4KSoap2("	{", , blnINGenerateFile, FileWriter) //WRITE "	{", !
	DO ..Write4KSoap2(strsetProperty, , blnINGenerateFile, FileWriter) //WRITE strsetProperty, !
	DO ..Write4KSoap2("		default:break;", , blnINGenerateFile, FileWriter) //WRITE "default:break;", !
	DO ..Write4KSoap2("	}", , blnINGenerateFile, FileWriter) //WRITE "}", !
	DO ..Write4KSoap2("}", 1, blnINGenerateFile, FileWriter) //WRITE "}", !, !

	DO ..Write4KSoap2(strProperties, , blnINGenerateFile, FileWriter) //	W strProperties
	DO ..Write4KSoap2("}", , blnINGenerateFile, FileWriter) //W "}", !
	IF 'blnINGenerateFile
	{
		W "// Classe à créer: " _ strINPackage _ "." _  strClassName
	}
	IF blnINGenerateFile
	{
		DO FileWriter.Close()
	}
]]></Implementation>
</Method>

<Method name="SaveBinaryData">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&ClsINOUTContext:Region.FRXX.ClinicomLink.cli.Wrd.ClassContext,strINIPP:%String,strINEpisode:%String,strINSourceDataType:%String,INFile:%Library.GlobalBinaryStream,strINDestDataType:%String]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	set $ztrap = "SaveBinaryDataError"
	set Retour = $$$FALSE
	
	SET:(ClsINOUTContext = $$$NULLOREF) ClsINOUTContext = ##class(Region.FRXX.ClinicomLink.cli.Wrd.ClassContext).%New()
	DO ClsINOUTContext.Reset()

	$$$CVTSTR4WSAUTO(strINIPP)
	$$$CVTSTR4WSAUTO(strINEpisode)
	$$$CVTSTR4WSAUTO(strINSourceDataType)
	$$$CVTSTR4WSAUTO(strINDestDataType)
	
	if strINSourceDataType = ""
	{
		set strINSourceDataType = $p(strINSourceDataType, ".", *)
	}
	SET:(strINDestDataType = "") strINDestDataType = "WAV"

	set strEpisodeID = $ORDER(^PAADMi("No", strINEpisode, ""))
	if strEpisodeID = ""
	{
		set ClsINOUTContext.Error = "Episode inconnu."
		DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError(ClsINOUTContext.Error)
		Goto SaveBinaryDataFin
	}
	
	SET FileWriter = ##class(%Library.FileBinaryStream).%New()
	set strFilename = ##class(%Library.File).TempFilename(strINSourceDataType)
	s ^zTQLBO("strFilename") = strFilename
	SET FileWriter.Filename = strFilename
	SET sc = FileWriter.CopyFrom(INFile)
	If $$$ISERR(sc)
	{
		set ClsINOUTContext.Error = $System.Status.GetErrorText(sc)
		DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError(ClsINOUTContext.Error)
		Goto SaveBinaryDataFin
	}
	SET sc = FileWriter.%Save()
	If $$$ISERR(sc)
	{
		set ClsINOUTContext.Error = $System.Status.GetErrorText(sc)
		DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError(ClsINOUTContext.Error)
		Goto SaveBinaryDataFin
	}
	SET FileWriter = $$$NULLOREF
	
	set strDestFilename = ##class(%Library.File).TempFilename("WAV")
	set strCmd = "/usr/local/ffmpeg/ffmpeg -loglevel panic -y -i """ _ strFilename _ """ """ _ strDestFilename _ """"
	s ^zTQLBO("strCmd") = strCmd
	set EOF = $zutil(68, 40)
	do $zutil(68, 40, 1)
	open strCmd:"QR"
	for
	{
		use strCmd read x
		quit:$zeof=-1
		use 0
		//write x, !
	}
	close strCmd
	do $zutil(68, 40, EOF)

	set PointerID=""
	set doc=##class(websys.Document).New("WAV", 0, .PointerID)
	//copy the binary data from the file to the document data
	if doc {
		/*set bytes="",(maxlen,len)="32000"
		for  {
			quit:len<maxlen
			set bytes=imageData.Read(.len)
			do doc.docData.Write(bytes)
		}*/
		set MyFile = ##class(%Library.FileBinaryStream).%New()
		SET MyFile.Filename = strDestFilename
		SET sc = doc.docData.CopyFrom(MyFile)
		do doc.docData.SaveStream()
		set sc=doc.%Save()
		If $$$ISERR(sc)
		{
			set ClsINOUTContext.Error = $System.Status.GetErrorText(sc)
			DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError(ClsINOUTContext.Error)
			Goto SaveBinaryDataFin
		}
		set DocumentDR=PointerID
		set doc=""
		
		set PARREF = $PIECE($get(^PAADM(strEpisodeID)), "^", 61)
		set objPic=##class(User.MRPictures).%New(PARREF)
		do objPic.PICParRefSetObjectId(PARREF)
		set objPic.PICPath=DocumentDR
		set objPic.PICDateCreated=+$h
		set objPic.PICTimeCreated=$piece($h,",",2)
		set objPic.PICUpdateDate=objPic.PICDateCreated
		set objPic.PICUpdateTime=objPic.PICTimeCreated
		set objPic.PICType=Type
		//set MRCPictDR=##class(web.MRCPictureCode).GetIdFromCodeOrDescription($get(%request.Data("PICFileDesc",1)))
		//do objPic.PICMRCPictDRSetObjectId(MRCPictDR)

		//if docType'="" do objPic.PICDocTypeDRSetObjectId(docType)
		//if docSubType'="" do objPic.PICDocSubTypeDRSetObjectId(docSubType)
		set sc=objPic.%Save(0)
		If $$$ISERR(sc)
		{
			set ClsINOUTContext.Error = $System.Status.GetErrorText(sc)
			DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError(ClsINOUTContext.Error)
			Goto SaveBinaryDataFin
		}
	}
	
	do ##class(%Library.File).Delete(strFilename)

	///usr/local/ffmpeg/ffmpeg -loglevel panic -y -i aa aa1.mp3
	SET Retour = $$$TRUE
	goto SaveBinaryDataFin
	
SaveBinaryDataError
	SET ClsINOUTContext.Error = $ZERROR
	DO ##class(Region.FRXX.ClinicomLink.ClassUtils).LogError($ZERROR)
SaveBinaryDataFin
	quit Retour
]]></Implementation>
</Method>
</Class>


<Class name="Region.FRXX.ClinicomLink.cli.Grp.ClassListofUserLocations">
<Super>%Library.ListOfObjects,%XML.Adaptor</Super>
<TimeChanged>63013,56957.549006</TimeChanged>
<TimeCreated>63008,52757.110481</TimeCreated>

<Parameter name="ELEMENTTYPE">
<Description>
The type (class name) of the elements stored in the collection.</Description>
<Default>Region.FRXX.ClinicomLink.cli.Grp.ClassUserLocation</Default>
</Parameter>

<Storage name="Custom">
<Type>%Library.CompleteCustomStorage</Type>
</Storage>
</Class>


<Class name="Region.FRXX.ClinicomLink.cli.Grp.ClassUserLocation">
<IncludeCode>ClinicomConstantes</IncludeCode>
<Super>%RegisteredObject,%XML.Adaptor</Super>
<TimeChanged>63957,63744.093559</TimeChanged>
<TimeCreated>63011,37279.122285</TimeCreated>

<Parameter name="XMLIGNOREINVALIDTAG">
<Description>
The XMLIGNOREINVALIDTAG parameter allows the programmer to control handling of unexpected
elements in the XML input.  
By default (XMLIGNOREINVALIDTAG = 0), will treat an unexpected element as an error.
If XMLIGNOREINVALIDTAG is set = 1, then unexpected elements will be ignored. </Description>
<Type>BOOLEAN</Type>
<Default>1</Default>
</Parameter>

<Property name="LocationId">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="LocationCode">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="LocationDesc">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="GroupId">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="GroupCode">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="HospitalId">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="HospitalCode">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="HospitalDesc">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="ProfileId">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="ProfileDesc">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="SiteCode">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>
</Class>


<Class name="Region.FRXX.ClinicomLink.cli.Pat.ClassEpisode">
<IncludeCode>ClinicomConstantes</IncludeCode>
<Super>%RegisteredObject,%XML.Adaptor</Super>
<TimeChanged>63959,27080.454828</TimeChanged>
<TimeCreated>63012,28843.43247</TimeCreated>

<Parameter name="XMLIGNOREINVALIDTAG">
<Description>
The XMLIGNOREINVALIDTAG parameter allows the programmer to control handling of unexpected
elements in the XML input.  
By default (XMLIGNOREINVALIDTAG = 0), will treat an unexpected element as an error.
If XMLIGNOREINVALIDTAG is set = 1, then unexpected elements will be ignored. </Description>
<Type>BOOLEAN</Type>
<Default>1</Default>
</Parameter>

<Property name="EpisodeId">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="PatientId">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="MRId">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="ApptId">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="EpisodeExt">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="IPP">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="AdmDTTM">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="DischDTTM">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="WardDesc">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="DoctorDesc">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="HospitalDesc">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="StatusDesc">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="Tag">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>
</Class>


<Class name="Region.FRXX.ClinicomLink.cli.Pat.ClassListofEpisodes">
<Super>%Library.ListOfObjects,%XML.Adaptor</Super>
<TimeChanged>63012,28866.865437</TimeChanged>
<TimeCreated>63008,52757.110481</TimeCreated>

<Parameter name="ELEMENTTYPE">
<Description>
The type (class name) of the elements stored in the collection.</Description>
<Default>Region.FRXX.ClinicomLink.cli.Pat.ClassEpisode</Default>
</Parameter>

<Storage name="Custom">
<Type>%Library.CompleteCustomStorage</Type>
</Storage>
</Class>


<Class name="Region.FRXX.ClinicomLink.cli.Pat.ClassListofPatients">
<Super>%Library.ListOfObjects,%XML.Adaptor</Super>
<TimeChanged>63011,64356.577465</TimeChanged>
<TimeCreated>63008,52757.110481</TimeCreated>

<Parameter name="ELEMENTTYPE">
<Description>
The type (class name) of the elements stored in the collection.</Description>
<Default>Region.FRXX.ClinicomLink.cli.Pat.ClassPatient</Default>
</Parameter>

<Storage name="Custom">
<Type>%Library.CompleteCustomStorage</Type>
</Storage>
</Class>


<Class name="Region.FRXX.ClinicomLink.cli.Pat.ClassListofPatientsAppt">
<Super>%Library.ListOfObjects,%XML.Adaptor</Super>
<TimeChanged>64699,33761.026271</TimeChanged>
<TimeCreated>63008,52757.110481</TimeCreated>

<Parameter name="ELEMENTTYPE">
<Description>
The type (class name) of the elements stored in the collection.</Description>
<Default>Region.FRXX.ClinicomLink.cli.Pat.ClassPatientAppt</Default>
</Parameter>

<Storage name="Custom">
<Type>%Library.CompleteCustomStorage</Type>
</Storage>
</Class>


<Class name="Region.FRXX.ClinicomLink.cli.Pat.ClassPatient">
<IncludeCode>ClinicomConstantes</IncludeCode>
<Super>%RegisteredObject,%XML.Adaptor</Super>
<TimeChanged>63013,40875.886513</TimeChanged>
<TimeCreated>63011,64319.956955</TimeCreated>

<Parameter name="XMLIGNOREINVALIDTAG">
<Description>
The XMLIGNOREINVALIDTAG parameter allows the programmer to control handling of unexpected
elements in the XML input.  
By default (XMLIGNOREINVALIDTAG = 0), will treat an unexpected element as an error.
If XMLIGNOREINVALIDTAG is set = 1, then unexpected elements will be ignored. </Description>
<Type>BOOLEAN</Type>
<Default>1</Default>
</Parameter>

<Property name="PatientId">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="FirstName">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="LastName">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="MaidenName">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="DateOfBirth">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="Sex">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="IPP">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="Age">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="Tag">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>
</Class>


<Class name="Region.FRXX.ClinicomLink.cli.Pat.ClassPatientAppt">
<IncludeCode>ClinicomConstantes</IncludeCode>
<Super>Region.FRXX.ClinicomLink.cli.Pat.ClassPatient</Super>
<TimeChanged>64748,68447.140695</TimeChanged>
<TimeCreated>63011,64319.956955</TimeCreated>

<Parameter name="XMLIGNOREINVALIDTAG">
<Description>
The XMLIGNOREINVALIDTAG parameter allows the programmer to control handling of unexpected
elements in the XML input.  
By default (XMLIGNOREINVALIDTAG = 0), will treat an unexpected element as an error.
If XMLIGNOREINVALIDTAG is set = 1, then unexpected elements will be ignored. </Description>
<Type>BOOLEAN</Type>
<Default>1</Default>
</Parameter>

<Property name="PatientId">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="FirstName">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="LastName">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="MaidenName">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="DateOfBirth">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="Sex">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="IPP">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="Age">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="Tag">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="ApptId">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="ApptStatus">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="ApptDate">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="ApptTime">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="CTLocCode">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="CTLocDesc">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="Episode">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="EpisodeId">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>
</Class>


<Class name="Region.FRXX.ClinicomLink.cli.PatS.ClassPatientSearchByRBResource">
<IncludeCode>ClinicomConstantes</IncludeCode>
<Super>%RegisteredObject,%XML.Adaptor</Super>
<TimeChanged>64700,32915.276804</TimeChanged>
<TimeCreated>63011,40868.033018</TimeCreated>

<Parameter name="XMLIGNOREINVALIDTAG">
<Description>
The XMLIGNOREINVALIDTAG parameter allows the programmer to control handling of unexpected
elements in the XML input.  
By default (XMLIGNOREINVALIDTAG = 0), will treat an unexpected element as an error.
If XMLIGNOREINVALIDTAG is set = 1, then unexpected elements will be ignored. </Description>
<Type>BOOLEAN</Type>
<Default>1</Default>
</Parameter>

<Property name="ResourceCode">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="Location">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="StartDate">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="EndDate">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="ApptStatus">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>
</Class>


<Class name="Region.FRXX.ClinicomLink.cli.PatS.ClassPatientSearchIdentity">
<IncludeCode>ClinicomConstantes</IncludeCode>
<Super>%RegisteredObject,%XML.Adaptor</Super>
<TimeChanged>63011,43210.724021</TimeChanged>
<TimeCreated>63011,40868.033018</TimeCreated>

<Parameter name="XMLIGNOREINVALIDTAG">
<Description>
The XMLIGNOREINVALIDTAG parameter allows the programmer to control handling of unexpected
elements in the XML input.  
By default (XMLIGNOREINVALIDTAG = 0), will treat an unexpected element as an error.
If XMLIGNOREINVALIDTAG is set = 1, then unexpected elements will be ignored. </Description>
<Type>BOOLEAN</Type>
<Default>1</Default>
</Parameter>

<Property name="FirstName">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="LastName">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="DateOfBirth">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="Sex">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>
</Class>


<Class name="Region.FRXX.ClinicomLink.cli.SDC.ClassListofMedecinsEtab">
<Super>%Library.ListOfObjects,%XML.Adaptor</Super>
<TimeChanged>63960,27558.802253</TimeChanged>
<TimeCreated>63959,27775.080325</TimeCreated>

<Parameter name="ELEMENTTYPE">
<Description>
The type (class name) of the elements stored in the collection.</Description>
<Default>Region.FRXX.ClinicomLink.cli.SDC.ClassMedecinEtab</Default>
</Parameter>

<Storage name="Custom">
<Type>%Library.CompleteCustomStorage</Type>
</Storage>
</Class>


<Class name="Region.FRXX.ClinicomLink.cli.SDC.ClassListofMedecinsExt">
<Super>%Library.ListOfObjects,%XML.Adaptor</Super>
<TimeChanged>63959,27777.829237</TimeChanged>
<TimeCreated>63959,27775.080325</TimeCreated>

<Parameter name="ELEMENTTYPE">
<Description>
The type (class name) of the elements stored in the collection.</Description>
<Default>Region.FRXX.ClinicomLink.cli.SDC.ClassMedecinExt</Default>
</Parameter>

<Storage name="Custom">
<Type>%Library.CompleteCustomStorage</Type>
</Storage>
</Class>


<Class name="Region.FRXX.ClinicomLink.cli.SDC.ClassMedecinEtab">
<Super>%RegisteredObject,%XML.Adaptor</Super>
<TimeChanged>63960,27513.136753</TimeChanged>
<TimeCreated>63960,27513.136753</TimeCreated>

<Property name="DoctorId">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="Code">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="Name">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<UDLText name="T">
<Content><![CDATA[
// Prénom

]]></Content>
</UDLText>

<Property name="Forename">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="MaidenName">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="Title">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="Address1">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="Address2">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="Address3">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="ZIPCode">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="City">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="Phone">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="MobilePhone">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="PhonePro">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="Fax">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="Email">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="Email2">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="ADELI">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="Specialty">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>
</Class>


<Class name="Region.FRXX.ClinicomLink.cli.SDC.ClassMedecinExt">
<Super>%RegisteredObject,%XML.Adaptor</Super>
<TimeChanged>63959,57838.867822</TimeChanged>
<TimeCreated>63959,27394.334378</TimeCreated>

<Property name="DoctorId">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="Code">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="Name">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<UDLText name="T">
<Content><![CDATA[
// Prénom

]]></Content>
</UDLText>

<Property name="Forename">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="MaidenName">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="Title">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="Address1">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="Address2">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="Address3">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="ZIPCode">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="City">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="Phone">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="MobilePhone">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="PhonePro">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="Fax">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="Email">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="Email2">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="ADELI">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="Specialty">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>
</Class>


<Class name="Region.FRXX.ClinicomLink.cli.Wrd.ClassContext">
<Super>%RegisteredObject,%XML.Adaptor</Super>
<TimeChanged>63960,29109.38723</TimeChanged>
<TimeCreated>63945,64862.407652</TimeCreated>

<Parameter name="XMLIGNOREINVALIDTAG">
<Default>1</Default>
</Parameter>

<Property name="Identifier">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="SessionId">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="Username">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="UserId">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="HospitalId">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="HospitalCode">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="HospitalDesc">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="LocationId">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="LocationDesc">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="ProfileId">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="ProfileDesc">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="Error">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="LanguageId">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="Region">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="SiteCode">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="GroupId">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="GroupCode">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="Tag">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Method name="Reset">
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[	SET ..Error = ""
]]></Implementation>
</Method>
</Class>


<Class name="Region.FRXX.ClinicomLink.cli.Wrd.ClassCorrespondant">
<Owner>UnknownUser</Owner>
<Super>%Persistent,%XML.Adaptor</Super>
<TimeChanged>64007,39876.67491</TimeChanged>
<TimeCreated>63963,75563.780233</TimeCreated>

<Property name="TypeCorrespondant">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="AddressType">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="CorrespId">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="BeginDate">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="Order">
<Type>%Integer</Type>
</Property>

<Property name="FirstName">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="LastName">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="MaidenName">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="Qualite">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="Title">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="Address1">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="Address2">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="Address3">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="ZIPCode">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="City">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="Country">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="Phone">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="MobilePhone">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="PhonePro">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="Fax">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="Email">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="Email2">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="SendMail">
<Type>%Boolean</Type>
</Property>

<Property name="SendCourrier">
<Type>%Boolean</Type>
</Property>

<Property name="Tag">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Region.FRX80F0.ClassCorres37EED</DataLocation>
<DefaultData>ClassCorrespondantDefaultData</DefaultData>
<IdLocation>^Region.FRX80F0.ClassCorres37EED</IdLocation>
<IndexLocation>^Region.FRX80F0.ClassCorres37EEI</IndexLocation>
<StreamLocation>^Region.FRX80F0.ClassCorres37EES</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="ClassCorrespondantDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>FirstName</Value>
</Value>
<Value name="3">
<Value>LastName</Value>
</Value>
<Value name="4">
<Value>MaidenName</Value>
</Value>
<Value name="5">
<Value>Title</Value>
</Value>
<Value name="6">
<Value>Address1</Value>
</Value>
<Value name="7">
<Value>Address2</Value>
</Value>
<Value name="8">
<Value>Address3</Value>
</Value>
<Value name="9">
<Value>ZIPCode</Value>
</Value>
<Value name="10">
<Value>City</Value>
</Value>
<Value name="11">
<Value>Phone</Value>
</Value>
<Value name="12">
<Value>MobilePhone</Value>
</Value>
<Value name="13">
<Value>PhonePro</Value>
</Value>
<Value name="14">
<Value>Fax</Value>
</Value>
<Value name="15">
<Value>Email</Value>
</Value>
<Value name="16">
<Value>Email2</Value>
</Value>
<Value name="17">
<Value>Tag</Value>
</Value>
<Value name="18">
<Value>TypeCorrespondant</Value>
</Value>
<Value name="19">
<Value>Order</Value>
</Value>
<Value name="20">
<Value>AddressType</Value>
</Value>
<Value name="21">
<Value>BeginDate</Value>
</Value>
<Value name="22">
<Value>CorrespId</Value>
</Value>
<Value name="23">
<Value>Country</Value>
</Value>
<Value name="24">
<Value>SendMail</Value>
</Value>
<Value name="25">
<Value>SendCourrier</Value>
</Value>
<Value name="26">
<Value>Qualite</Value>
</Value>
<Value name="27">
<Value>SousTypeCorrespondant</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Region.FRXX.ClinicomLink.cli.Wrd.ClassDocument">
<IncludeCode>ClinicomConstantes</IncludeCode>
<Super>%Persistent,%XML.Adaptor</Super>
<TimeChanged>64008,30682.710368</TimeChanged>
<TimeCreated>63008,44168.103814</TimeCreated>

<Property name="PatientId">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN"/>
</Property>

<Property name="EpisodeId">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN"/>
</Property>

<Property name="DocumentId">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="PALetterId">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="PlainRichTextId">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="HTMLRichTextId">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="DocumentType">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="Domaine">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="DocumentName">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="IsZipped">
<Type>%Boolean</Type>
<InitialExpression>$$$FALSE</InitialExpression>
</Property>

<Property name="ListofDocuments">
<Type>Region.FRXX.ClinicomLink.cli.Wrd.ClassListofDocumentsStream</Type>
</Property>

<Property name="DocumentStatus">
<Type>%String</Type>
<InitialExpression>100</InitialExpression>
<Parameter name="MAXLEN"/>
</Property>

<Property name="CreationDTTM">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="CreationUserRowId">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="CreationUserDesc">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="CreationUserCode">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="LastModifDTTM">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="LastModifUserRowId">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="LastModifUserDesc">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="LastModifUserCode">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="ValidateDTTM">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="ValidateUserRowId">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="ValidateUserCode">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="ValidateUserDesc">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="TypistRowId">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="TypistCode">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="TypistDesc">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="DoctorRowId">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="DoctorCode">
<Type>%String</Type>
<Transient>1</Transient>
<Parameter name="MAXLEN"/>
</Property>

<Property name="DoctorDesc">
<Type>%String</Type>
<Transient>1</Transient>
<Parameter name="MAXLEN"/>
</Property>

<Property name="Title">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="WardCode">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="MergeFields">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="Publipostage">
<Type>%Boolean</Type>
</Property>

<Property name="Tag">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Index name="IdxPatientId">
<Properties>PatientId</Properties>
</Index>

<Index name="IdxEpisodeId">
<Properties>EpisodeId</Properties>
</Index>

<Method name="%OnAfterSave">
<Description><![CDATA[
This callback method is invoked by the <METHOD>%Save</METHOD> method to 
provide notification that the object is being saved. It is called after 
the object's data has been successfully written to disk.

<P><VAR>insert</VAR> will be set to 1 if this object is being saved for the first time.

<P>If this method returns an error then the call to <METHOD>%Save</METHOD> will fail.]]></Description>
<FormalSpec>insert:%Boolean</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	FOR I=1:1:..ListofDocuments.Count()
	{
		SET ClsDocument = ..ListofDocuments.GetAt(I)
		SET ClsDocument.ParentId = ..%Id()
		DO ClsDocument.%Save()
	}
	SET ..DocumentId = ..%Id()
	Quit $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Custom.FRXXBFEE.ClassDocumentD</DataLocation>
<DefaultData>ClassDocumentDefaultData</DefaultData>
<IdLocation>^Custom.FRXXBFEE.ClassDocumentD</IdLocation>
<IndexLocation>^Custom.FRXXBFEE.ClassDocumentI</IndexLocation>
<StreamLocation>^Custom.FRXXBFEE.ClassDocumentS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="ClassDocumentDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>PatientId</Value>
</Value>
<Value name="3">
<Value>EpisodeId</Value>
</Value>
<Value name="4">
<Value>DocumentName</Value>
</Value>
<Value name="5">
<Value>ListofDocuments</Value>
</Value>
<Value name="6">
<Value>DocumentId</Value>
</Value>
<Value name="7">
<Value>IsZipped</Value>
</Value>
<Value name="8">
<Value>DocumentStatus</Value>
</Value>
<Value name="9">
<Value>CreationDTTM</Value>
</Value>
<Value name="10">
<Value>CreationUserRowId</Value>
</Value>
<Value name="11">
<Value>LastModifDTTM</Value>
</Value>
<Value name="12">
<Value>LastModifUserRowId</Value>
</Value>
<Value name="13">
<Value>ValidateDTTM</Value>
</Value>
<Value name="14">
<Value>ValidateUserRowId</Value>
</Value>
<Value name="15">
<Value>TypistRowId</Value>
</Value>
<Value name="16">
<Value>DoctorRowId</Value>
</Value>
<Value name="17">
<Value>Tag</Value>
</Value>
<Value name="18">
<Value>DocumentType</Value>
</Value>
<Value name="19">
<Value>PALetterId</Value>
</Value>
<Value name="20">
<Value>PlainRichTextId</Value>
</Value>
<Value name="21">
<Value>HTMLRichTextId</Value>
</Value>
<Value name="22">
<Value>CreationUserDesc</Value>
</Value>
<Value name="23">
<Value>CreationUserCode</Value>
</Value>
<Value name="24">
<Value>LastModifUserDesc</Value>
</Value>
<Value name="25">
<Value>LastModifUserCode</Value>
</Value>
<Value name="26">
<Value>ValidateUserCode</Value>
</Value>
<Value name="27">
<Value>ValidateUserDesc</Value>
</Value>
<Value name="28">
<Value>TypistCode</Value>
</Value>
<Value name="29">
<Value>TypistDesc</Value>
</Value>
<Value name="30">
<Value>DoctorCode</Value>
</Value>
<Value name="31">
<Value>DoctorDesc</Value>
</Value>
<Value name="32">
<Value>MergeFields</Value>
</Value>
<Value name="33">
<Value>Domaine</Value>
</Value>
<Value name="34">
<Value>Title</Value>
</Value>
<Value name="35">
<Value>Publipostage</Value>
</Value>
<Value name="36">
<Value>WardCode</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Region.FRXX.ClinicomLink.cli.Wrd.ClassDocumentStream">
<IncludeCode>ClinicomConstantes</IncludeCode>
<Super>%Persistent,%XML.Adaptor</Super>
<TimeChanged>63961,65031.864109</TimeChanged>
<TimeCreated>63008,44286.748877</TimeCreated>

<Property name="DocumentId">
<Type>%String</Type>
<Calculated>1</Calculated>
<SqlComputeCode> Set {*}={ID}</SqlComputeCode>
<SqlComputed>1</SqlComputed>
<Transient>1</Transient>
</Property>

<Property name="Content">
<Type>%Library.GlobalBinaryStream</Type>
</Property>

<Property name="DocumentType">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="ParentId">
<Type>%String</Type>
<Cardinality>one</Cardinality>
<Parameter name="XMLPROJECTION" value="NONE"/>
</Property>

<Property name="DocumentSize">
<Type>%Integer</Type>
</Property>

<Property name="LocalFilename">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<UDLText name="T">
<Content><![CDATA[
// sample : "APP=WORD;VERSION=11;PROC=32"

]]></Content>
</UDLText>

<Property name="Generator">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="IsZipped">
<Type>%Boolean</Type>
<InitialExpression>$$$FALSE</InitialExpression>
</Property>

<Property name="Tag">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Method name="DocumentIdGet">
<ReturnType>%String</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[	QUIT ..%Id()
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Custom.FRXBFEE.ClassDocumeDDA4D</DataLocation>
<DefaultData>ClassDocumentStreamDefaultData</DefaultData>
<IdLocation>^Custom.FRXBFEE.ClassDocumeDDA4D</IdLocation>
<IndexLocation>^Custom.FRXBFEE.ClassDocumeDDA4I</IndexLocation>
<StreamLocation>^Custom.FRXBFEE.ClassDocumeDDA4S</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="ClassDocumentStreamDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Content</Value>
</Value>
<Value name="3">
<Value>DocumentType</Value>
</Value>
<Value name="4">
<Value>DocumentId</Value>
</Value>
<Value name="5">
<Value>ParentId</Value>
</Value>
<Value name="6">
<Value>Generator</Value>
</Value>
<Value name="7">
<Value>DocumentFileType</Value>
</Value>
<Value name="8">
<Value>DocumentSize</Value>
</Value>
<Value name="9">
<Value>LocalFilename</Value>
</Value>
<Value name="10">
<Value>Tag</Value>
</Value>
<Value name="11">
<Value>IsZipped</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Region.FRXX.ClinicomLink.cli.Wrd.ClassLTMRU">
<Owner>UnknownUser</Owner>
<Super>%Persistent,%XML.Adaptor</Super>
<TimeChanged>64009,29265.654605</TimeChanged>
<TimeCreated>63964,77116.891896</TimeCreated>

<Property name="DocumentIds">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="UserId">
<Type>%Integer</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Region.FRXX.Cli80F0.ClassLTMRUD</DataLocation>
<DefaultData>ClassLTMRUDefaultData</DefaultData>
<IdLocation>^Region.FRXX.Cli80F0.ClassLTMRUD</IdLocation>
<IndexLocation>^Region.FRXX.Cli80F0.ClassLTMRUI</IndexLocation>
<StreamLocation>^Region.FRXX.Cli80F0.ClassLTMRUS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="ClassLTMRUDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>DocumentIds</Value>
</Value>
<Value name="3">
<Value>UserId</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Region.FRXX.ClinicomLink.cli.Wrd.ClassListofCorrespondants">
<Super>%Library.ListOfObjects,%XML.Adaptor</Super>
<TimeChanged>63963,76299.400971</TimeChanged>
<TimeCreated>63008,52757.110481</TimeCreated>

<Parameter name="ELEMENTTYPE">
<Description>
The type (class name) of the elements stored in the collection.</Description>
<Default>Region.FRXX.ClinicomLink.cli.Wrd.ClassCorrespondant</Default>
</Parameter>

<Storage name="Custom">
<Type>%Library.CompleteCustomStorage</Type>
</Storage>
</Class>


<Class name="Region.FRXX.ClinicomLink.cli.Wrd.ClassListofDocuments">
<Super>%Library.ListOfObjects,%XML.Adaptor</Super>
<TimeChanged>63008,78677.252984</TimeChanged>
<TimeCreated>63008,52757.110481</TimeCreated>

<Parameter name="ELEMENTTYPE">
<Description>
The type (class name) of the elements stored in the collection.</Description>
<Default>Region.FRXX.ClinicomLink.cli.Wrd.ClassDocument</Default>
</Parameter>

<Storage name="Custom">
<Type>%Library.CompleteCustomStorage</Type>
</Storage>
</Class>


<Class name="Region.FRXX.ClinicomLink.cli.Wrd.ClassListofDocumentsStream">
<Super>%Library.ListOfObjects,%XML.Adaptor</Super>
<TimeChanged>63008,52757.74524</TimeChanged>
<TimeCreated>63008,52757.110481</TimeCreated>

<Parameter name="ELEMENTTYPE">
<Description>
The type (class name) of the elements stored in the collection.</Description>
<Default>Region.FRXX.ClinicomLink.cli.Wrd.ClassDocumentStream</Default>
</Parameter>

<Storage name="Custom">
<Type>%Library.CompleteCustomStorage</Type>
</Storage>
</Class>


<Class name="Region.FRXX.ClinicomLink.cli.Wrd.ClassListofMergeFields">
<Super>%Library.ListOfObjects,%XML.Adaptor</Super>
<TimeChanged>63012,40765.792402</TimeChanged>
<TimeCreated>63012,31809.227211</TimeCreated>

<Parameter name="ELEMENTTYPE">
<Description>
The type (class name) of the elements stored in the collection.</Description>
<Default>Region.FRXX.ClinicomLink.cli.Wrd.ClassMergeField</Default>
</Parameter>

<Storage name="Custom">
<Type>%Library.CompleteCustomStorage</Type>
</Storage>
</Class>


<Class name="Region.FRXX.ClinicomLink.cli.Wrd.ClassListofWards">
<Super>%Library.ListOfObjects,%XML.Adaptor</Super>
<TimeChanged>63970,64607.039241</TimeChanged>
<TimeCreated>63008,52757.110481</TimeCreated>

<Parameter name="ELEMENTTYPE">
<Description>
The type (class name) of the elements stored in the collection.</Description>
<Default>Region.FRXX.ClinicomLink.cli.Wrd.ClassWard</Default>
</Parameter>

<Storage name="Custom">
<Type>%Library.CompleteCustomStorage</Type>
</Storage>
</Class>


<Class name="Region.FRXX.ClinicomLink.cli.Wrd.ClassMergeField">
<Super>%Persistent,%XML.Adaptor</Super>
<TimeChanged>63012,37719.30267</TimeChanged>
<TimeCreated>63012,31828.937295</TimeCreated>

<Property name="FieldId">
<Type>%String</Type>
<Calculated>1</Calculated>
<SqlComputeCode> Set {*}={ID}</SqlComputeCode>
<SqlComputed>1</SqlComputed>
<Transient>1</Transient>
<Parameter name="MAXLEN"/>
</Property>

<Property name="FieldName">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="Sample">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="Category">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="Value">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Index name="IdxFieldName">
<PrimaryKey>1</PrimaryKey>
<Properties>FieldName</Properties>
<Unique>1</Unique>
</Index>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Custom.FRXBFEE.ClassMergeF9739D</DataLocation>
<DefaultData>ClassMergeFieldDefaultData</DefaultData>
<IdLocation>^Custom.FRXBFEE.ClassMergeF9739D</IdLocation>
<IndexLocation>^Custom.FRXBFEE.ClassMergeF9739I</IndexLocation>
<StreamLocation>^Custom.FRXBFEE.ClassMergeF9739S</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="ClassMergeFieldDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>FieldName</Value>
</Value>
<Value name="3">
<Value>Sample</Value>
</Value>
<Value name="4">
<Value>Category</Value>
</Value>
<Value name="5">
<Value>Value</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Region.FRXX.ClinicomLink.cli.Wrd.ClassMergeTemplate">
<Super>%Persistent,%XML.Adaptor</Super>
<TimeChanged>63945,56891.083424</TimeChanged>
<TimeCreated>63012,31641.182431</TimeCreated>

<Property name="TemplateName">
<Type>%String</Type>
<Calculated>1</Calculated>
<SqlComputeCode> Set {*}={ID}</SqlComputeCode>
<SqlComputed>1</SqlComputed>
<Transient>1</Transient>
<Parameter name="MAXLEN"/>
</Property>

<Property name="TemplateId">
<Type>%String</Type>
<Calculated>1</Calculated>
<SqlComputeCode> Set {*}={ID}</SqlComputeCode>
<SqlComputed>1</SqlComputed>
<Transient>1</Transient>
<Parameter name="MAXLEN"/>
</Property>

<Property name="TemplateStream">
<Type>Region.FRXX.ClinicomLink.cli.Wrd.ClassDocumentStream</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Region.FRX80F0.ClassMergeTF796D</DataLocation>
<DefaultData>ClassMergeTemplateDefaultData</DefaultData>
<IdLocation>^Region.FRX80F0.ClassMergeTF796D</IdLocation>
<IndexLocation>^Region.FRX80F0.ClassMergeTF796I</IndexLocation>
<StreamLocation>^Region.FRX80F0.ClassMergeTF796S</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="ClassMergeTemplateDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>TemplateStream</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Region.FRXX.ClinicomLink.cli.Wrd.ClassWard">
<Super>%RegisteredObject,%XML.Adaptor</Super>
<TimeChanged>63970,64522.101546</TimeChanged>
<TimeCreated>63970,64403.953549</TimeCreated>

<Parameter name="XMLIGNOREINVALIDTAG">
<Default>1</Default>
</Parameter>

<Property name="Code">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="Description">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Property name="Tag">
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>
</Class>
</Export>
